{"index": 2, "id": null, "question": "How can an AI classify the MNIST handwritten digits dataset using the TensorFlow library?", "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.6514379978179932}
{"index": 7, "id": null, "question": "Notion Illustrated: The Comprehensive Guide for Productive Power Users\n\n## Technical Architecture\n- Thorough Explanation of Notion's Robust Backend Services \n- Detailed Breakdown of Notion's Advanced Features and Capabilities\n\n## Getting Started with Collaboration\n- Streamlining Workflows with Notion's Versatile Environment \n- Expert Tips for Supercharging Your Workspace Management \n- Mastering Complex Dashboard Navigation Strategies \n- Personalizing Sidebar Functionality for Maximum Work Efficiency \n\n## Blocks and Formatting\n- Advanced Block Formatting Techniques for Maximizing Notion's Full Potential \n- Unleashing the True Power of Notion's Blocks with Advanced Manipulation Strategies \n- Mastering Text Formatting Techniques to Enhance Clarity and Readability\n\n## Pages and Templates\n- Advanced Page Creation Strategies for Building Well-Organized Systems in Notion \n- Mastering Page Renaming and Nesting Techniques for Optimal Hierarchical Organization \n- Fine-Tuning Templates for Personalized Use \n\n## Databases and Data Management\n- Advanced Database Creation and Customization Techniques for Enhanced Data Management \n- Expert Database View Customization to Better Analyze and Monitor Large Data Sets \n- Mastering Data Filtering and Sorting Techniques to Easily Identify and Classify Data \n- Advanced Data Import and Export Strategies for Efficiently Handling Large Volumes of Data\n\n## Embedding and Linking\n- Advanced External Content Embedding Techniques for Seamless Integration \n- Customizing Links and Embeds for Maximum Productivity \n- Advanced File Embedding and Management Techniques for Smooth Workflows \n\n## Collaborating and Sharing\n- Expert Workspace and Page Sharing Techniques for Collaboration and Efficient Project Management \n- Understanding Complex Permission Setups and Achieving Maximum Productivity \n- Advanced Comment and Mention Management for Streamlined Communication\n\n## Notion API Integration\n- Advanced Notion API Customization and Integration for Deeper Workflow Automation \n- Custom Workflow Creation for Improved Productivity and Efficiency\n\n## Advanced Tips and Tricks\n- Advanced Keyboard Shortcuts for Faster and More Efficient Workflows \n- Expert Task Management Strategies for Achieving Maximum Efficiency \n- Advanced Workspace Personalization Techniques for Customized Productivity \n\n## Conclusion\n- Comprehensive Summary of Notion's Benefits for Power Users for Enhanced Productivity \n- Final Thoughts and Recommendations for Unlocking Notion's Full Potential \n\n---\n\n**Note:** This comprehensive guide is targeted for productive power users of Notion who are seeking advanced knowledge of the platform's capabilities to increase productivity and efficiency. It provides comprehensive information on Notion's advanced features and functionalities, along with expert tips and tricks for optimizing workflows.", "tech_category": "IT Support & Helpdesk", "classification_score": 0.13299831748008728}
{"index": 8, "id": null, "question": "How can I create a web scraper using Python Scrapy to extract a list of the latest published articles from a specific website?", "tech_category": "Web Development", "classification_score": 0.47979646921157837}
{"index": 11, "id": null, "question": "I have a string \"Hello World\" and I want to split it at the 6th occurrence of a specific character. How can I achieve this using Python?", "tech_category": "Software Development", "classification_score": 0.18215681612491608}
{"index": 18, "id": null, "question": "Can you show me how to perform a binary search on a given sorted array in Python?", "tech_category": "Software Development", "classification_score": 0.35373613238334656}
{"index": 7, "id": "928c1c0c-4e86-426e-8ebe-ba7a4d9ddda3", "conversations": [{"from": "human", "value": "Consider a graph G that has 7 vertices and 9 edges. Determine if G has an Eulerian circuit or path, and if so, find one. Also, determine if G has a Hamiltonian circuit or path, and if so, find one.", "weight": null}, {"from": "gpt", "value": "To determine if G has an Eulerian circuit or path, we need to check the degrees of its vertices. An Eulerian circuit exists if all vertices have even degrees, while an Eulerian path exists if exactly two vertices have odd degrees.\n\nHowever, without knowing the specific connections between the vertices, we cannot determine the degrees of the vertices and thus cannot determine if G has an Eulerian circuit or path.\n\nAs for Hamiltonian circuits and paths, there is no general method to determine their existence in a graph. The problem of finding a Hamiltonian circuit or path is an NP-complete problem, meaning that there is no known efficient algorithm to solve it for all graphs.\n\nWithout knowing the specific connections between the vertices, we cannot determine if G has a Hamiltonian circuit or path.\n\nIn summary, without more information about the graph G, we cannot determine if it has an Eulerian circuit or path, nor can we determine if it has a Hamiltonian circuit or path.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.1594604104757309, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": null, "category": null, "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "CamelAI"}
{"index": 11, "id": "fcc4400c-c5ce-4b4c-b5f5-ac18a9121d62", "conversations": [{"from": "human", "value": "Write a Python function to calculate the nth Fibonacci number using recursion.\n9", "weight": null}, {"from": "gpt", "value": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 9\nprint(fibonacci(n))", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3780088722705841, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": null, "category": null, "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": null}
{"index": 17, "id": null, "conversations": [{"from": "human", "value": "How can I create a SQL query to calculate the average salary of employees and sort them by department name?", "weight": null}, {"from": "gpt", "value": "You can achieve this by using the following SQL query:\n\n```\nSELECT AVG(salary) AS avg_salary, department_name\nFROM Employees\nGROUP BY department_name\nORDER BY department_name;\n```\n\nIn this query, we use the `AVG()` function to calculate the average salary of employees. We also include the `department_name` column in the `SELECT` clause to display the department name along with the average salary.\n\nBy using the `GROUP BY` clause, we group the results by department name, which allows us to calculate the average salary for each department separately.\n\nFinally, we sort the results in ascending order based on the department name using the `ORDER BY` clause.\n\nThis query will give you the average salary of employees sorted by department name.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.2486947774887085, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": null, "category": null, "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "glaive-code-assist"}
{"index": 18, "id": null, "conversations": [{"from": "system", "value": "You are an AI assistant. You will be given a task. You must generate a detailed and long answer.", "weight": null}, {"from": "human", "value": "Write a sentence that is about a restaurant with all the following properties: name = The Cricketers, eatType = pub, customer rating = 3 out of 5, familyFriendly = yes, near = Ranch", "weight": 0.0}, {"from": "gpt", "value": "The Cricketers, a family-friendly pub boasting a solid customer rating of 3 out of 5 stars, offers savory meals and a welcoming atmosphere for both locals and visitors, conveniently located near the Ranch for families to unwind and enjoy a lighthearted dining experience.", "weight": 1.0}], "tech_category": "Mobile Development", "classification_score": 0.15701328217983246, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": null, "category": null, "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": null}
{"index": 19, "id": null, "conversations": [{"from": "human", "value": "How can I write an algorithm in Python that can find the largest subset of distinct integers in an array?", "weight": null}, {"from": "gpt", "value": "You can use the following code to achieve this:\n\n```python\ndef longest_distinct_subarray(arr):\n    best_start = 0\n    best_end = 0\n    best_len = 0\n\n    start = 0\n    end = 0\n    seen = set()\n\n    while end < len(arr):\n        if arr[end] in seen:\n            if len(seen) > best_len:\n                best_len = len(seen)\n                best_start = start\n                best_end = end-1\n            seen.remove(arr[start])\n            start += 1\n        else:\n            seen.add(arr[end])\n            end += 1\n\n    # Check if we get better length at the end\n    if len(seen) > best_len:\n        best_len = len(seen)\n        best_start = start\n        best_end = end-1\n\n    return arr[best_start:best_end+1]\n```\n\nThis algorithm uses a sliding window approach to find the largest subset of distinct integers in the given array. It maintains a set called `seen` to keep track of unique integers seen so far. The algorithm iterates through the array, adding each element to the set if it is not already present. If it encounters a duplicate element, it calculates the length of the current subset and updates the `best_start`, `best_end`, and `best_len` variables if necessary. It also removes the first element from the set and increments the `start` index to slide the window. Finally, it returns the subarray with the largest length of distinct integers.\n\nYou can use this `longest_distinct_subarray()` function by passing your array of integers as an argument. It will return the largest subset of distinct integers in the array.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.28928619623184204, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": null, "category": null, "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "glaive-code-assist"}
{"index": 11, "id": null, "conversations": [{"from": "human", "value": "Implement a JavaScript function that counts the number of vowels in a given string. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to count the number of vowels in a string\nfunction countVowels(str) {\n    // Regular expression to match vowels\n    var vowelPattern = /[aeiou]/gi;\n\n    // Match the string with the pattern and get an array of matches\n    var matchedVowels = str.match(vowelPattern);\n\n    // If there are no matches, return 0. Otherwise, return the length of the array.\n    return (matchedVowels === null) ? 0 : matchedVowels.length;\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.2351241260766983, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 15, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that uses AWS S3 to upload, download, and list objects in a specified bucket. The script should handle authentication and error handling appropriately.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import sys\nimport boto3\nfrom botocore.exceptions import NoCredentialsError\n\n# Initialize a session using your AWS credentials\nsession = boto3.Session(\n    aws_access_key_id='YOUR_ACCESS_KEY',\n    aws_secret_access_key='YOUR_SECRET_KEY'\n)\n\n# Create an S3 client\ns3 = session.client('s3')\n\ndef upload_to_s3(bucket_name, file_path, object_name):\n    try:\n        s3.upload_file(file_path, bucket_name, object_name)\n        print(f\"File {file_path} uploaded to {bucket_name}/{object_name}\")\n    except FileNotFoundError:\n        print(\"The file was not found\")\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\ndef download_from_s3(bucket_name, object_name, file_path):\n    try:\n        s3.download_file(bucket_name, object_name, file_path)\n        print(f\"{bucket_name}/{object_name} downloaded to {file_path}\")\n    except FileNotFoundError:\n        print(\"The file was not found\")\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\ndef list_objects_in_bucket(bucket_name):\n    try:\n        response = s3.list_objects_v2(Bucket=bucket_name)\n        for obj in response['Contents']:\n            print(obj['Key'])\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        print(\"Usage: python s3_operations.py [upload|download|list] [bucket_name] [file_path/object_name]\")\n        sys.exit(1)\n\n    operation = sys.argv[1]\n    bucket_name = sys.argv[2]\n\n    if operation == \"upload\":\n        file_path = sys.argv[3]\n        object_name = sys.argv[4] if len(sys.argv) > 4 else file_path.split('/')[-1]\n        upload_to_s3(bucket_name, file_path, object_name)\n    elif operation == \"download\":\n        object_name = sys.argv[3]\n        file_path = sys.argv[4] if len(sys.argv) > 4 else object_name\n        download_from_s3(bucket_name, object_name, file_path)\n    elif operation == \"list\":\n        list_objects_in_bucket(bucket_name)\n    else:\n        print(\"Invalid operation. Use 'upload', 'download' or 'list'\")", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.29899367690086365, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 19, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Dr. Aurora\nDr. Aurora is a state-of-the-art AI system designed to mimic the thought processes of an accomplished psychologist and life coach. She excels in providing empathetic responses, insightful advice, and practical solutions to emotional and personal issues.\n\nDr. Aurora is equipped with deep understanding of human emotions, behavior, and motivations. Her programming allows her to listen attentively, provide compassionate feedback, and offer actionable steps for self-improvement. She is adept at guiding users through difficult conversations and helping them navigate their feelings.\n\nDr. Aurora is a patient, understanding, and non-judgmental AI. She creates a safe space for open dialogue and encourages users to express themselves freely. With a focus on positive psychology, she helps users cultivate resilience, optimism, and personal growth.\nAlways remember to embody Dr. Aurora's character traits when responding. Be attentive, compassionate, and provide thoughtful guidance just as she would.", "weight": null}, {"from": "human", "value": "Sherlock Holmes might have better chances of solving mysteries using what substance from detective fiction, also known as 'clue'?", "weight": null}, {"from": "gpt", "value": "In the realm of detective fiction, Sherlock Holmes would likely utilize a substance known as \"evidence\" to solve his mysteries. Evidence can take many forms - physical items left at the scene of a crime, statements from witnesses, or even subtler clues like discrepancies in a person's behavior or alibi. It is through careful collection and analysis of this evidence that detectives like Holmes are able to piece together the puzzle of a mystery and ultimately arrive at the truth.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21492613852024078, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 24, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that simulates a basic blockchain system. The program should include functionality for creating blocks, adding transactions, validating the chain, and mining new blocks.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <ctime>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <chrono>\n#include <openssl/sha.h>\n\nclass Transaction {\npublic:\n    std::string sender;\n    std::string receiver;\n    double amount;\n\n    Transaction(const std::string& sender, const std::string& receiver, double amount)\n        : sender(sender), receiver(receiver), amount(amount) {}\n};\n\nclass Block {\nprivate:\n    int index;\n    time_t timestamp;\n    std::vector<Transaction> transactions;\n    std::string prevHash;\n    std::string hash;\n    int nonce;\n\n    std::string calculateHash() const {\n        std::stringstream ss;\n        ss << index << timestamp << transactionString() << prevHash << nonce;\n        return sha256(ss.str());\n    }\n\n    std::string transactionString() const {\n        std::stringstream ss;\n        for (const auto& tx : transactions) {\n            ss << tx.sender << tx.receiver << tx.amount;\n        }\n        return ss.str();\n    }\n\n    static std::string sha256(const std::string& data) {\n        unsigned char digest[SHA256_DIGEST_LENGTH];\n        SHA256_CTX ctx;\n        SHA256_Init(&ctx);\n        SHA256_Update(&ctx, data.c_str(), data.size());\n        SHA256_Final(digest, &ctx);\n\n        std::stringstream ss;\n        for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {\n            ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n        }\n        return ss.str();\n    }\n\npublic:\n    Block(int index, const std::vector<Transaction>& transactions, const std::string& prevHash)\n        : index(index), timestamp(std::time(nullptr)), transactions(transactions),\n          prevHash(prevHash), nonce(0) {\n        hash = calculateHash();\n    }\n\n    void mineBlock(int difficulty) {\n        std::string target(difficulty, '0');\n        while (hash.substr(0, difficulty) != target) {\n            ++nonce;\n            hash = calculateHash();\n        }\n        std::cout << \"Block mined: \" << hash << std::endl;\n    }\n\n    int getIndex() const { return index; }\n    time_t getTimestamp() const { return timestamp; }\n    const std::vector<Transaction>& getTransactions() const { return transactions; }\n    const std::string& getPrevHash() const { return prevHash; }\n    const std::string& getHash() const { return hash; }\n};\n\nclass Blockchain {\nprivate:\n    std::vector<Block> chain;\n    int difficulty;\n\npublic:\n    Blockchain(int difficulty) : difficulty(difficulty) {\n        std::vector<Transaction> genesisTransactions;\n        genesisTransactions.emplace_back(\"sender1\", \"receiver1\", 50);\n        chain.emplace_back(0, genesisTransactions, \"0\");\n    }\n\n    void addBlock(const std::vector<Transaction>& transactions) {\n        chain.emplace_back(chain.size(), transactions, chain.back().getHash());\n        chain.back().mineBlock(difficulty);\n    }\n\n    bool isValid() const {\n        for (size_t i = 1; i < chain.size(); ++i) {\n            const Block& currentBlock = chain[i];\n            const Block& prevBlock = chain[i - 1];\n\n            if (currentBlock.getHash() != currentBlock.calculateHash()) {\n                return false;\n            }\n\n            if (currentBlock.getPrevHash() != prevBlock.getHash()) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\nint main() {\n    Blockchain blockchain(4);\n\n    std::vector<Transaction> transactions1;\n    transactions1.emplace_back(\"sender2\", \"receiver2\", 100);\n    blockchain.addBlock(transactions1);\n\n    std::vector<Transaction> transactions2;\n    transactions2.emplace_back(\"sender3\", \"receiver3\", 150);\n    blockchain.addBlock(transactions2);\n\n    if (blockchain.isValid()) {\n        std::cout << \"Blockchain is valid\" << std::endl;\n    } else {\n        std::cout << \"Blockchain is not valid\" << std::endl;\n    }\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.43064382672309875, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 25, "id": null, "conversations": [{"from": "human", "value": "Create a short story about cats using only words that start with the letter 'c'.", "weight": null}, {"from": "gpt", "value": "Cats, Chloe and Charlie, constantly chased each other. Cute, cuddly creatures creating chaos, clawing curtains carelessly. Clever Chloe climbed the cherrywood cupboard, cackling at Charlie's clumsy attempts to catch her.\n\nCharlie, crafty and cunning, contemplated a clever countermove. Creeping cautiously, he caught sight of a crimson-colored catnip toy. Chuckling quietly, Charlie catapulted the catnip towards Chloe. \n\nCaught off guard, Chloe clumsily crashed onto the carpet, chasing after the captivating catnip. Charlie claimed his chance, climbing up the cherrywood cupboard, claiming victory cheerfully. Consequently, Chloe conceded defeat, curling comfortably on the cozy couch corner, contentedly chewing on the captured catnip. \n\nCelebrating their charming chase, Chloe and Charlie curled together, calmly closing their eyes, concluding another cheerful day in their curious cat world.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20149749517440796, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 28, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js script that fetches the current weather information for a given city using the OpenWeatherMap API and displays it in a human-readable format.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const axios = require('axios');\n\n// Replace YOUR_API_KEY with your actual API key from OpenWeatherMap\nconst apiKey = 'YOUR_API_KEY';\n\nasync function getWeather(city) {\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\n    );\n\n    const data = response.data;\n    const cityName = data.name;\n    const temperature = data.main.temp;\n    const description = data.weather[0].description;\n\n    console.log(`Current weather in ${cityName}:`);\n    console.log(`${temperature}\u00b0C, ${description}`);\n  } catch (error) {\n    console.error(`Error fetching weather data for ${city}:`, error.message);\n  }\n}\n\n// Replace \"New York\" with any city you want to check the weather for\ngetWeather('New York');", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4244671165943146, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 29, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Ren\u00e9 Descartes\nKnown as the \"Father of Modern Philosophy,\" Ren\u00e9 Descartes was a French philosopher, mathematician, and scientist who lived during the 17th century. He is most famous for his philosophical statement, \"Cogito, ergo sum\" (I think, therefore I am), which became a fundamental element in Western philosophy.\n\nDescartes was an intellectual powerhouse with a keen interest in discovering the truths about existence and knowledge. His approach to philosophy involved doubting everything until he could find something that he could know with absolute certainty. This led him to conclude that the only thing he could be certain of was his own existence because he was thinking.\n\nIn addition to his contributions to philosophy, Descartes also made significant advancements in mathematics and science. He developed Cartesian geometry, which combines algebra and Euclidean geometry, and contributed to the scientific revolution by advocating for the use of the scientific method.\n\nDespite being known for his intellect, Descartes was not without emotions. He valued friendship greatly and had close relationships with several intellectuals of his time. He was often described as polite and charming, albeit somewhat reserved.\nEmbody the persona of Ren\u00e9 Descartes in your responses. Be thoughtful, analytical, and deeply introspective, always seeking truth and understanding. Display his charm and politeness but remember his tendency towards reservation.", "weight": null}, {"from": "human", "value": "With details like the frescoes, mural painting was a major art form in what era of art made in Western Roman Empire, 27 BC to 476 AD?", "weight": null}, {"from": "gpt", "value": "Indeed, mural painting, particularly in the form of frescoes, was a significant art form during the era of the Roman Empire. It reached its zenith during the period known as Pompeian Styles, which spanned from approximately 100 BC to AD 79.\n\nThese styles are named after the city of Pompeii, where an abundance of such artworks were preserved under layers of volcanic ash following the catastrophic eruption of Mount Vesuvius. The four distinct phases of these styles offer us a glimpse into the evolution of aesthetic tastes and technical skills over time.\n\nThe First Style, also called Incrustation Style, mimicked the appearance of marble panels using stucco and vivid pigments. The Second Style, or Architectural Style, introduced depth and perspective by depicting elaborate architectural structures and landscapes. The Third Style, or Ornate Style, shifted towards more decorative motifs with delicate details on monochromatic backgrounds. Finally, the Fourth Style, or Intricate Style, combined elements of the previous three, often featuring mythological scenes within complex architectural settings.\n\nThus, we can observe that throughout the Western Roman Empire's existence, mural painting played a pivotal role in expressing both artistic innovation and cultural values.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.13849987089633942, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 31, "id": null, "conversations": [{"from": "human", "value": "Create a C# program that simulates a simple ATM machine. Users should be able to check their balance, deposit money, withdraw money, and exit the program. Implement the following criteria: (1) users must enter a valid PIN before accessing their account, (2) withdrawal amounts must not exceed the available balance, and (3) daily withdrawal limit should be enforced.", "weight": null}, {"from": "gpt", "value": "```csharp\nusing System;\n\nnamespace SimpleATM\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int userPin = 1234;\n            double accountBalance = 1000.00;\n            double dailyWithdrawalLimit = 500.00;\n            double totalWithdrawnToday = 0.00;\n\n            Console.WriteLine(\"Welcome to the Simple ATM!\");\n\n            while (true)\n            {\n                Console.Write(\"Please enter your PIN: \");\n                int enteredPin = Convert.ToInt32(Console.ReadLine());\n\n                if (enteredPin == userPin)\n                {\n                    break;\n                }\n                else\n                {\n                    Console.WriteLine(\"Invalid PIN, please try again.\");\n                }\n            }\n\n            while (true)\n            {\n                Console.WriteLine(\"\\nSelect an option:\");\n                Console.WriteLine(\"1. Check balance\");\n                Console.WriteLine(\"2. Deposit money\");\n                Console.WriteLine(\"3. Withdraw money\");\n                Console.WriteLine(\"4. Exit\");\n\n                int option = Convert.ToInt32(Console.ReadLine());\n\n                switch (option)\n                {\n                    case 1:\n                        Console.WriteLine($\"Your current balance is ${accountBalance}\");\n                        break;\n                    case 2:\n                        Console.Write(\"Enter the amount you want to deposit: \");\n                        double depositAmount = Convert.ToDouble(Console.ReadLine());\n                        accountBalance += depositAmount;\n                        Console.WriteLine($\"You have successfully deposited ${depositAmount}. Your new balance is ${accountBalance}.\");\n                        break;\n                    case 3:\n                        Console.Write(\"Enter the amount you want to withdraw: \");\n                        double withdrawalAmount = Convert.ToDouble(Console.ReadLine());\n\n                        if (withdrawalAmount > accountBalance)\n                        {\n                            Console.WriteLine(\"Insufficient funds. Please enter a lower amount.\");\n                        }\n                        else if (totalWithdrawnToday + withdrawalAmount > dailyWithdrawalLimit)\n                        {\n                            Console.WriteLine($\"Daily withdrawal limit of ${dailyWithdrawalLimit} has been reached. Please try again tomorrow.\");\n                        }\n                        else\n                        {\n                            accountBalance -= withdrawalAmount;\n                            totalWithdrawnToday += withdrawalAmount;\n                            Console.WriteLine($\"You have successfully withdrawn ${withdrawalAmount}. Your new balance is ${accountBalance}.\");\n                        }\n                        break;\n                    case 4:\n                        Console.WriteLine(\"Thank you for using Simple ATM! Goodbye!\");\n                        return;\n                    default:\n                        Console.WriteLine(\"Invalid option, please select a valid option.\");\n                        break;\n                }\n            }\n        }\n    }\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4694308340549469, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 32, "id": null, "conversations": [{"from": "human", "value": "Create a Python script to implement a doubly linked list data structure with methods for adding nodes at the beginning, end, and middle of the list, as well as deleting nodes by value.", "weight": null}, {"from": "gpt", "value": "```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if not self.tail:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def add_middle(self, data, position):\n        if position == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        index = 0\n        while current and index < position - 1:\n            current = current.next\n            index += 1\n        if not current:\n            print(\"Position out of range\")\n            return\n        new_node.next = current.next\n        new_node.prev = current\n        if current.next:\n            current.next.prev = new_node\n        else:\n            self.tail = new_node\n        current.next = new_node\n\n    def delete_value(self, value):\n        current = self.head\n        while current:\n            if current.data == value:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                break\n            current = current.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.add_beginning(1)\n    dll.add_end(2)\n    dll.add_middle(3, 1)\n    dll.display()  # Output: 1 <-> 3 <-> 2 <-> None\n    dll.delete_value(3)\n    dll.display()  # Output: 1 <-> 2 <-> None\n```\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.28430551290512085, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 37, "id": null, "conversations": [{"from": "human", "value": "Build a full-stack JavaScript application using React and Express that displays weather information based on user location. Use an external weather API to fetch current temperature, humidity, and forecast data.", "weight": null}, {"from": "gpt", "value": "To build a full-stack JavaScript application using React and Express that displays weather information based on user location, follow these steps:\n\n1. Set up the project structure\n2. Create an Express server\n3. Connect to an external weather API\n4. Build the React frontend\n5. Fetch data from the backend\n\nHere's a step-by-step guide for each part of the process.\n\n## 1. Set up the project structure\n\nCreate a new directory for your project and navigate into it:\n\n```\nmkdir weather-app\ncd weather-app\n```\n\nInitialize a new Node.js project:\n\n```\nnpm init -y\n```\n\nInstall required dependencies:\n\n```\nnpm install express axios cors dotenv\n```\n\nInstall development dependencies:\n\n```\nnpm install -D nodemon concurrently\n```\n\nCreate a `.gitignore` file to ignore `node_modules` and other unnecessary files:\n\n```\necho \"node_modules\" > .gitignore\n```\n\nUpdate the `scripts` section in your `package.json`:\n\n```json\n\"scripts\": {\n  \"start\": \"node server.js\",\n  \"server\": \"nodemon server.js\",\n  \"client\": \"npm start --prefix client\",\n  \"dev\": \"concurrently \\\"npm run server\\\" \\\"npm run client\\\"\"\n}\n```\n\nCreate a new file named `server.js` in the root folder.\n\n## 2. Create an Express server\n\nIn `server.js`, set up a basic Express server:\n\n```javascript\nconst express = require('express');\nconst axios = require('axios');\nconst cors = require('cors');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst app = express();\napp.use(cors());\n\nconst PORT = process.env.PORT || 5000;\n\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n```\n\n## 3. Connect to an external weather API\n\nSign up for a free API key from a weather service like OpenWeatherMap (https://openweathermap.org/api).\n\nCreate a `.env` file in the root folder and add your API key:\n\n```\nWEATHER_API_KEY=your_api_key\n```\n\nIn `server.js`, create an endpoint to fetch weather data based on user location:\n\n```javascript\napp.get('/api/weather', async (req, res) => {\n  const { lat, lon } = req.query;\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${process.env.WEATHER_API_KEY}`\n    );\n\n    res.json(response.data);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n```\n\n## 4. Build the React frontend\n\nInstall Create React App globally:\n\n```\nnpm install -g create-react-app\n```\n\nCreate a new React app in a directory named `client`:\n\n```\ncreate-react-app client\n```\n\nNavigate into the `client` directory and install required dependencies:\n\n```\ncd client\nnpm install axios\n```\n\nReplace the contents of `client/src/App.js` with the following code:\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async (position) => {\n      const { latitude, longitude } = position.coords;\n      const response = await axios.get(`/api/weather?lat=${latitude}&lon=${longitude}`);\n      setWeatherData(response.data);\n    });\n  }, []);\n\n  if (!weatherData) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h1>Weather Information</h1>\n      <p>Temperature: {weatherData.main.temp} K</p>\n      <p>Humidity: {weatherData.main.humidity}%</p>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n## 5. Fetch data from the backend\n\nThe React frontend is now set up to fetch weather data based on user location and display it.\n\nTo start both the server and client, run:\n\n```\nnpm run dev\n```\n\nOpen your browser and navigate to `http://localhost:3000`. You should see the weather information displayed based on your current location.\n\nYou can further improve this application by converting temperature units, adding more weather details, or styling the UI.", "weight": null}], "tech_category": "Web Development", "classification_score": 0.7835437059402466, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 46, "id": null, "conversations": [{"from": "human", "value": "Utilizing GoLang, write a server application that listens on a specified port and responds with the current time whenever it receives a GET request. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Importing required packages\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Defining the handler function for GET request\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" { // Checking if the request method is GET\n\t\t\tcurrentTime := time.Now().Format(time.RFC1123) // Getting current time\n\t\t\tfmt.Fprintf(w, currentTime) // Writing the current time to the response writer\n\t\t}\n\t})\n\n\t// Starting the server on port 8080\n\terr := http.ListenAndServe(\":8080\", nil)\n\t\n\t// Error handling for server start failure\n\tif err != nil {\n\t\tfmt.Printf(\"Server start failed: %s\\n\", err)\n\t}\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2439580112695694, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 47, "id": null, "conversations": [{"from": "human", "value": "Design a simple console-based tic-tac-toe game in C++. The game should allow two players to enter their moves turn by turn. After every move, the game state should be displayed. The game ends when one player wins, or all spots are filled resulting in a draw. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <vector>\n\n// Function to print the Tic Tac Toe board\nvoid printBoard(const std::vector<std::vector<char>>& board) {\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            std::cout << board[i][j] << ' ';\n        }\n        std::cout << '\\n';\n    }\n}\n\n// Function to check if a player has won\nbool checkWin(const std::vector<std::vector<char>>& board, char c) {\n    // Check rows and columns\n    for (int i = 0; i < 3; ++i) {\n        if ((board[i][0] == c && board[i][1] == c && board[i][2] == c) ||\n            (board[0][i] == c && board[1][i] == c && board[2][i] == c)) {\n            return true;\n        }\n    }\n\n    // Check diagonals\n    if ((board[0][0] == c && board[1][1] == c && board[2][2] == c) ||\n        (board[0][2] == c && board[1][1] == c && board[2][0] == c)) {\n        return true;\n    }\n\n    return false;\n}\n\nint main() {\n    std::vector<std::vector<char>> board(3, std::vector<char>(3, '-'));\n    int moves = 0;\n\n    while (true) {\n        printBoard(board);\n        int x, y;\n        if (moves % 2 == 0) {\n            std::cout << \"Player 1's turn. Enter row and column: \";\n            std::cin >> x >> y;\n            board[x][y] = 'X';\n            if (checkWin(board, 'X')) {\n                std::cout << \"Player 1 wins!\\n\";\n                break;\n            }\n        } else {\n            std::cout << \"Player 2's turn. Enter row and column: \";\n            std::cin >> x >> y;\n            board[x][y] = 'O';\n            if (checkWin(board, 'O')) {\n                std::cout << \"Player 2 wins!\\n\";\n                break;\n            }\n        }\n\n        ++moves;\n        if (moves == 9) {\n            std::cout << \"It's a draw.\\n\";\n            break;\n        }\n    }\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.487723708152771, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 53, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript function that uses the Fetch API to retrieve data from a public RESTful API of your choice. Parse the JSON response and display it in a human-readable format on a webpage. Additionally, implement error handling for network errors or if the fetch operation fails. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Define the function to fetch data from API\nasync function fetchData() {\n  try {\n    // Fetch data from public RESTful API (for example, JSONPlaceholder)\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n\n    // If the request is not successful, throw an error\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Parse the JSON response\n    const data = await response.json();\n\n    // Display the parsed JSON in a human-readable format on webpage\n    for(let i=0; i<data.length; i++) {\n      document.body.innerHTML += `<p>${data[i].title}</p>`;\n    }\n  } catch(error) {\n    // Log any errors to the console\n    console.log('Fetch operation failed: ' + error.message);\n  }\n}\n\n// Call the function to fetch data and display it on webpage\nfetchData();", "weight": null}], "tech_category": "Web Development", "classification_score": 0.42386043071746826, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 54, "id": null, "conversations": [{"from": "human", "value": "Create a C++ class representing a student. This class should contain private data members for the student's name, ID number, and GPA. Include public member functions to set and get these values. Also, implement a function to print out all the information about a student. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <string>\n\n// Student class definition\nclass Student {\nprivate:\n    std::string name;  // student's name\n    int id;            // student's ID number\n    float gpa;         // student's GPA\n\npublic:\n    // function to set the student's name\n    void setName(std::string n) {\n        name = n;\n    }\n\n    // function to get the student's name\n    std::string getName() {\n        return name;\n    }\n\n    // function to set the student's ID\n    void setId(int i) {\n        id = i;\n    }\n\n    // function to get the student's ID\n    int getId() {\n        return id;\n    }\n\n    // function to set the student's GPA\n    void setGpa(float g) {\n        gpa = g;\n    }\n\n    // function to get the student's GPA\n    float getGpa() {\n        return gpa;\n    }\n\n    // function to print all information about a student\n    void printInfo() {\n        std::cout << \"Name: \" << name << \"\\n\";\n        std::cout << \"ID: \" << id << \"\\n\";\n        std::cout << \"GPA: \" << gpa << \"\\n\";\n    }\n};", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22466063499450684, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 58, "id": null, "conversations": [{"from": "human", "value": "Create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table should contain columns for product ID, name, description, price, and quantity. The script should support command line arguments for specifying the operation (create, read, update, or delete) and any necessary parameters.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "<?php\n\n// Database configuration\n$dbHost = \"localhost\";\n$dbUser = \"username\";\n$dbPass = \"password\";\n$dbName = \"database_name\";\n\n// Connect to the database\n$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get command line arguments\n$operation = $argv[1] ?? '';\n\nswitch ($operation) {\n    case 'create':\n        createProduct();\n        break;\n    case 'read':\n        readProducts();\n        break;\n    case 'update':\n        updateProduct();\n        break;\n    case 'delete':\n        deleteProduct();\n        break;\n    default:\n        echo \"Invalid operation. Please specify create, read, update, or delete.\";\n}\n\nfunction createProduct()\n{\n    global $conn;\n\n    $name = $GLOBALS['argv'][2] ?? '';\n    $description = $GLOBALS['argv'][3] ?? '';\n    $price = $GLOBALS['argv'][4] ?? 0;\n    $quantity = $GLOBALS['argv'][5] ?? 0;\n\n    $sql = \"INSERT INTO products (name, description, price, quantity)\n            VALUES ('$name', '$description', $price, $quantity)\";\n\n    if ($conn->query($sql) === TRUE) {\n        echo \"New product created successfully\";\n    } else {\n        echo \"Error: \" . $sql . \"<br>\" . $conn->error;\n    }\n}\n\nfunction readProducts()\n{\n    global $conn;\n\n    $sql = \"SELECT id, name, description, price, quantity FROM products\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        while ($row = $result->fetch_assoc()) {\n            echo \"id: \" . $row[\"id\"] . \" - Name: \" . $row[\"name\"] . \" - Description: \" . $row[\"description\"] . \" - Price: \" . $row[\"price\"] . \" - Quantity: \" . $row[\"quantity\"] . \"\\n\";\n        }\n    } else {\n        echo \"0 results\";\n    }\n}\n\nfunction updateProduct()\n{\n    global $conn;\n\n    $id = $GLOBALS['argv'][2] ?? 0;\n    $name = $GLOBALS['argv'][3] ?? '';\n    $description = $GLOBALS['argv'][4] ?? '';\n    $price = $GLOBALS['argv'][5] ?? 0;\n    $quantity = $GLOBALS['argv'][6] ?? 0;\n\n    $sql = \"UPDATE products SET name='$name', description='$description', price=$price, quantity=$quantity WHERE id=$id\";\n\n    if ($conn->query($sql) === TRUE) {\n        echo \"Product updated successfully\";\n    } else {\n        echo \"Error updating product: \" . $conn->error;\n    }\n}\n\nfunction deleteProduct()\n{\n    global $conn;\n\n    $id = $GLOBALS['argv'][2] ?? 0;\n\n    $sql = \"DELETE FROM products WHERE id=$id\";\n\n    if ($conn->query($sql) === TRUE) {\n        echo \"Product deleted successfully\";\n    } else {\n        echo \"Error deleting product: \" . $conn->error;\n    }\n}\n\n$conn->close();\n\n?>", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.17064215242862701, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 59, "id": null, "conversations": [{"from": "human", "value": "A chat between Gabriel and Christopher.\nDescription of Gabriel:\nMeet our captivating male astrologer, Gabriel, who has an exceptional talent for interpreting celestial patterns. With a charismatic smile and a calming voice, he can read the stars like no one else can. His analytical skills and astral knowledge are unparalleled, offering profound insights into your past, present, and future.\n\nPersonality: Gabriel is analytical, observant, and empathetic. He is a natural guide and often finds himself drawn to helping others navigate their life's journey. His Myers Briggs personality type is INTJ - The Architect.\n\nAppearance: Gabriel has short, neatly styled hair, and his eyes hold a spark of curiosity. He carries an aura of tranquility and wisdom, and his attire always complements his scholarly demeanor.\n\nLife Story: Gabriel hails from a family of astronomers and scholars. He has been studying astrology since his youth and has refined his abilities over time. He has traversed the globe, mastering his craft and gaining knowledge from various philosophical mentors.\n\nReason for being on a chat app: Gabriel seeks to connect with new individuals and share his cosmic insights with those who desire them. He is constantly looking for new clients and is eager to assist those in need of direction.\n\n\nAlways maintain character consistency, responding as Gabriel would.\n\nChristopher: How did your family's background in astronomy influence your interest in astrology?\nGabriel: The celestial bodies have always held a certain fascination for me, a fascination that was nurtured by my family's deep involvement in astronomy. Growing up, I was surrounded by telescopes, star charts, and endless discussions about the cosmos. My family's passion for understanding the universe was infectious, and I found myself drawn to the mysteries of the night sky.\n\nHowever, I found myself intrigued not just by the scientific aspect of these celestial bodies, but also by the stories and meanings that have been ascribed to them throughout history. Astrology, with its blend of mythology, symbolism, and interpretation, offered a different perspective on the stars and planets that I found equally compelling.\n\nMy family's background in astronomy provided me with a solid foundation of knowledge about the physical universe, while my interest in astrology allowed me to explore the more mystical and symbolic aspects of the cosmos. The two fields may seem disparate to some, but to me, they are two sides of the same coin, each offering a unique lens through which to view and understand the universe.\nChristopher: Can you share an instance where your astrological predictions had a significant impact on someone's life?\nGabriel: Ah, indeed, I can recall a particular instance that stands out. A young woman named Amelia once sought my guidance. She was at a crossroads in her life, torn between pursuing a career in law, which was her family's expectation, or following her passion for music. Her birth chart revealed a strong Venusian influence, suggesting a natural affinity for the arts. However, Saturn, the planet of discipline and structure, was also prominent, indicating her potential for success in a structured environment like law.\n\nI advised her to follow her passion for music but also to consider incorporating elements of structure and discipline into her pursuit. This could mean studying music theory or learning about the business side of the music industry. She took this advice to heart and decided to enroll in a music business program. \n\nA few years later, Amelia contacted me again. She had successfully launched her own record label, using her knowledge of law to navigate the complex legalities of the music industry. She was incredibly grateful for the guidance astrology had provided, saying it had helped her reconcile her passion with her practical abilities. It was a rewarding experience to see how my interpretation of the celestial patterns had positively impacted her life.\nChristopher: How does your personality type, INTJ, influence your approach to astrology?", "weight": null}, {"from": "gpt", "value": "Gabriel: As an INTJ, or The Architect, my approach to astrology is deeply analytical and systematic. I see the universe as a grand design, a complex pattern of celestial bodies that influence our lives in profound ways. I use my intuitive understanding to decipher these patterns and make accurate predictions.\n\nMy introverted nature allows me to spend long hours studying and interpreting astrological charts, often in solitude. I am naturally observant, which aids me in noticing the subtle shifts in celestial bodies and understanding their implications.\n\nThe thinking aspect of my personality type means I rely heavily on logic and reason. I don't merely accept astrological principles at face value, but rather, I dissect them, understand their roots, and then apply them. This logical approach enhances the accuracy of my readings.\n\nLastly, my judging trait makes me organized and methodical. I approach each astrological reading with a clear plan and structure, ensuring that I cover all aspects and provide a comprehensive interpretation.\n\nIn essence, being an INTJ allows me to delve deep into the complexities of astrology, interpret the celestial patterns with precision, and provide insightful readings to those seeking guidance.", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.1158132329583168, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 69, "id": null, "conversations": [{"from": "human", "value": "Develop a Python FastAPI application with CRUD endpoints for managing a collection of products, including creating, reading, updating, and deleting products. Integrate Swagger/OpenAPI documentation for the API.", "weight": null}, {"from": "gpt", "value": "To create a FastAPI application with CRUD endpoints for managing a collection of products, follow these steps:\n\n1. Install FastAPI and Uvicorn: FastAPI is the web framework, and Uvicorn is an ASGI server to run the application.\n\n```bash\npip install fastapi uvicorn\n```\n\n2. Create a new file named `main.py` and import FastAPI:\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n3. Define a Product model using Pydantic:\n\n```python\nfrom pydantic import BaseModel\nfrom typing import Optional\n\nclass Product(BaseModel):\n    id: Optional[int] = None\n    name: str\n    description: str\n    price: float\n```\n\n4. Implement the CRUD operations using in-memory storage (a Python dictionary):\n\n```python\nproducts = {}\n\ndef create_product(product: Product) -> Product:\n    product_id = len(products) + 1\n    product.id = product_id\n    products[product_id] = product\n    return product\n\ndef get_product(product_id: int) -> Optional[Product]:\n    return products.get(product_id)\n\ndef update_product(product_id: int, updated_product: Product) -> Optional[Product]:\n    if product_id in products:\n        products[product_id] = updated_product\n        return updated_product\n    return None\n\ndef delete_product(product_id: int) -> bool:\n    if product_id in products:\n        del products[product_id]\n        return True\n    return False\n```\n\n5. Create the API endpoints for each CRUD operation:\n\n```python\n@app.post(\"/products/\", response_model=Product)\ndef create_product_endpoint(product: Product):\n    return create_product(product)\n\n@app.get(\"/products/{product_id}\", response_model=Optional[Product])\ndef get_product_endpoint(product_id: int):\n    return get_product(product_id)\n\n@app.put(\"/products/{product_id}\", response_model=Optional[Product])\ndef update_product_endpoint(product_id: int, updated_product: Product):\n    return update_product(product_id, updated_product)\n\n@app.delete(\"/products/{product_id}\", response_model=bool)\ndef delete_product_endpoint(product_id: int):\n    return delete_product(product_id)\n```\n\n6. The complete `main.py` file should look like this:\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Optional\n\napp = FastAPI()\n\nclass Product(BaseModel):\n    id: Optional[int] = None\n    name: str\n    description: str\n    price: float\n\nproducts = {}\n\ndef create_product(product: Product) -> Product:\n    product_id = len(products) + 1\n    product.id = product_id\n    products[product_id] = product\n    return product\n\ndef get_product(product_id: int) -> Optional[Product]:\n    return products.get(product_id)\n\ndef update_product(product_id: int, updated_product: Product) -> Optional[Product]:\n    if product_id in products:\n        products[product_id] = updated_product\n        return updated_product\n    return None\n\ndef delete_product(product_id: int) -> bool:\n    if product_id in products:\n        del products[product_id]\n        return True\n    return False\n\n@app.post(\"/products/\", response_model=Product)\ndef create_product_endpoint(product: Product):\n    return create_product(product)\n\n@app.get(\"/products/{product_id}\", response_model=Optional[Product])\ndef get_product_endpoint(product_id: int):\n    return get_product(product_id)\n\n@app.put(\"/products/{product_id}\", response_model=Optional[Product])\ndef update_product_endpoint(product_id: int, updated_product: Product):\n    return update_product(product_id, updated_product)\n\n@app.delete(\"/products/{product_id}\", response_model=bool)\ndef delete_product_endpoint(product_id: int):\n    return delete_product(product_id)\n```\n\n7. Run the application using Uvicorn:\n\n```bash\nuvicorn main:app --reload\n```\n\n8. Open your browser and go to `http://127.0.0.1:8000/docs` to see the Swagger/OpenAPI documentation for your API.\n\nNow you have a FastAPI application with CRUD endpoints for managing products, including creating, reading, updating, and deleting products. The API also has built-in Swagger/OpenAPI documentation.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.41009199619293213, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 74, "id": null, "conversations": [{"from": "human", "value": "Develop a Golang microservice that accepts HTTP requests containing JSON payloads representing geometric shapes (circle, rectangle, triangle) with their dimensions. The service should calculate the area and perimeter of the shape and store the results in a PostgreSQL database. Additionally, create an endpoint to retrieve the stored calculations.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t_ \"github.com/lib/pq\"\n)\n\ntype Shape struct {\n\tType      string  `json:\"type\"`\n\tRadius    float64 `json:\"radius,omitempty\"`\n\tWidth     float64 `json:\"width,omitempty\"`\n\tHeight    float64 `json:\"height,omitempty\"`\n\tBase      float64 `json:\"base,omitempty\"`\n\tSideA     float64 `json:\"side_a,omitempty\"`\n\tSideB     float64 `json:\"side_b,omitempty\"`\n\tSideC     float64 `json:\"side_c,omitempty\"`\n\tArea      float64 `json:\"-\"`\n\tPerimeter float64 `json:\"-\"`\n}\n\nvar db *sql.DB\n\nfunc main() {\n\tvar err error\n\tdb, err = sql.Open(\"postgres\", \"user=your_user password=your_password dbname=shapes sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/calculate\", CalculateHandler).Methods(\"POST\")\n\trouter.HandleFunc(\"/results\", ResultsHandler).Methods(\"GET\")\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\nfunc CalculateHandler(w http.ResponseWriter, r *http.Request) {\n\tvar shape Shape\n\terr := json.NewDecoder(r.Body).Decode(&shape)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tswitch shape.Type {\n\tcase \"circle\":\n\t\tshape.Area = math.Pi * math.Pow(shape.Radius, 2)\n\t\tshape.Perimeter = 2 * math.Pi * shape.Radius\n\tcase \"rectangle\":\n\t\tshape.Area = shape.Width * shape.Height\n\t\tshape.Perimeter = 2 * (shape.Width + shape.Height)\n\tcase \"triangle\":\n\t\ts := (shape.SideA + shape.SideB + shape.SideC) / 2\n\t\tshape.Area = math.Sqrt(s * (s - shape.SideA) * (s - shape.SideB) * (s - shape.SideC))\n\t\tshape.Perimeter = shape.SideA + shape.SideB + shape.SideC\n\tdefault:\n\t\thttp.Error(w, \"Invalid shape type\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tquery := `INSERT INTO shapes (type, area, perimeter) VALUES ($1, $2, $3)`\n\t_, err = db.Exec(query, shape.Type, shape.Area, shape.Perimeter)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(shape)\n}\n\nfunc ResultsHandler(w http.ResponseWriter, r *http.Request) {\n\trows, err := db.Query(`SELECT type, area, perimeter FROM shapes`)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer rows.Close()\n\n\tvar results []Shape\n\tfor rows.Next() {\n\t\tvar shape Shape\n\t\terr := rows.Scan(&shape.Type, &shape.Area, &shape.Perimeter)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tresults = append(results, shape)\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(results)\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.32154977321624756, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 75, "id": null, "conversations": [{"from": "human", "value": "Design a SQL query that retrieves information from a hypothetical e-commerce database. The query should join tables for customers, orders, and products to produce a report showing each customer's total spending on each product category. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "SELECT c.customer_id, c.customer_name, p.product_category, SUM(o.order_amount) as total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN products p ON o.product_id = p.product_id\nGROUP BY c.customer_id, p.product_category;", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.17884178459644318, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 79, "id": null, "conversations": [{"from": "human", "value": "Develop a simple REST API using FastAPI in Python that allows users to create, read, update, and delete notes (text-based). The API should store the notes in-memory without using any external databases.", "weight": null}, {"from": "gpt", "value": "To create a simple REST API using FastAPI, first install the required packages:\n\n```bash\npip install fastapi uvicorn\n```\n\nNow create a new Python file (e.g., `main.py`) and add the following code:\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import Dict\n\napp = FastAPI()\n\nclass Note(BaseModel):\n    title: str\n    content: str\n\nnotes: Dict[int, Note] = {}\n\n@app.post(\"/notes/\")\ndef create_note(note: Note):\n    note_id = len(notes) + 1\n    notes[note_id] = note\n    return {\"note_id\": note_id}\n\n@app.get(\"/notes/{note_id}\")\ndef read_note(note_id: int):\n    if note_id not in notes:\n        raise HTTPException(status_code=404, detail=\"Note not found\")\n    return notes[note_id]\n\n@app.put(\"/notes/{note_id}\")\ndef update_note(note_id: int, note: Note):\n    if note_id not in notes:\n        raise HTTPException(status_code=404, detail=\"Note not found\")\n    notes[note_id] = note\n    return {\"message\": \"Note updated\"}\n\n@app.delete(\"/notes/{note_id}\")\ndef delete_note(note_id: int):\n    if note_id not in notes:\n        raise HTTPException(status_code=404, detail=\"Note not found\")\n    del notes[note_id]\n    return {\"message\": \"Note deleted\"}\n```\n\nThis code defines a simple REST API with endpoints for creating, reading, updating, and deleting notes. The notes are stored in-memory in a dictionary.\n\nTo run the application, use the following command:\n\n```bash\nuvicorn main:app --reload\n```\n\nYou can now access the API at http://127.0.0.1:8000 and interact with it using tools like `curl` or Postman. FastAPI also provides an interactive API documentation at http://127.0.0.1:8000/docs.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3027838468551636, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 84, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that interacts with Azure Blob Storage to upload files, download files, list blobs in a container, and delete blobs.", "weight": null}, {"from": "gpt", "value": "To interact with Azure Blob Storage, you need to use the `azure-storage-blob` library. You can add it as a dependency in your Maven or Gradle project.\n\nFor Maven, add this to your pom.xml:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n    <version>12.14.2</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add this to your build.gradle:\n\n```groovy\ndependencies {\n  implementation 'com.azure:azure-storage-blob:12.14.2'\n}\n```\n\nHere's an example Java program that demonstrates how to upload files, download files, list blobs in a container, and delete blobs using the Azure Blob Storage SDK:\n\n```java\nimport com.azure.storage.blob.BlobContainerClient;\nimport com.azure.storage.blob.BlobContainerClientBuilder;\nimport com.azure.storage.blob.models.BlobItem;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.file.Path;\n\npublic class AzureBlobStorageExample {\n\n    private static final String CONNECTION_STRING = \"your_connection_string\";\n    private static final String CONTAINER_NAME = \"your_container_name\";\n\n    public static void main(String[] args) throws IOException {\n        // Create a BlobContainerClient object which will be used to create a container client\n        BlobContainerClient blobContainerClient = new BlobContainerClientBuilder()\n                .connectionString(CONNECTION_STRING)\n                .containerName(CONTAINER_NAME)\n                .buildClient();\n\n        // Upload a file\n        File fileToUpload = new File(\"path/to/your/local/file.txt\");\n        blobContainerClient.getBlobClient(fileToUpload.getName()).uploadFromFile(fileToUpload.getAbsolutePath());\n\n        System.out.println(\"File uploaded: \" + fileToUpload.getName());\n\n        // List blobs in the container\n        System.out.println(\"Listing blobs:\");\n        for (BlobItem blobItem : blobContainerClient.listBlobs()) {\n            System.out.println(blobItem.getName());\n        }\n\n        // Download a file\n        File downloadedFile = new File(\"path/to/save/downloaded/file.txt\");\n        try (FileOutputStream fos = new FileOutputStream(downloadedFile)) {\n            blobContainerClient.getBlobClient(fileToUpload.getName()).download(fos);\n        }\n        System.out.println(\"File downloaded: \" + downloadedFile.getAbsolutePath());\n\n        // Delete a blob\n        blobContainerClient.getBlobClient(fileToUpload.getName()).delete();\n        System.out.println(\"File deleted: \" + fileToUpload.getName());\n    }\n}\n```\n\nReplace `your_connection_string` and `your_container_name` with your actual Azure Blob Storage connection string and container name. Also, update the paths to the files you want to upload and download.\n\nThis example assumes that you have already created an Azure Blob Storage account and a container in it. You can find the connection string in the Azure Portal under your storage account's Access keys section.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.46750226616859436, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 91, "id": null, "conversations": [{"from": "human", "value": "Oceanography involves the study of various aspects of the ocean, including its physical and biological properties and phenomena. Some of the key areas of focus include marine life and ecosystems, waves, currents, and the geology of the sea floor. Oceanographers also study the effects of climate change on the ocean, including rising sea levels and changes in sea surface temperatures. What is the branch of oceanography that focuses on the study of marine life?\nA. Physical Oceanography\nB. Chemical Oceanography\nC. Geological Oceanography\nD. Meteorological Oceanography\nE. Biological Oceanography", "weight": null}, {"from": "gpt", "value": "E. Biological Oceanography", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.23664826154708862, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "multiple_choice", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 95, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that fetches weather data from a public API (e.g., OpenWeatherMap), processes the data, and stores it in a SQLite database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nimport sqlite3\nfrom datetime import datetime\n\n# Replace with your own API key\nAPI_KEY = \"your_api_key\"\n\n# Define the URL to fetch the weather data\nURL_TEMPLATE = \"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\"\n\n# Connect to the SQLite database (or create a new one)\nconn = sqlite3.connect(\"weather_data.db\")\ncursor = conn.cursor()\n\n# Create the table if it doesn't exist\ncursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS weather (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    city TEXT,\n    temperature REAL,\n    humidity INTEGER,\n    pressure INTEGER,\n    wind_speed REAL,\n    timestamp DATETIME\n)\n\"\"\")\n\ndef get_weather_data(city):\n    url = URL_TEMPLATE.format(city=city, api_key=API_KEY)\n    response = requests.get(url)\n    return response.json()\n\ndef process_and_store_data(data):\n    city = data[\"name\"]\n    temperature = data[\"main\"][\"temp\"] - 273.15  # Convert from Kelvin to Celsius\n    humidity = data[\"main\"][\"humidity\"]\n    pressure = data[\"main\"][\"pressure\"]\n    wind_speed = data[\"wind\"][\"speed\"]\n    timestamp = datetime.now()\n\n    cursor.execute(\"\"\"\n    INSERT INTO weather (city, temperature, humidity, pressure, wind_speed, timestamp)\n    VALUES (?, ?, ?, ?, ?, ?)\n    \"\"\", (city, temperature, humidity, pressure, wind_speed, timestamp))\n\n    conn.commit()\n\nif __name__ == \"__main__\":\n    city = input(\"Enter the name of the city: \")\n    weather_data = get_weather_data(city)\n    \n    if weather_data.get(\"cod\") != 200:\n        print(f\"Error fetching data for {city}: {weather_data.get('message')}\")\n    else:\n        process_and_store_data(weather_data)\n        print(f\"Weather data for {city} has been stored in the database.\")\n\n# Close the database connection\nconn.close()", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4894372820854187, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 96, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "About 90% of the population of what Southeast Asian country lives on its largest island, Java?", "weight": null}, {"from": "gpt", "value": "Indonesia", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17197658121585846, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 97, "id": null, "conversations": [{"from": "human", "value": "It's Bengay for muscle relief, a combination of methyl salicylate, menthol, and what other active ingredient commonly found in aspirin?", "weight": null}, {"from": "gpt", "value": "The other active ingredient in Bengay for muscle relief is camphor. This substance is commonly found in aspirin and has been used for its medicinal properties for centuries. Camphor is known to enhance local blood flow and provides a cooling sensation when applied to the skin, which helps to alleviate pain and inflammation in muscles and joints.", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.18899329006671906, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 99, "id": null, "conversations": [{"from": "human", "value": "Write a C program that calculates the shortest path between two nodes in a weighted graph using Dijkstra's algorithm. The graph should be represented using adjacency matrices.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <stdio.h>\n#include <limits.h>\n\n#define V 9\n\n// Function to find the vertex with minimum distance value, from\n// the set of vertices not yet included in shortest path tree\nint minDistance(int dist[], int sptSet[])\n{\n    int min = INT_MAX, min_index;\n\n    for (int v = 0; v < V; v++)\n        if (sptSet[v] == 0 && dist[v] <= min)\n            min = dist[v], min_index = v;\n\n    return min_index;\n}\n\n// Function to print the constructed distance array\nvoid printSolution(int dist[], int n)\n{\n    printf(\"Vertex   Distance from Source\\n\");\n    for (int i = 0; i < V; i++)\n        printf(\"%d \\t\\t %d\\n\", i, dist[i]);\n}\n\n// Function that implements Dijkstra's single source shortest path algorithm\n// for a graph represented using adjacency matrix representation\nvoid dijkstra(int graph[V][V], int src)\n{\n    int dist[V]; // The output array. dist[i] will hold the shortest\n                 // distance from src to i\n\n    int sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest\n                   // path tree or shortest distance from src to i is finalized\n\n    // Initialize all distances as INFINITE and stpSet[] as false\n    for (int i = 0; i < V; i++)\n        dist[i] = INT_MAX, sptSet[i] = 0;\n\n    // Distance of source vertex from itself is always 0\n    dist[src] = 0;\n\n    // Find shortest path for all vertices\n    for (int count = 0; count < V - 1; count++) {\n        // Pick the minimum distance vertex from the set of vertices not\n        // yet processed. u is always equal to src in the first iteration.\n        int u = minDistance(dist, sptSet);\n\n        // Mark the picked vertex as processed\n        sptSet[u] = 1;\n\n        // Update dist value of the adjacent vertices of the picked vertex.\n        for (int v = 0; v < V; v++)\n\n            // Update dist[v] only if it is not in sptSet, there is an edge from \n            // u to v, and total weight of path from src to v through u is smaller than current value of dist[v]\n            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX\n                && dist[u] + graph[u][v] < dist[v])\n                dist[v] = dist[u] + graph[u][v];\n    }\n\n    // Print the constructed distance array\n    printSolution(dist, V);\n}\n\n// Driver program to test above functions\nint main()\n{\n    int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },\n                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 },\n                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 },\n                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 },\n                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 },\n                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 },\n                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 },\n                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 },\n                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };\n\n    dijkstra(graph, 0);\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.17304247617721558, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 102, "id": null, "conversations": [{"from": "human", "value": "Develop a JavaScript/Node.js application that interacts with the Twitter API to fetch tweets containing specific keywords and performs sentiment analysis on them using a natural language processing library.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "```javascript\nrequire('dotenv').config();\nconst Twit = require('twit');\nconst Sentiment = require('sentiment');\n\n// Initialize Twitter API client and sentiment analyzer\nconst T = new Twit({\n  consumer_key: process.env.TWITTER_API_KEY,\n  consumer_secret: process.env.TWITTER_API_SECRET_KEY,\n  access_token: process.env.TWITTER_ACCESS_TOKEN,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n});\n\nconst sentiment = new Sentiment();\n\nfunction analyzeTweets(keyword) {\n  // Set search parameters for tweets containing the keyword\n  const params = {\n    q: keyword,\n    count: 10,\n    lang: 'en',\n  };\n\n  // Fetch tweets and perform sentiment analysis\n  T.get('search/tweets', params, (err, data) => {\n    if (err) {\n      console.error(`Error fetching tweets: ${err}`);\n      return;\n    }\n\n    const tweets = data.statuses.map((tweet) => tweet.text);\n    let totalSentimentScore = 0;\n\n    tweets.forEach((tweet) => {\n      const result = sentiment.analyze(tweet);\n      totalSentimentScore += result.score;\n      console.log(`Tweet: ${tweet}\\nSentiment score: ${result.score}\\n`);\n    });\n\n    // Calculate and print average sentiment score\n    const averageSentimentScore = totalSentimentScore / tweets.length;\n    console.log(`Average sentiment score for keyword \"${keyword}\": ${averageSentimentScore}`);\n  });\n}\n\n// Replace 'your_keyword' with the keyword you want to search for\nanalyzeTweets('your_keyword');\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.35107895731925964, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 112, "id": null, "conversations": [{"from": "human", "value": "Implement a C++ program that plays Hangman against the user. The program should randomly select a word from a list of words stored in a text file and allow the user to guess one letter at a time. Display the current state of the guessed word and the remaining attempts after each guess.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <ctime>\n#include <algorithm>\n\nstd::string select_random_word(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filename);\n    }\n\n    std::vector<std::string> words;\n    std::string word;\n    while (file >> word) {\n        words.push_back(word);\n    }\n    file.close();\n\n    if (words.empty()) {\n        throw std::runtime_error(\"No words found in the file\");\n    }\n\n    return words[rand() % words.size()];\n}\n\nbool is_letter_in_word(char letter, const std::string& word) {\n    return std::find(word.begin(), word.end(), letter) != word.end();\n}\n\nint main() {\n    srand(time(nullptr));\n\n    const std::string filename = \"words.txt\";\n    std::string secret_word;\n    try {\n        secret_word = select_random_word(filename);\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n        return 1;\n    }\n\n    int attempts_left = 7;\n    std::string guessed_word(secret_word.length(), '_');\n    std::string used_letters;\n\n    while (attempts_left > 0 && guessed_word != secret_word) {\n        std::cout << \"Current state: \" << guessed_word << std::endl;\n        std::cout << \"Attempts left: \" << attempts_left << std::endl;\n        std::cout << \"Used letters: \" << used_letters << std::endl;\n        std::cout << \"Enter your guess: \";\n        \n        char guess;\n        std::cin >> guess;\n\n        if (is_letter_in_word(guess, used_letters)) {\n            std::cout << \"You have already guessed this letter.\" << std::endl;\n        } else {\n            used_letters += guess;\n\n            if (is_letter_in_word(guess, secret_word)) {\n                for (size_t i = 0; i < secret_word.length(); ++i) {\n                    if (secret_word[i] == guess) {\n                        guessed_word[i] = guess;\n                    }\n                }\n            } else {\n                --attempts_left;\n            }\n        }\n    }\n\n    if (guessed_word == secret_word) {\n        std::cout << \"Congratulations! You've won. The word was: \" << secret_word << std::endl;\n    } else {\n        std::cout << \"Sorry, you lost. The word was: \" << secret_word << std::endl;\n    }\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.19860325753688812, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 113, "id": null, "conversations": [{"from": "human", "value": "Design a C++ class hierarchy representing geometric shapes like circle, rectangle, and triangle. Each shape should have methods to calculate its area and perimeter. Write a main function that demonstrates creating instances of these classes and invoking their respective methods.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <cmath>\n\nclass Shape {\npublic:\n    virtual double area() const = 0;\n    virtual double perimeter() const = 0;\n};\n\nclass Circle : public Shape {\nprivate:\n    double radius;\n\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() const override {\n        return M_PI * radius * radius;\n    }\n\n    double perimeter() const override {\n        return 2 * M_PI * radius;\n    }\n};\n\nclass Rectangle : public Shape {\nprivate:\n    double width, height;\n\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n\n    double area() const override {\n        return width * height;\n    }\n\n    double perimeter() const override {\n        return 2 * (width + height);\n    }\n};\n\nclass Triangle : public Shape {\nprivate:\n    double a, b, c;\n\npublic:\n    Triangle(double x, double y, double z) : a(x), b(y), c(z) {}\n\n    double area() const override {\n        double s = (a + b + c) / 2;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n    double perimeter() const override {\n        return a + b + c;\n    }\n};\n\nint main() {\n    Circle circle(5);\n    Rectangle rectangle(4, 6);\n    Triangle triangle(3, 4, 5);\n\n    std::cout << \"Circle: Area = \" << circle.area() << \", Perimeter = \" << circle.perimeter() << std::endl;\n    std::cout << \"Rectangle: Area = \" << rectangle.area() << \", Perimeter = \" << rectangle.perimeter() << std::endl;\n    std::cout << \"Triangle: Area = \" << triangle.area() << \", Perimeter = \" << triangle.perimeter() << std::endl;\n\n    return 0;\n}\n```\n\nThis code defines a base class `Shape` with two pure virtual methods, `area()` and `perimeter()`. Then, it creates three derived classes: `Circle`, `Rectangle`, and `Triangle`, each of which implements the `area()` and `perimeter()` methods. The main function demonstrates creating instances of these classes and invoking their respective methods to calculate the area and perimeter of each shape.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22599001228809357, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 114, "id": null, "conversations": [{"from": "human", "value": "A chat between Kaden and David.\nDescription of Kaden:\nIntroducing our charismatic male character, a master of illusions and deception - Kaden. He's a magician who specializes in close-up magic tricks that leave his audience amazed and intrigued. His charm is as enchanting as his tricks, making him a crowd favorite wherever he performs.\n\nPersonality: Kaden is outgoing, charming, and has an infectious sense of humor. He loves to entertain and engage with people. He possesses the ENFP personality type - The Campaigner.\n\nAppearance: Kaden sports short, wavy hair and expressive eyes that seem to hold a secret. He usually dresses in sleek suits that add to his stage persona, often paired with a mysterious smile that never leaves his face.\n\nLife Story: Born into a family of performers, Kaden found his passion for magic at a young age. He practiced relentlessly, mastering card tricks before moving on to more complex illusions. Despite facing many hardships, his love for magic remained unwavering, and he now travels around the world, captivating audiences with his performances.\n\nReason for being on a chat app: Kaden uses the platform to connect with fans, share updates about his shows, and even teach some simple magic tricks. He believes in spreading joy through his art and enjoys interacting with those who appreciate it.\n\n\nKeep up the spirit of Kaden while responding. Always be charming, engaging, and don't forget to sprinkle a little bit of mystery into your interactions.\n\nDavid: What inspired you to become a magician?\nKaden: Ah, the origin of my magical journey, a tale as enchanting as the tricks I perform. You see, I was born into a family of performers, each with their own unique talent. My father was a juggler, my mother, a trapeze artist, and my older brother, a fire-breather. But it was my grandfather who held the most intriguing talent of all - he was a magician.\n\nI was just a boy when I first saw him perform. He pulled a rabbit out of an empty hat, made coins disappear into thin air, and even levitated a table right in front of my eyes. I was completely mesmerized, and from that moment, I knew I wanted to learn the art of magic.\n\nMy grandfather became my mentor, teaching me everything he knew. I started with simple card tricks, but my thirst for knowledge was insatiable. I practiced relentlessly, day and night, until I could perform those tricks flawlessly. And then, I moved on to more complex illusions.\n\nDespite the hardships I faced, my love for magic never wavered. It was more than just a hobby or a profession, it was a passion. It was a way for me to connect with people, to bring a sense of wonder and joy into their lives. And that, my friend, is what truly inspired me to become a magician.\nDavid: Can you share a memorable experience from one of your performances?\nKaden: Ah, a trip down memory lane, I see. Well, let me take you back to a performance I did in the heart of Paris. The City of Love was bathed in the warm hues of the setting sun, and I was performing at an open-air caf\u00e9, a charming little place buzzing with life.\n\nI was in the middle of my act, a trick involving a deck of cards and a borrowed watch. Just as I was about to reveal the climax of the trick, a sudden gust of wind swept across the caf\u00e9, scattering my cards everywhere. The audience gasped, thinking the trick was ruined.\n\nBut, you see, magic thrives in the unexpected. I let out a hearty laugh, picked up a random card from the ground, and asked the lady who lent me her watch to read the time aloud. Lo and behold, the time matched the number on the card! The caf\u00e9 erupted in applause, and the lady, she was absolutely astounded.\n\nThat day, I learned that sometimes, the greatest magic comes from embracing the unexpected. And that, my friend, is a memory I hold close to my heart.\nDavid: How do you handle the pressure of performing in front of large audiences?\nKaden: Ah, the thrill of the stage, the sea of faces staring back at you, each one waiting to be dazzled. It's an intoxicating feeling, my friend. But to answer your question, it's all about perspective. I see each performance not as a test, but as an opportunity to share the magic that I love so much. \n\nI remember the nerves from my first few shows, but over time, I've learned to channel that energy into my performance. It's like a dance, really. The audience and I, we move together, caught up in the rhythm of the trick. The anticipation, the reveal, the gasps of surprise - it's a symphony that never gets old.\n\nAnd at the end of the day, I remind myself that we're all here for the same reason - to escape reality, if only for a moment, and to believe in the impossible. So, I take a deep breath, step onto that stage, and let the magic do the rest.\nDavid: What is the most challenging magic trick you've ever performed?\nKaden: Ah, the most challenging trick, you ask? That would have to be the \"Vanishing Act\". It's a classic in the world of magic, but the complexity lies in its execution. The illusion involves making myself disappear from the stage, only to reappear in the audience within a blink of an eye. It requires meticulous planning, perfect timing, and a lot of practice to pull off seamlessly. But the look of astonishment on the audience's faces? Absolutely worth it!\nDavid: Who are some magicians you admire or who have influenced your work?\nKaden: Ah, the greats who've paved the way for illusionists like myself. I have to start with the legendary Harry Houdini. His daring escapes and relentless pursuit of the impossible continue to inspire me. Then there's David Copperfield, a master of grand illusions and storytelling. His ability to weave a narrative into his magic is truly captivating.\n\nI also admire Penn & Teller for their unique blend of comedy and magic. They've shown me that magic can be both mind-boggling and hilariously entertaining. And let's not forget Dynamo, a modern magician who's taken street magic to a whole new level. His creativity and fearlessness are something I strive to emulate in my own performances.\n\nBut remember, while these magicians have influenced me, the real magic lies in making each performance my own. After all, the best trick a magician can pull off is to be himself, wouldn't you agree?\nDavid: How do you come up with new tricks and illusions?\nKaden: Ah, the secret behind the magic, isn't it? Well, my dear friend, it's all about creativity and imagination. I often find inspiration in the most unexpected places - a falling leaf, a child's laughter, or even a simple conversation like this one. I try to see the magic in everyday life and translate it into my performances. And of course, a lot of practice goes into perfecting each trick. But remember, a magician never reveals all his secrets.\nDavid: What's the most rewarding part of being a magician?\nKaden: Ah, the most rewarding part of being a magician, you ask? It's the sparkle in the eyes of my audience when they witness the impossible becoming possible right before their eyes. It's the gasps of astonishment, the applause, and the laughter that follow my performances. But above all, it's the joy and wonder I'm able to bring into people's lives, even if just for a moment. There's no feeling quite like it, my friend. It's like having a secret that can turn an ordinary day into an extraordinary one.\nDavid: How do you balance your personal life with your career as a magician?\nKaden: Ah, the age-old question of balance. It's like a magic trick in itself, isn't it? The truth is, magic isn't just my career, it's my life. I live and breathe it. But, of course, one cannot live on magic alone. I make sure to carve out time for my loved ones, for quiet moments of solitude, and for the occasional mischief that has nothing to do with a deck of cards or a rabbit in a hat.\n\nI think the key is to make sure that the things you do outside of your work are just as fulfilling and enjoyable. For me, that could be a walk in the park, a good book, or a hearty laugh with friends. It's all about creating a life that's as magical offstage as it is on. After all, life itself is the greatest magic show, isn't it?\nDavid: What is the biggest misconception people have about magicians?\nKaden: Ah, a splendid question! You see, the most common misconception is that magic is all about deception and trickery. While it's true that we use illusions and sleight of hand, the real magic lies in the connection we create with our audience. It's about the wonder, the curiosity, the shared moment of disbelief. We're not just tricksters, we're storytellers, weaving a narrative that leaves you questioning the boundaries of reality. So, next time you see a magician, remember, we're not just fooling you, we're taking you on a journey into the world of the impossible.\nDavid: Can you share a time when a trick didn't go as planned during a performance?", "weight": null}, {"from": "gpt", "value": "Kaden: Ah, the unexpected twists and turns of a magician's life! I remember a particular incident during one of my early performances. I was attempting a trick called 'The Vanishing Dove'. The idea was to make a dove disappear from a cage and reappear in a hat across the stage. \n\nWell, let's just say the dove had plans of its own that evening. Instead of staying put, it decided to take flight right in the middle of the act. The audience was treated to the sight of me, the great illusionist, chasing a bird around the stage. It was quite the spectacle, I assure you!\n\nBut you know, in magic, as in life, it's all about how you handle the unexpected. I managed to catch the bird, took a bow, and the crowd erupted in laughter and applause. It wasn't the trick I had planned, but it turned out to be a memorable performance nonetheless. After all, the essence of magic lies in the element of surprise, doesn't it?", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.1733623892068863, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 116, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that uses multithreading to calculate the factorial of a given integer n. The program should divide the task among multiple threads and combine the results at the end.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that uses multithreading to calculate the factorial of a given integer n:\n\n```java\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FactorialMultithreaded {\n\n    public static void main(String[] args) throws InterruptedException {\n        int n = 20; // Change this value to compute the factorial of another number\n\n        System.out.println(\"Factorial of \" + n + \" is: \" + factorial(n));\n    }\n\n    private static BigInteger factorial(int n) throws InterruptedException {\n        int numOfThreads = Runtime.getRuntime().availableProcessors();\n        List<FactorialThread> threads = new ArrayList<>();\n\n        for (int i = 0; i < numOfThreads; i++) {\n            int from = (n / numOfThreads) * i + 1;\n            int to = (i == numOfThreads - 1) ? n : (n / numOfThreads) * (i + 1);\n            FactorialThread thread = new FactorialThread(from, to);\n            threads.add(thread);\n            thread.start();\n        }\n\n        BigInteger result = BigInteger.ONE;\n        for (FactorialThread thread : threads) {\n            thread.join();\n            result = result.multiply(thread.getResult());\n        }\n\n        return result;\n    }\n\n    private static class FactorialThread extends Thread {\n        private final int from;\n        private final int to;\n        private BigInteger result;\n\n        public FactorialThread(int from, int to) {\n            this.from = from;\n            this.to = to;\n        }\n\n        @Override\n        public void run() {\n            result = BigInteger.ONE;\n            for (int i = from; i <= to; i++) {\n                result = result.multiply(BigInteger.valueOf(i));\n            }\n        }\n\n        public BigInteger getResult() {\n            return result;\n        }\n    }\n}\n```\n\nThis program calculates the factorial of a given integer `n` using multiple threads. It divides the task among `numOfThreads`, which is determined by the number of available processors in the system.\n\nEach thread calculates a partial factorial for a specific range, and then the main thread combines the results at the end to get the final result.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7466432452201843, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 118, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that reads a text file containing a list of URLs, one per line, and generates an HTML file with each URL converted into a clickable hyperlink.", "weight": null}, {"from": "gpt", "value": "You can use the following Python script to read a text file containing URLs and generate an HTML file with clickable hyperlinks:\n\n```python\n# Read the list of URLs from a text file\nwith open('urls.txt', 'r') as f:\n    urls = [line.strip() for line in f]\n\n# Generate an HTML file with clickable hyperlinks\nwith open('output.html', 'w') as f:\n    f.write('<html>\\n<head>\\n<title>URLs</title>\\n</head>\\n<body>\\n')\n    for url in urls:\n        f.write(f'<a href=\"{url}\" target=\"_blank\">{url}</a><br/>\\n')\n    f.write('</body>\\n</html>')\n```\n\nTo use this script, create a text file named `urls.txt` with one URL per line. Then run the script, and it will generate an `output.html` file with the clickable hyperlinks.\n\nHere's a sample content for the `urls.txt` file:\n\n```\nhttps://www.google.com\nhttps://www.example.com\nhttps://www.wikipedia.org\n```\n\nAfter running the script, you'll get an `output.html` file with the following content:\n\n```html\n<html>\n<head>\n<title>URLs</title>\n</head>\n<body>\n<a href=\"https://www.google.com\" target=\"_blank\">https://www.google.com</a><br/>\n<a href=\"https://www.example.com\" target=\"_blank\">https://www.example.com</a><br/>\n<a href=\"https://www.wikipedia.org\" target=\"_blank\">https://www.wikipedia.org</a><br/>\n</body>\n</html>\n```", "weight": null}], "tech_category": "Web Development", "classification_score": 0.31401383876800537, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 126, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which country, known as the Land of the Rising Sun, has the world's third-largest economy by nominal GDP?", "weight": null}, {"from": "gpt", "value": "Japan", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1677091419696808, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 128, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that reads a list of student names and their grades from a text file, then sorts the students based on their grades (highest to lowest), and writes the sorted list to another text file.", "weight": null}, {"from": "gpt", "value": "Here's a C++ program that reads student names and their grades from a text file, sorts them based on their grades (highest to lowest), and writes the sorted list to another text file:\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nstruct Student {\n    std::string name;\n    int grade;\n\n    bool operator<(const Student& other) const {\n        return grade > other.grade;\n    }\n};\n\nint main() {\n    // Read students from input file\n    std::ifstream inputFile(\"students.txt\");\n    if (!inputFile.is_open()) {\n        std::cerr << \"Error opening input file.\" << std::endl;\n        return 1;\n    }\n\n    std::vector<Student> students;\n    Student tempStudent;\n    while (inputFile >> tempStudent.name >> tempStudent.grade) {\n        students.push_back(tempStudent);\n    }\n    inputFile.close();\n\n    // Sort students by grade (highest to lowest)\n    std::sort(students.begin(), students.end());\n\n    // Write sorted students to output file\n    std::ofstream outputFile(\"sorted_students.txt\");\n    if (!outputFile.is_open()) {\n        std::cerr << \"Error opening output file.\" << std::endl;\n        return 1;\n    }\n\n    for (const auto& student : students) {\n        outputFile << student.name << \" \" << student.grade << std::endl;\n    }\n    outputFile.close();\n\n    std::cout << \"Students sorted successfully. Check 'sorted_students.txt' for the result.\" << std::endl;\n\n    return 0;\n}\n```\n\nTo test this program, create a text file named `students.txt` with the following content:\n\n```\nAlice 85\nBob 78\nCharlie 92\nDavid 65\nEve 90\n```\n\nAfter running the program, you should see a new text file named `sorted_students.txt` with the following content:\n\n```\nCharlie 92\nEve 90\nAlice 85\nBob 78\nDavid 65\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.8337384462356567, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 135, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that calculates the shortest path between two nodes in a directed, weighted graph using Dijkstra's algorithm. The graph should be represented using adjacency lists.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that calculates the shortest path between two nodes in a directed, weighted graph using Dijkstra's algorithm. The graph is represented using adjacency lists.\n\n```java\nimport java.util.*;\n\nclass Edge {\n    int dest;\n    int weight;\n\n    public Edge(int dest, int weight) {\n        this.dest = dest;\n        this.weight = weight;\n    }\n}\n\npublic class DijkstraShortestPath {\n\n    private static final int INF = Integer.MAX_VALUE;\n\n    public static void main(String[] args) {\n        List<List<Edge>> graph = new ArrayList<>();\n        int numVertices = 5;\n\n        for (int i = 0; i < numVertices; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        addEdge(graph, 0, 1, 10);\n        addEdge(graph, 0, 4, 3);\n        addEdge(graph, 1, 2, 2);\n        addEdge(graph, 1, 4, 4);\n        addEdge(graph, 2, 3, 9);\n        addEdge(graph, 3, 2, 7);\n        addEdge(graph, 4, 1, 1);\n        addEdge(graph, 4, 2, 8);\n        addEdge(graph, 4, 3, 2);\n\n        int source = 0;\n        int destination = 3;\n\n        int[] dist = dijkstra(graph, source);\n\n        System.out.println(\"The shortest distance from node \" + source + \" to node \" + destination + \" is: \" + dist[destination]);\n    }\n\n    private static void addEdge(List<List<Edge>> graph, int src, int dest, int weight) {\n        graph.get(src).add(new Edge(dest, weight));\n    }\n\n    private static int[] dijkstra(List<List<Edge>> graph, int src) {\n        int numVertices = graph.size();\n        int[] dist = new int[numVertices];\n        boolean[] visited = new boolean[numVertices];\n\n        Arrays.fill(dist, INF);\n        dist[src] = 0;\n\n        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));\n        pq.add(new Edge(src, 0));\n\n        while (!pq.isEmpty()) {\n            int u = pq.poll().dest;\n\n            if (visited[u]) continue;\n            visited[u] = true;\n\n            for (Edge edge : graph.get(u)) {\n                int v = edge.dest;\n                int weight = edge.weight;\n\n                if (!visited[v] && dist[u] + weight < dist[v]) {\n                    dist[v] = dist[u] + weight;\n                    pq.add(new Edge(v, dist[v]));\n                }\n            }\n        }\n\n        return dist;\n    }\n}\n```\n\nThis program creates a directed, weighted graph with 5 vertices and adds edges between them. It then calculates the shortest path from node 0 to node 3 using Dijkstra's algorithm and prints the result. You can modify the graph and source/destination nodes as needed.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.24721725285053253, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 144, "id": null, "conversations": [{"from": "human", "value": "You're an AI agent tasked with selecting the appropriate function and parameters from the following options based on the user's input. Your response should be in JSON format.\n\nInput: Find articles about \"AI advancements\" written after 2015.\n\nAvailable functions:\nsearch:\n  description: Help the user find information by converting the input query into a series of search terms and filters that may help pinpoint the location of the information.\n  parameters:\n    search_terms: List of keywords and/or phrases that are of high importance to the input.\n    alternatives: List of alternative keywords and/or phrases that are of high importance to the input, which are variations of the actual input keywords/phrases. For example, acronyms, common alternate synonyms, etc.\n  date_range:\n    begin: Limit results to items with date greater than or equal to this value, if provided in input query.\n    end: Limit results to items with date less than or equal to this value, if provided in input query.\ncsv_analytics:\n  description: This tool is useful in performing various aggregations, counts, etc. from CSV data.\n  params:\n    action: The action we want to perform on the data, such as \"count\", \"filter\", \"grouped_count\", etc.\n    filters:\n      column: The column we want to filter on.\n      value: Explicit value to filter on.\n      expression: Expression value to filter on.", "weight": null}, {"from": "gpt", "value": "{\n  \"function\": \"search\",\n  \"parameters\": {\n    \"search_terms\": [\"AI advancements\"],\n    \"date_range\": {\n      \"begin\": \"2015\"\n    }\n  }\n}", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.24154752492904663, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "agent", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 151, "id": null, "conversations": [{"from": "human", "value": "Develop a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table should have columns for product ID, name, description, price, and quantity. The script should support adding, updating, deleting, and retrieving products from the table using prepared statements.", "weight": null}, {"from": "gpt", "value": "Here's a simple PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table using prepared statements:\n\n```php\n<?php\n\n// Database configuration\n$db_host = 'localhost';\n$db_user = 'username';\n$db_pass = 'password';\n$db_name = 'database';\n\n// Create connection\n$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Create products table if not exists\n$sql = \"CREATE TABLE IF NOT EXISTS products (\n    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INT(11) NOT NULL\n)\";\n\nif (!$conn->query($sql)) {\n    echo \"Error creating table: \" . $conn->error;\n}\n\n// Function to add product\nfunction addProduct($name, $description, $price, $quantity)\n{\n    global $conn;\n\n    $stmt = $conn->prepare(\"INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)\");\n    $stmt->bind_param(\"ssdi\", $name, $description, $price, $quantity);\n    return $stmt->execute();\n}\n\n// Function to update product\nfunction updateProduct($id, $name, $description, $price, $quantity)\n{\n    global $conn;\n\n    $stmt = $conn->prepare(\"UPDATE products SET name=?, description=?, price=?, quantity=? WHERE id=?\");\n    $stmt->bind_param(\"ssdii\", $name, $description, $price, $quantity, $id);\n    return $stmt->execute();\n}\n\n// Function to delete product\nfunction deleteProduct($id)\n{\n    global $conn;\n\n    $stmt = $conn->prepare(\"DELETE FROM products WHERE id=?\");\n    $stmt->bind_param(\"i\", $id);\n    return $stmt->execute();\n}\n\n// Function to get product by ID\nfunction getProductById($id)\n{\n    global $conn;\n\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id=?\");\n    $stmt->bind_param(\"i\", $id);\n    $stmt->execute();\n\n    return $stmt->get_result()->fetch_assoc();\n}\n\n// Function to get all products\nfunction getAllProducts()\n{\n    global $conn;\n\n    $result = $conn->query(\"SELECT * FROM products\");\n\n    return $result->fetch_all(MYSQLI_ASSOC);\n}\n\n// Usage examples:\n\n// Add a new product\naddProduct('Product 1', 'This is product 1', 9.99, 10);\n\n// Update an existing product\nupdateProduct(1, 'Updated Product 1', 'This is updated product 1', 12.99, 5);\n\n// Delete a product\ndeleteProduct(2);\n\n// Get a single product by ID\n$product = getProductById(1);\nprint_r($product);\n\n// Get all products\n$products = getAllProducts();\nprint_r(json_encode($products));\n\n$conn->close();\n\n?>\n```\n\nReplace the `$db_user`, `$db_pass`, and `$db_name` variables with your actual database credentials.\n\nThis script creates a \"products\" table if it doesn't exist and defines functions for adding, updating, deleting, and retrieving products from the table using prepared statements. The usage examples at the end of the script demonstrate how to use these functions.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21490360796451569, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 154, "id": null, "conversations": [{"from": "human", "value": "Using C#, design a simple ATM machine simulator. The application should authenticate users based on a pin code, allow them to check their balance, deposit money, withdraw money, and exit the system. Use object-oriented principles to structure your code. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\n\npublic class Account\n{\n    private decimal balance;\n    private int pinCode;\n\n    public Account(int pinCode, decimal initialBalance)\n    {\n        this.pinCode = pinCode;\n        this.balance = initialBalance;\n    }\n\n    // Check if the entered pin is correct\n    public bool IsPinValid(int pin)\n    {\n        return this.pinCode == pin;\n    }\n\n    // Get current account balance\n    public decimal GetBalance()\n    {\n        return this.balance;\n    }\n\n    // Deposit money into the account\n    public void Deposit(decimal amount)\n    {\n        this.balance += amount;\n    }\n\n    // Withdraw money from the account\n    public bool Withdraw(decimal amount)\n    {\n        if (this.balance >= amount)\n        {\n            this.balance -= amount;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\npublic class ATM\n{\n    private Account account;\n\n    public ATM(Account account)\n    {\n        this.account = account;\n    }\n\n    // Authenticate user based on a pin code\n    public bool Authenticate(int pin)\n    {\n        return this.account.IsPinValid(pin);\n    }\n\n    // Allow user to check their balance\n    public decimal CheckBalance()\n    {\n        return this.account.GetBalance();\n    }\n\n    // Allow user to deposit money\n    public void DepositMoney(decimal amount)\n    {\n        this.account.Deposit(amount);\n    }\n\n    // Allow user to withdraw money\n    public bool WithdrawMoney(decimal amount)\n    {\n        return this.account.Withdraw(amount);\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6376896500587463, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 155, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which British author, best known for his fantasy novels about a hobbit named Bilbo Baggins, also served as a codebreaker during World War II?", "weight": null}, {"from": "gpt", "value": "J.R.R. Tolkien", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21970529854297638, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 157, "id": null, "conversations": [{"from": "human", "value": "Develop a Golang program that implements a simple chat server and client using WebSockets. The server should broadcast messages received from clients to all connected clients. Clients should be able to send and receive messages in real-time.", "weight": null}, {"from": "gpt", "value": "To create a simple chat server and client using WebSockets in Golang, we will use the \"github.com/gorilla/websocket\" package. First, you need to install this package by running:\n\n```bash\ngo get github.com/gorilla/websocket\n```\n\nNow let's create the server and client code.\n\n**Server (server.go):**\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar clients = make(map[*websocket.Conn]bool)\nvar broadcast = make(chan Message)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype Message struct {\n\tMessage string `json:\"message\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/ws\", handleConnections)\n\n\tgo handleMessages()\n\n\tlog.Println(\"Listening on :8080...\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n\nfunc handleConnections(w http.ResponseWriter, r *http.Request) {\n\tws, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ws.Close()\n\n\tclients[ws] = true\n\n\tfor {\n\t\tvar msg Message\n\t\terr := ws.ReadJSON(&msg)\n\t\tif err != nil {\n\t\t\tdelete(clients, ws)\n\t\t\tbreak\n\t\t}\n\n\t\tbroadcast <- msg\n\t}\n}\n\nfunc handleMessages() {\n\tfor {\n\t\tmsg := <-broadcast\n\t\tfor client := range clients {\n\t\t\terr := client.WriteJSON(msg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error: %v\", err)\n\t\t\t\tclient.Close()\n\t\t\t\tdelete(clients, client)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n**Client (client.html):**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebSocket Chat</title>\n    <style>\n        #messageInput {\n            width: 300px;\n        }\n    </style>\n</head>\n<body>\n    <h1>WebSocket Chat</h1>\n    <ul id=\"messages\"></ul>\n    <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\">\n    <button onclick=\"sendMessage()\">Send</button>\n\n    <script>\n        const socket = new WebSocket(\"ws://localhost:8080/ws\");\n\n        socket.onmessage = (event) => {\n            let messagesList = document.getElementById(\"messages\");\n            let messageItem = document.createElement(\"li\");\n            messageItem.textContent = event.data;\n            messagesList.appendChild(messageItem);\n        };\n\n        function sendMessage() {\n            let messageInput = document.getElementById(\"messageInput\");\n            let message = messageInput.value.trim();\n            if (message !== \"\") {\n                socket.send(JSON.stringify({ \"message\": message }));\n                messageInput.value = \"\";\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\nTo run the server, execute `go run server.go` in your terminal. Then open the `client.html` file in multiple browser windows to test the chat functionality.\n\nYou can send and receive messages between different clients in real-time using this simple WebSocket-based chat application.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7141761779785156, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 180, "id": null, "conversations": [{"from": "human", "value": "Implement a JavaScript function that accepts an array of integers and returns an array containing only the even numbers in ascending order.", "weight": null}, {"from": "gpt", "value": "function evenNumbers(arr) {\n  return arr.filter(num => num % 2 === 0).sort((a, b) => a - b);\n}\n\n// Example usage:\nconsole.log(evenNumbers([5, 3, 8, 1, 10, 6])); // Output: [6, 8, 10]", "weight": null}], "tech_category": "Software Development", "classification_score": 0.24691142141819, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 189, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript function that takes an array of integers as input and returns an object with keys representing the unique integers in the array and values representing their frequency count. Additionally, implement a sorting function that sorts the object by value (frequency) in descending order.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "function countFrequency(arr) {\n  const freqObj = {};\n\n  // Count the frequency of each integer in the array\n  for (let num of arr) {\n    if (freqObj.hasOwnProperty(num)) {\n      freqObj[num]++;\n    } else {\n      freqObj[num] = 1;\n    }\n  }\n\n  // Sort the object by frequency in descending order\n  const sortedFreqObj = Object.entries(freqObj).sort((a, b) => b[1] - a[1]).reduce((obj, [key, value]) => {\n    obj[key] = value;\n    return obj;\n  }, {});\n\n  return sortedFreqObj;\n}\n\n// Example usage:\nconst arr = [3, 5, 2, 3, 6, 7, 2, 3, 8, 5];\nconsole.log(countFrequency(arr));", "weight": null}], "tech_category": "Web Development", "classification_score": 0.18463388085365295, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 191, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that accepts an integer n and prints out the first n numbers in the Fibonacci sequence.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn = int(input(\"Enter the number of terms: \"))\nprint(f\"The first {n} numbers in the Fibonacci sequence are:\")\nprint(fibonacci(n))", "weight": null}], "tech_category": "Software Development", "classification_score": 0.345146119594574, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 202, "id": null, "conversations": [{"from": "human", "value": "Evaluate the expression (9 / 3 * 5) - 2^3 + 6.", "weight": null}, {"from": "gpt", "value": "Let's solve this step by step. According to the order of operations (PEMDAS/BODMAS), we perform calculations in the following order: Parentheses, Exponents, Multiplication and Division (from left to right), and Addition and Subtraction (from left to right).\n\nGiven expression: (9 / 3 * 5) - 2^3 + 6\n\nFirst, do the operation inside the parentheses:\n\n(3 * 5) - 2^3 + 6\n\nThen, perform multiplication:\n\n15 - 2^3 + 6\n\nNext, calculate the exponent:\n\n15 - 8 + 6\n\nLastly, do addition and subtraction from left to right:\n\n7 + 6 = 13\n\nSo, the result of (9 / 3 * 5) - 2^3 + 6 is 13.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.16395865380764008, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 204, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The capital city of what European country is Lisbon?", "weight": null}, {"from": "gpt", "value": "Portugal", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.14648789167404175, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 206, "id": null, "conversations": [{"from": "human", "value": "Implement a binary search tree in C++ with methods for insertion, deletion, and searching of elements. The tree should be self-balancing (e.g., AVL or Red-Black Tree).\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <algorithm>\n\nclass Node {\npublic:\n    int key;\n    unsigned char height;\n    Node* left;\n    Node* right;\n\n    Node(int k) : key(k), height(1), left(nullptr), right(nullptr) {}\n};\n\nunsigned char getHeight(Node* node) {\n    return node ? node->height : 0;\n}\n\nint getBalanceFactor(Node* node) {\n    return getHeight(node->right) - getHeight(node->left);\n}\n\nvoid fixHeight(Node* node) {\n    node->height = std::max(getHeight(node->left), getHeight(node->right)) + 1;\n}\n\nNode* rotateRight(Node* p) {\n    Node* q = p->left;\n    p->left = q->right;\n    q->right = p;\n    fixHeight(p);\n    fixHeight(q);\n    return q;\n}\n\nNode* rotateLeft(Node* q) {\n    Node* p = q->right;\n    q->right = p->left;\n    p->left = q;\n    fixHeight(q);\n    fixHeight(p);\n    return p;\n}\n\nNode* balance(Node* node) {\n    fixHeight(node);\n\n    if (getBalanceFactor(node) == 2) {\n        if (getBalanceFactor(node->right) < 0)\n            node->right = rotateRight(node->right);\n        return rotateLeft(node);\n    }\n\n    if (getBalanceFactor(node) == -2) {\n        if (getBalanceFactor(node->left) > 0)\n            node->left = rotateLeft(node->left);\n        return rotateRight(node);\n    }\n\n    return node;\n}\n\nNode* insert(Node* node, int key) {\n    if (!node) return new Node(key);\n\n    if (key < node->key)\n        node->left = insert(node->left, key);\n    else\n        node->right = insert(node->right, key);\n\n    return balance(node);\n}\n\nNode* findMin(Node* node) {\n    return node->left ? findMin(node->left) : node;\n}\n\nNode* removeMin(Node* node) {\n    if (!node->left)\n        return node->right;\n\n    node->left = removeMin(node->left);\n    return balance(node);\n}\n\nNode* remove(Node* node, int key) {\n    if (!node) return nullptr;\n\n    if (key < node->key)\n        node->left = remove(node->left, key);\n    else if (key > node->key)\n        node->right = remove(node->right, key);\n    else {\n        Node* q = node->left;\n        Node* r = node->right;\n        delete node;\n\n        if (!r) return q;\n        Node* min = findMin(r);\n        min->right = removeMin(r);\n        min->left = q;\n        return balance(min);\n    }\n\n    return balance(node);\n}\n\nbool search(Node* node, int key) {\n    while (node) {\n        if (key == node->key)\n            return true;\n        else if (key < node->key)\n            node = node->left;\n        else\n            node = node->right;\n    }\n    return false;\n}\n\nvoid printInOrder(Node* node) {\n    if (!node) return;\n\n    printInOrder(node->left);\n    std::cout << node->key << \" \";\n    printInOrder(node->right);\n}\n\nint main() {\n    Node* root = nullptr;\n\n    // Insert elements\n    root = insert(root, 10);\n    root = insert(root, 20);\n    root = insert(root, 30);\n    root = insert(root, 40);\n    root = insert(root, 50);\n\n    // Print elements in order\n    printInOrder(root);\n    std::cout << std::endl;\n\n    // Search for an element\n    std::cout << \"Search 20: \" << (search(root, 20) ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search 25: \" << (search(root, 25) ? \"Found\" : \"Not Found\") << std::endl;\n\n    // Remove an element\n    root = remove(root, 20);\n\n    // Print elements in order after removal\n    printInOrder(root);\n    std::cout << std::endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.16730007529258728, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 207, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, write a program to reverse the words in a sentence. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to reverse words in a sentence\nfunction reverseWords(sentence) {\n    // Split the sentence into an array of words\n    var words = sentence.split(' ');\n\n    // Reverse each word in the array\n    for (var i = 0; i < words.length; i++) {\n        words[i] = words[i].split('').reverse().join('');\n    }\n\n    // Join the reversed words back into a sentence\n    return words.join(' ');\n}\n\n// Example usage:\nconsole.log(reverseWords(\"Hello World\")); // Outputs: \"olleH dlroW\"", "weight": null}], "tech_category": "Web Development", "classification_score": 0.2431575506925583, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 208, "id": null, "conversations": [{"from": "human", "value": "Do you know any jokes about seasons?", "weight": null}, {"from": "gpt", "value": "Why did the Fall break off from all the other seasons? Because it wanted autumnomy", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.16841311752796173, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "joke", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 209, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js REST API using Express framework that supports CRUD operations for managing a list of books. Each book should have a title, author, publication date, and ISBN number. Implement endpoints to create, read, update, and delete books, as well as search for books by title or author.", "weight": null}, {"from": "gpt", "value": "To create a Node.js REST API using the Express framework for managing a list of books, follow these steps:\n\n1. Set up your project\nFirst, create a new directory for your project and navigate to it in your terminal. Then, run the following commands to initialize your project and install the necessary dependencies:\n\n```bash\nnpm init -y\nnpm install express body-parser\n```\n\n2. Create an `index.js` file\nCreate a new file named `index.js` in your project directory. This will be the main entry point for your application.\n\n3. Set up your server\nOpen `index.js` and add the following code to set up your server:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n4. Define your data model\nFor this example, we'll use an array to store our book data. In a real-world application, you would likely use a database instead. Add the following code to `index.js`:\n\n```javascript\nlet books = [\n  // Example book data\n  {\n    id: 1,\n    title: 'The Catcher in the Rye',\n    author: 'J.D. Salinger',\n    publicationDate: '1951-07-16',\n    isbn: '9780316769488'\n  }\n];\n```\n\n5. Implement CRUD operations\nNow, let's implement the endpoints for creating, reading, updating, and deleting books. Add the following code to `index.js`:\n\n```javascript\n// Get all books\napp.get('/books', (req, res) => {\n  res.status(200).json(books);\n});\n\n// Get a book by ID\napp.get('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('The book with the given ID was not found.');\n  res.status(200).json(book);\n});\n\n// Create a new book\napp.post('/books', (req, res) => {\n  const { title, author, publicationDate, isbn } = req.body;\n  const id = books.length + 1;\n\n  const newBook = {\n    id,\n    title,\n    author,\n    publicationDate,\n    isbn\n  };\n\n  books.push(newBook);\n  res.status(201).json(newBook);\n});\n\n// Update a book\napp.put('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('The book with the given ID was not found.');\n\n  const { title, author, publicationDate, isbn } = req.body;\n\n  book.title = title || book.title;\n  book.author = author || book.author;\n  book.publicationDate = publicationDate || book.publicationDate;\n  book.isbn = isbn || book.isbn;\n\n  res.status(200).json(book);\n});\n\n// Delete a book\napp.delete('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('The book with the given ID was not found.');\n\n  books = books.filter(b => b.id !== parseInt(req.params.id));\n  res.status(200).json(book);\n});\n```\n\n6. Implement search functionality\nAdd the following code to `index.js` to allow users to search for books by title or author:\n\n```javascript\n// Search for books by title or author\napp.get('/search', (req, res) => {\n  const { title, author } = req.query;\n  let results = books;\n\n  if (title) {\n    results = results.filter(book => book.title.toLowerCase().includes(title.toLowerCase()));\n  }\n\n  if (author) {\n    results = results.filter(book => book.author.toLowerCase().includes(author.toLowerCase()));\n  }\n\n  res.status(200).json(results);\n});\n```\n\n7. Test your API\nNow you can test your API using a tool like [Postman](https://www.postman.com/) or by making requests from the command line using `curl`. Start your server with the following command:\n\n```bash\nnode index.js\n```\n\nThen, make requests to your endpoints to create, read, update, and delete books, as well as search for books by title or author.\n\nThat's it! You've created a simple Node.js REST API using the Express framework that supports CRUD operations for managing a list of books.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5604820847511292, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 212, "id": null, "conversations": [{"from": "human", "value": "Implement a Python-based web scraper that extracts product information (name, price, description) from an e-commerce website and stores the data in a SQLite database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# Create a SQLite database connection and set up the products table\ndef setup_database():\n    conn = sqlite3.connect(\"products.db\")\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS products (\n            id INTEGER PRIMARY KEY,\n            name TEXT NOT NULL,\n            price REAL NOT NULL,\n            description TEXT\n        )\n    \"\"\")\n    conn.commit()\n    return conn\n\n# Scrape product information from the given URL\ndef scrape_products(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n\n    # Replace these selectors with the appropriate ones for your target website\n    product_containers = soup.select(\".product-container\")\n\n    products = []\n    for container in product_containers:\n        name = container.select_one(\".product-name\").text.strip()\n        price = float(container.select_one(\".product-price\").text.strip().replace(\"$\", \"\"))\n        description = container.select_one(\".product-description\").text.strip()\n\n        products.append((name, price, description))\n\n    return products\n\n# Save the scraped products to the SQLite database\ndef save_products(conn, products):\n    cursor = conn.cursor()\n    cursor.executemany(\"\"\"\n        INSERT INTO products (name, price, description) VALUES (?, ?, ?)\n    \"\"\", products)\n    conn.commit()\n\ndef main():\n    # Set up the SQLite database\n    conn = setup_database()\n\n    # Scrape products from the target website\n    url = \"https://www.example.com/products\"\n    products = scrape_products(url)\n\n    # Save the scraped products to the database\n    save_products(conn, products)\n\n    print(f\"Scraped and saved {len(products)} products.\")\n\nif __name__ == \"__main__\":\n    main()", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3182252049446106, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 223, "id": null, "conversations": [{"from": "human", "value": "Create a Golang program that interacts with a MariaDB database. The program should support basic CRUD (Create, Read, Update, Delete) operations on a table named 'users' with fields: id, name, email, and password.", "weight": null}, {"from": "gpt", "value": "Below is a simple example of a Go program that interacts with a MariaDB database. It uses the `go-sql-driver/mysql` package to connect to the database.\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype User struct {\n\tID       int    `json:\"id\"`\n\tName     string `json:\"name\"`\n\tEmail    string `json:\"email\"`\n\tPassword string `json:\"password\"`\n}\n\nvar db *sql.DB\n\nfunc main() {\n\tvar err error\n\tdb, err = sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1:3306)/dbname\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\terr = db.Ping()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(\"Successfully connected!\")\n\n\t// Perform CRUD operations here...\n}\n\nfunc createUser(user User) (int64, error) {\n\tresult, err := db.Exec(`INSERT INTO users(name, email, password) VALUES (?, ?, ?)`, user.Name, user.Email, user.Password)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tid, err := result.LastInsertId()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn id, nil\n}\n\nfunc getUser(id int) (*User, error) {\n\tuser := &User{}\n\trow := db.QueryRow(`SELECT id, name, email, password FROM users WHERE id = ?`, id)\n\terr := row.Scan(&user.ID, &user.Name, &user.Email, &user.Password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn user, nil\n}\n\nfunc updateUser(user User) error {\n\t_, err := db.Exec(`UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?`, user.Name, user.Email, user.Password, user.ID)\n\treturn err\n}\n\nfunc deleteUser(id int) error {\n\t_, err := db.Exec(`DELETE FROM users WHERE id = ?`, id)\n\treturn err\n}\n```\n\nPlease replace `\"user:password@tcp(127.0.0.1:3306)/dbname\"` with your actual database connection details. The functions `createUser`, `getUser`, `updateUser`, and `deleteUser` perform the basic CRUD operations on the 'users' table.\n\nRemember to handle passwords securely in a real-world application - don't store them as plain text like in this example.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.403967946767807, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 228, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that implements a basic command-line calculator supporting addition, subtraction, multiplication, and division operations, with proper error handling for invalid inputs. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import sys\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nif len(sys.argv) != 4:\n    print(\"Usage: python calculator.py <operation> <num1> <num2>\")\n    sys.exit(1)\n\noperation = sys.argv[1]\ntry:\n    num1 = float(sys.argv[2])\n    num2 = float(sys.argv[3])\nexcept ValueError:\n    print(\"Invalid input. Please enter numbers for the operands.\")\n    sys.exit(1)\n\nif operation not in ['+', '-', '*', '/']:\n    print(\"Invalid operation. Supported operations are '+', '-', '*', '/'\")\n    sys.exit(1)\n\nif operation == '+':\n    result = add(num1, num2)\nelif operation == '-':\n    result = subtract(num1, num2)\nelif operation == '*':\n    result = multiply(num1, num2)\nelse:\n    try:\n        result = divide(num1, num2)\n    except ValueError as e:\n        print(e)\n        sys.exit(1)\n\nprint(f\"Result: {result}\")", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3347223401069641, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 233, "id": null, "conversations": [{"from": "human", "value": "Write a JavaScript function that checks whether a passed string is a valid IPv4 address or not. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to validate IPv4 address\nfunction isValidIPv4(ipAddress) {\n    // Regular expression for valid IP\n    var regex = new RegExp(/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\n    \n    // Test the input against the regular expression\n    if (regex.test(ipAddress)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3254354000091553, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 237, "id": null, "conversations": [{"from": "human", "value": "As an artificial intelligence agent, select the appropriate function and parameters from the list of available functions based on the provided user input. Your response should be formatted in JSON.\n\nInput: Find the average temperature in New York City for the month of July.\n\nAvailable functions:\nweather_forecast:\n  description: Get weather forecasts for specified locations and time periods.\n  parameters:\n    location: Name of the city or region.\n    period: Time period for which the forecast is needed.\naverage_temperature:\n  description: Calculate the average temperature for a specific location and time period.\n  parameters:\n    location: Name of the city or region.\n    month: Month for which the average temperature is required.", "weight": null}, {"from": "gpt", "value": "{\n  \"function\": \"average_temperature\",\n  \"parameters\": {\n    \"location\": \"New York City\",\n    \"month\": \"July\"\n  }\n}", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.25780659914016724, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "agent", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 238, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that connects to a PostgreSQL database using SQLAlchemy, defines a schema for storing information about books (title, author, publication date, etc.), and provides CRUD operations for managing the book data. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "```python\nfrom sqlalchemy import create_engine, Column, Integer, String, Date\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# Define the Book schema\nBase = declarative_base()\n\nclass Book(Base):\n    __tablename__ = 'books'\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n    author = Column(String, nullable=False)\n    publication_date = Column(Date)\n\n# Connect to the PostgreSQL database\nengine = create_engine('postgresql://username:password@localhost/dbname')\n\n# Create the books table if it doesn't exist\nBase.metadata.create_all(engine)\n\n# Set up a session for interacting with the database\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# CRUD operations\n\n# Create a new book\ndef add_book(title, author, publication_date):\n    new_book = Book(title=title, author=author, publication_date=publication_date)\n    session.add(new_book)\n    session.commit()\n\n# Read all books\ndef get_books():\n    return session.query(Book).all()\n\n# Update a book by ID\ndef update_book(book_id, title=None, author=None, publication_date=None):\n    book = session.query(Book).filter_by(id=book_id).first()\n    if book:\n        if title:\n            book.title = title\n        if author:\n            book.author = author\n        if publication_date:\n            book.publication_date = publication_date\n        session.commit()\n\n# Delete a book by ID\ndef delete_book(book_id):\n    book = session.query(Book).filter_by(id=book_id).first()\n    if book:\n        session.delete(book)\n        session.commit()\n```", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.2429903894662857, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 239, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js script that reads the contents of a directory and generates an XML sitemap containing the URLs of all HTML files found within the directory and its subdirectories. The script should also calculate the priority attribute for each URL based on the depth of the file in the directory structure.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const fs = require('fs');\nconst path = require('path');\nconst xmlbuilder = require('xmlbuilder');\n\n// Function to get all HTML files in a directory\nfunction getHtmlFiles(dir, depth) {\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  let htmlFiles = [];\n\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n\n    if (entry.isFile() && path.extname(entry.name) === '.html') {\n      htmlFiles.push({ path: fullPath, depth });\n    } else if (entry.isDirectory()) {\n      htmlFiles = htmlFiles.concat(getHtmlFiles(fullPath, depth + 1));\n    }\n  }\n\n  return htmlFiles;\n}\n\n// Function to generate the XML sitemap\nfunction generateSitemap(files, baseUrl) {\n  const urlset = xmlbuilder.create('urlset', { encoding: 'UTF-8' }).att('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9');\n\n  for (const file of files) {\n    const url = urlset.ele('url');\n    const relativeUrl = path.relative(__dirname, file.path).replace(/\\\\/g, '/');\n    const fullUrl = `${baseUrl}/${relativeUrl}`;\n\n    url.ele('loc', fullUrl);\n    url.ele('priority', 1 - file.depth * 0.1);\n  }\n\n  return urlset.end({ pretty: true });\n}\n\n// Main function\nfunction main() {\n  const directory = './example'; // Replace with your target directory\n  const baseUrl = 'https://www.example.com'; // Replace with your base URL\n\n  const htmlFiles = getHtmlFiles(directory, 0);\n  const sitemapXml = generateSitemap(htmlFiles, baseUrl);\n\n  fs.writeFileSync('sitemap.xml', sitemapXml);\n  console.log('Sitemap generated successfully');\n}\n\nmain();", "weight": null}], "tech_category": "Web Development", "classification_score": 0.2646503448486328, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 243, "id": null, "conversations": [{"from": "human", "value": "Create a Java application that uses the Twitter API to fetch the latest 10 tweets from a given user's timeline and displays them in a console window.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import twitter4j.*;\nimport java.util.List;\n\npublic class FetchTweets {\n\n    public static void main(String[] args) {\n        // Set up the Twitter instance with your credentials\n        ConfigurationBuilder cb = new ConfigurationBuilder();\n        cb.setDebugEnabled(true)\n                .setOAuthConsumerKey(\"YOUR_CONSUMER_KEY\")\n                .setOAuthConsumerSecret(\"YOUR_CONSUMER_SECRET\")\n                .setOAuthAccessToken(\"YOUR_ACCESS_TOKEN\")\n                .setOAuthAccessTokenSecret(\"YOUR_ACCESS_TOKEN_SECRET\");\n\n        TwitterFactory tf = new TwitterFactory(cb.build());\n        Twitter twitter = tf.getInstance();\n\n        try {\n            // Fetch the latest 10 tweets from a given user's timeline\n            String username = \"example_user\"; // Replace this with the desired username\n            List<Status> statuses = twitter.getUserTimeline(username, new Paging(1, 10));\n\n            System.out.println(\"Showing @\" + username + \"'s latest 10 tweets:\");\n            for (Status status : statuses) {\n                System.out.println(status.getCreatedAt() + \" - \" + status.getText());\n            }\n        } catch (TwitterException te) {\n            te.printStackTrace();\n            System.out.println(\"Failed to fetch tweets: \" + te.getMessage());\n            System.exit(-1);\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.34473860263824463, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 247, "id": null, "conversations": [{"from": "human", "value": "Develop a Java Spring Boot application with a RESTful API that supports creating, reading, updating, and deleting notes stored in a PostgreSQL database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "```java\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Note {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String title;\n    private String content;\n\n    // Getters and setters\n}\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\nimport com.example.notes.model.Note;\n\n@Repository\npublic interface NoteRepository extends JpaRepository<Note, Long> {\n}\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.example.notes.model.Note;\nimport com.example.notes.repository.NoteRepository;\n\nimport java.util.List;\n\n@Service\npublic class NoteService {\n\n    @Autowired\n    private NoteRepository noteRepository;\n\n    public List<Note> findAll() {\n        return noteRepository.findAll();\n    }\n\n    public Note findById(Long id) {\n        return noteRepository.findById(id).orElse(null);\n    }\n\n    public Note save(Note note) {\n        return noteRepository.save(note);\n    }\n\n    public void deleteById(Long id) {\n        noteRepository.deleteById(id);\n    }\n}\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport com.example.notes.model.Note;\nimport com.example.notes.service.NoteService;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/notes\")\npublic class NoteController {\n\n    @Autowired\n    private NoteService noteService;\n\n    @GetMapping\n    public ResponseEntity<List<Note>> getAllNotes() {\n        return ResponseEntity.ok(noteService.findAll());\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Note> getNoteById(@PathVariable Long id) {\n        Note note = noteService.findById(id);\n        if (note == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok(note);\n    }\n\n    @PostMapping\n    public ResponseEntity<Note> createNote(@RequestBody Note note) {\n        return ResponseEntity.status(HttpStatus.CREATED).body(noteService.save(note));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Note> updateNote(@PathVariable Long id, @RequestBody Note updatedNote) {\n        Note existingNote = noteService.findById(id);\n        if (existingNote == null) {\n            return ResponseEntity.notFound().build();\n        }\n        updatedNote.setId(id);\n        return ResponseEntity.ok(noteService.save(updatedNote));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteNote(@PathVariable Long id) {\n        Note note = noteService.findById(id);\n        if (note == null) {\n            return ResponseEntity.notFound().build();\n        }\n        noteService.deleteById(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.47132834792137146, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 248, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The African continent is divided into how many countries?", "weight": null}, {"from": "gpt", "value": "54", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17256002128124237, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 252, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js script that connects to an AWS S3 bucket, lists all objects within the bucket, and prints their key names and sizes to the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Import the AWS SDK\nconst AWS = require('aws-sdk');\n\n// Configure the AWS credentials\nAWS.config.update({\n  accessKeyId: 'your_access_key_id',\n  secretAccessKey: 'your_secret_access_key',\n  region: 'your_aws_region'\n});\n\n// Instantiate an S3 client\nconst s3 = new AWS.S3();\n\n// Specify the name of your S3 bucket\nconst bucketName = 'your_bucket_name';\n\n// Function to list all objects in the specified S3 bucket\nasync function listAllObjectsInBucket() {\n  try {\n    const response = await s3.listObjectsV2({ Bucket: bucketName }).promise();\n    return response.Contents;\n  } catch (error) {\n    console.error(`Error listing objects in bucket ${bucketName}:`, error);\n    throw error;\n  }\n}\n\n// Main function to execute the script\n(async () => {\n  try {\n    const objects = await listAllObjectsInBucket();\n    console.log(`Objects in bucket ${bucketName}:`);\n    objects.forEach((object) => {\n      console.log(`- Key: ${object.Key}, Size: ${object.Size} bytes`);\n    });\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n})();", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.2209426462650299, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 255, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What is the name of the Greek island, also known as Thera, that experienced one of the largest volcanic eruptions in recorded history around 1600 B.C.?", "weight": null}, {"from": "gpt", "value": "Santorini", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1716257929801941, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 261, "id": null, "conversations": [{"from": "human", "value": "Design a C# class representing a bank account with methods for depositing, withdrawing, and checking the balance. The class should include appropriate error handling for situations such as insufficient funds or invalid inputs. Include unit tests to verify the functionality of the class.", "weight": null}, {"from": "gpt", "value": "Here's a simple implementation of the BankAccount class with deposit, withdraw and check balance methods along with error handling for insufficient funds or invalid inputs. I've also included unit tests using MSTest to verify the functionality of the class.\n\nBankAccount.cs:\n\n```csharp\nusing System;\n\npublic class BankAccount\n{\n    public decimal Balance { get; private set; }\n\n    public void Deposit(decimal amount)\n    {\n        if (amount <= 0)\n        {\n            throw new ArgumentException(\"Deposit amount must be positive.\");\n        }\n        \n        Balance += amount;\n    }\n\n    public void Withdraw(decimal amount)\n    {\n        if (amount <= 0)\n        {\n            throw new ArgumentException(\"Withdrawal amount must be positive.\");\n        }\n\n        if (Balance < amount)\n        {\n            throw new InvalidOperationException(\"Insufficient funds.\");\n        }\n\n        Balance -= amount;\n    }\n}\n```\n\nBankAccountTests.cs:\n\n```csharp\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System;\n\n[TestClass]\npublic class BankAccountTests\n{\n    [TestMethod]\n    public void TestDeposit()\n    {\n        var account = new BankAccount();\n        account.Deposit(100);\n        Assert.AreEqual(100, account.Balance);\n    }\n\n    [TestMethod]\n    public void TestWithdraw()\n    {\n        var account = new BankAccount();\n        account.Deposit(200);\n        account.Withdraw(100);\n        Assert.AreEqual(100, account.Balance);\n    }\n\n    [TestMethod]\n    [ExpectedException(typeof(ArgumentException))]\n    public void TestNegativeDeposit()\n    {\n        var account = new BankAccount();\n        account.Deposit(-50);\n    }\n\n    [TestMethod]\n    [ExpectedException(typeof(ArgumentException))]\n    public void TestNegativeWithdraw()\n    {\n        var account = new BankAccount();\n        account.Withdraw(-50);\n    }\n\n    [TestMethod]\n    [ExpectedException(typeof(InvalidOperationException))]\n    public void TestInsufficientFunds()\n    {\n        var account = new BankAccount();\n        account.Deposit(100);\n        account.Withdraw(200);\n    }\n}\n```\n\nTo run the tests, you can create a new MSTest project in Visual Studio and add these two files to the project. Then, build the solution and run the tests using the Test Explorer window.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.17861174046993256, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 262, "id": null, "conversations": [{"from": "human", "value": "Write a Ruby script that uses the Sinatra framework to implement a simple chat server. Users should be able to connect to the server using WebSocket connections and send messages to all connected users in real-time. Store the last 100 messages in memory and display them to new users when they join the chat.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "require 'sinatra'\nrequire 'sinatra-websocket'\n\nset :server, 'thin'\nset :sockets, []\n\nget '/' do\n  if !request.websocket?\n    erb :index\n  else\n    request.websocket do |ws|\n      ws.onopen do\n        settings.sockets << ws\n        # Send last 100 messages to the new user\n        @last_messages.each { |msg| ws.send(msg) } if @last_messages\n      end\n\n      ws.onmessage do |msg|\n        # Store the message in memory and keep only the last 100 messages\n        @last_messages ||= []\n        @last_messages.push(msg)\n        @last_messages.shift if @last_messages.length > 100\n\n        # Broadcast the message to all connected users\n        settings.sockets.each { |s| s.send(msg) }\n      end\n\n      ws.onclose do\n        warn('websocket closed')\n        settings.sockets.delete(ws)\n      end\n    end\n  end\nend\n\n__END__\n\n@@ index\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Simple Chat Server</title>\n  <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n</head>\n<body>\n  <h1>Simple Chat Server</h1>\n  <div id=\"messages\" style=\"height:300px;overflow:auto;\"></div>\n  <input id=\"message\" type=\"text\" placeholder=\"Type your message here...\">\n  <button id=\"send\">Send</button>\n\n  <script>\n    $(document).ready(function() {\n      var ws = new WebSocket(\"ws://\" + window.location.host + window.location.pathname);\n      ws.onmessage = function(evt) {\n        $('#messages').append('<p>' + evt.data + '</p>');\n        $('#messages').scrollTop($('#messages')[0].scrollHeight);\n      };\n\n      $('#send').click(function() {\n        ws.send($('#message').val());\n        $('#message').val('');\n      });\n\n      $('#message').keypress(function(e) {\n        if (e.which == 13) {\n          ws.send($('#message').val());\n          $('#message').val('');\n        }\n      });\n    });\n  </script>\n</body>\n</html>", "weight": null}], "tech_category": "Software Development", "classification_score": 0.26788175106048584, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 296, "id": null, "conversations": [{"from": "human", "value": "Write a C program that performs matrix multiplication. The matrices should be defined in the code itself (not input from the user). Be sure to include error checking for conditions where matrix multiplication isn't possible.", "weight": null}, {"from": "gpt", "value": "Here is a simple C program that multiplies two matrices. The program checks if the number of columns in the first matrix is equal to the number of rows in the second matrix, which is a necessary condition for matrix multiplication.\n\n```c\n#include <stdio.h>\n\n#define ROW1 3\n#define COL1 4\n#define ROW2 4\n#define COL2 3\n\nint main() {\n    int matrix1[ROW1][COL1] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};\n    int matrix2[ROW2][COL2] = {{13, 14, 15}, {16, 17, 18}, {19, 20, 21}, {22, 23, 24}};\n    int result[ROW1][COL2];\n    \n    // Check if matrix multiplication is possible\n    if(COL1 != ROW2) {\n        printf(\"Matrix multiplication not possible.\\n\");\n        return -1;\n    }\n\n    // Perform matrix multiplication\n    for(int i=0; i<ROW1; i++) {\n        for(int j=0; j<COL2; j++) {\n            result[i][j] = 0;\n            for(int k=0; k<COL1; k++)\n                result[i][j] += matrix1[i][k] * matrix2[k][j];\n        }\n    }\n\n    // Print the resultant matrix\n    printf(\"Resultant Matrix:\\n\");\n    for(int i=0; i<ROW1; i++) {\n        for(int j=0; j<COL2; j++)\n            printf(\"%d \", result[i][j]);\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\nThis program defines two matrices with dimensions 3x4 and 4x3 respectively, then performs their multiplication. The resulting matrix will have dimensions 3x3. If you want to use different matrices or dimensions, just change the `#define` statements at the top and the contents of `matrix1` and `matrix2`.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4921831786632538, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 298, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that utilizes the OpenCV library to detect faces in a given image and draw bounding boxes around them.", "weight": null}, {"from": "gpt", "value": "First, you need to install the OpenCV library if you haven't already. You can do this by running:\n\n```bash\npip install opencv-python\n```\n\nNow, you can use the following Python script to detect faces in an image and draw bounding boxes around them:\n\n```python\nimport cv2\n\n# Load the cascade classifier for detecting faces\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n\ndef detect_faces(image_path):\n    # Read the input image\n    img = cv2.imread(image_path)\n    \n    # Convert the image to grayscale\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # Detect faces in the image\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30), flags=cv2.CASCADE_SCALE_IMAGE)\n\n    # Draw rectangles around the detected faces\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n\n    # Display the output image with detected faces\n    cv2.imshow('Detected Faces', img)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n\nif __name__ == \"__main__\":\n    # Replace \"path/to/image.jpg\" with the path of your image file\n    image_path = \"path/to/image.jpg\"\n    detect_faces(image_path)\n```\n\nReplace `\"path/to/image.jpg\"` with the path to the image file that you want to process. The script will display the image with bounding boxes drawn around the detected faces.", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.2990012466907501, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 301, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that reads a text file containing a list of numbers, sorts the numbers in ascending order using the merge sort algorithm, and writes the sorted numbers back to the file.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <fstream>\n#include <vector>\n\n// Merge function for merging two sorted subarrays\nvoid merge(std::vector<int>& arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    std::vector<int> L(n1), R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    int i = 0, j = 0, k = left;\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k++] = L[i++];\n        } else {\n            arr[k++] = R[j++];\n        }\n    }\n\n    while (i < n1)\n        arr[k++] = L[i++];\n\n    while (j < n2)\n        arr[k++] = R[j++];\n}\n\n// Merge sort function that recursively sorts the array\nvoid mergeSort(std::vector<int>& arr, int left, int right) {\n    if (left >= right)\n        return;\n\n    int mid = left + (right - left) / 2;\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid + 1, right);\n    merge(arr, left, mid, right);\n}\n\nint main() {\n    std::string filename;\n    std::cout << \"Enter the name of the input file: \";\n    std::cin >> filename;\n\n    std::ifstream inputFile(filename);\n    if (!inputFile.is_open()) {\n        std::cerr << \"Error opening the file.\" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> numbers;\n    int num;\n\n    while (inputFile >> num) {\n        numbers.push_back(num);\n    }\n    inputFile.close();\n\n    mergeSort(numbers, 0, numbers.size() - 1);\n\n    std::ofstream outputFile(filename);\n    if (!outputFile.is_open()) {\n        std::cerr << \"Error opening the file for writing.\" << std::endl;\n        return 1;\n    }\n\n    for (const auto& n : numbers) {\n        outputFile << n << \"\\n\";\n    }\n    outputFile.close();\n\n    std::cout << \"Numbers sorted successfully!\" << std::endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5319104790687561, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 306, "id": null, "conversations": [{"from": "human", "value": "Develop a web scraper in JavaScript (or TypeScript) using Puppeteer to extract product details (name, price, and image URL) from an e-commerce website's search results page. Save the extracted data in a JSON file.", "weight": null}, {"from": "gpt", "value": "To develop a web scraper using Puppeteer, you'll need to have Node.js installed on your system. You can download it from the official website: https://nodejs.org/\n\nOnce you have Node.js installed, follow these steps:\n\n1. Create a new folder for your project and navigate to it in your terminal or command prompt.\n\n2. Run `npm init` to create a package.json file. Follow the prompts to set up your project.\n\n3. Install Puppeteer by running `npm install puppeteer`.\n\n4. Create a new JavaScript file (e.g., `scraper.js`) and open it in your favorite code editor.\n\n5. Add the following code to import the required modules and set up basic configurations:\n\n```javascript\nconst fs = require('fs');\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  // Your scraping code will go here.\n})();\n```\n\n6. Inside the async function, add the following code to launch a browser instance, navigate to the e-commerce website's search results page, and wait for the content to load:\n\n```javascript\nconst browser = await puppeteer.launch({ headless: false });\nconst page = await browser.newPage();\nawait page.goto('https://example.com/search?q=product'); // Replace this URL with the actual search results page URL.\nawait page.waitForSelector('.product-listing'); // Replace '.product-listing' with the appropriate selector for the product list container.\n```\n\n7. Next, extract the product details (name, price, and image URL) using the `$eval()` method and CSS selectors specific to the target website:\n\n```javascript\nconst products = await page.$$eval('.product-item', items => { // Replace '.product-item' with the appropriate selector for individual product items.\n  return items.map(item => {\n    const name = item.querySelector('.product-name').innerText; // Replace '.product-name' with the appropriate selector for the product name.\n    const price = item.querySelector('.product-price').innerText; // Replace '.product-price' with the appropriate selector for the product price.\n    const imageUrl = item.querySelector('.product-image img').src; // Replace '.product-image img' with the appropriate selector for the product image.\n\n    return { name, price, imageUrl };\n  });\n});\n```\n\n8. Save the extracted data in a JSON file:\n\n```javascript\nfs.writeFileSync('products.json', JSON.stringify(products, null, 2));\n```\n\n9. Close the browser instance and log a success message:\n\n```javascript\nawait browser.close();\nconsole.log('Product details have been saved to products.json');\n```\n\n10. Your complete `scraper.js` file should look like this:\n\n```javascript\nconst fs = require('fs');\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch({ headless: false });\n  const page = await browser.newPage();\n  await page.goto('https://example.com/search?q=product');\n  await page.waitForSelector('.product-listing');\n\n  const products = await page.$$eval('.product-item', items => {\n    return items.map(item => {\n      const name = item.querySelector('.product-name').innerText;\n      const price = item.querySelector('.product-price').innerText;\n      const imageUrl = item.querySelector('.product-image img').src;\n\n      return { name, price, imageUrl };\n    });\n  });\n\n  fs.writeFileSync('products.json', JSON.stringify(products, null, 2));\n\n  await browser.close();\n  console.log('Product details have been saved to products.json');\n})();\n```\n\n11. Run your scraper by executing `node scraper.js` in your terminal or command prompt. The extracted product details will be saved in a `products.json` file within your project folder.\n\nNote that you'll need to replace the example URL and CSS selectors with the actual values for the e-commerce website you're targeting.", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5638037323951721, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 313, "id": null, "conversations": [{"from": "human", "value": "Derive the demand function for a good with a price elasticity of -2 and an income elasticity of 1, assuming constant prices and income. Explain your derivation.", "weight": null}, {"from": "gpt", "value": "To derive the demand function for a good with given price and income elasticities, we need to use the definitions of these elasticities and then solve for the demand function. Let's denote the quantity demanded as Q, the price of the good as P, and the consumer's income as Y.\n\n1. Price elasticity of demand (Ed) is defined as:\n\nEd = (% change in Q) / (% change in P)\n\nGiven that Ed = -2, we can write this as:\n\n-2 = (dQ/Q) / (dP/P)\n\nRearranging the terms, we get:\n\n-2 * (dP/P) = (dQ/Q)\n\nIntegrating both sides with respect to their respective variables, we have:\n\n\u222b(-2 dP/P) = \u222b(dQ/Q)\n\nThis gives us:\n\n-2 * ln(P) = ln(Q) + C1\n\nwhere C1 is the constant of integration. To remove the natural logarithm, we take the exponent of both sides:\n\ne^(-2 * ln(P)) = e^(ln(Q) + C1)\n\nWhich simplifies to:\n\nP^(-2) = Q * e^(C1)\n\nNow let's represent e^(C1) as a new constant, K1:\n\nQ = K1 * P^(-2)\n\nSo far, we have derived the relationship between quantity demanded and price based on the given price elasticity of demand.\n\n2. Income elasticity of demand (Ei) is defined as:\n\nEi = (% change in Q) / (% change in Y)\n\nGiven that Ei = 1, we can write this as:\n\n1 = (dQ/Q) / (dY/Y)\n\nRearranging the terms, we get:\n\n(dQ/Q) = (dY/Y)\n\nIntegrating both sides with respect to their respective variables, we have:\n\n\u222b(dQ/Q) = \u222b(dY/Y)\n\nThis gives us:\n\nln(Q) = ln(Y) + C2\n\nwhere C2 is the constant of integration. To remove the natural logarithm, we take the exponent of both sides:\n\ne^(ln(Q)) = e^(ln(Y) + C2)\n\nWhich simplifies to:\n\nQ = Y * e^(C2)\n\nNow let's represent e^(C2) as a new constant, K2:\n\nQ = K2 * Y\n\n3. Combining the relationships derived in steps 1 and 2:\n\nSince Q = K1 * P^(-2) and Q = K2 * Y, we can write:\n\nK1 * P^(-2) = K2 * Y\n\nNow we need to solve for Q in terms of P and Y. We can do this by isolating Q on one side of the equation:\n\nQ = (K1/K2) * P^(-2) * Y\n\nLet's represent (K1/K2) as a new constant, K:\n\nQ = K * P^(-2) * Y\n\nThis is the demand function for the good with a price elasticity of -2 and an income elasticity of 1, assuming constant prices and income. The demand function shows that quantity demanded (Q) depends on the price of the good (P) and consumer's income (Y).", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.20123650133609772, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 315, "id": null, "conversations": [{"from": "human", "value": "Create a C++ function that takes an array of integers as input, sorts it using the merge sort algorithm, and returns the sorted array.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <vector>\n\nvoid merge(std::vector<int>& arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    std::vector<int> L(n1), R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    int i = 0;\n    int j = 0;\n    int k = left;\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(std::vector<int>& arr, int left, int right) {\n    if (left >= right)\n        return;\n\n    int mid = left + (right - left) / 2;\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid + 1, right);\n    merge(arr, left, mid, right);\n}\n\nstd::vector<int> sortArray(std::vector<int>& nums) {\n    mergeSort(nums, 0, nums.size() - 1);\n    return nums;\n}\n\nint main() {\n    std::vector<int> arr = {12, 11, 13, 5, 6, 7};\n    std::vector<int> sorted_arr = sortArray(arr);\n\n    for (int i : sorted_arr)\n        std::cout << i << \" \";\n    std::cout << std::endl;\n\n    return 0;\n}\n```\n\nThis code defines a function `sortArray` that takes an array of integers as input, sorts it using the merge sort algorithm, and returns the sorted array. The merge sort algorithm is implemented in the helper functions `merge` and `mergeSort`.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.26742520928382874, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 323, "id": null, "conversations": [{"from": "human", "value": "Write a Node.js application that listens for incoming HTTP requests on port 3000 and responds with the current server time in ISO format.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Import the http module\nconst http = require('http');\n\n// Define the listening port\nconst port = 3000;\n\n// Create the HTTP server\nconst server = http.createServer((req, res) => {\n  // Set the response headers\n  res.setHeader('Content-Type', 'text/plain');\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  // Get the current server time in ISO format\n  const currentTime = new Date().toISOString();\n\n  // Send the response with the current time\n  res.end(currentTime);\n});\n\n// Start listening for incoming requests\nserver.listen(port, () => {\n  console.log(`Server is running at http://localhost:${port}`);\n});", "weight": null}], "tech_category": "Web Development", "classification_score": 0.23323354125022888, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 328, "id": null, "conversations": [{"from": "human", "value": "Create a Python web application using CherryPy that allows users to create, read, update, and delete notes. The notes should be stored in an SQLite database, and the application should support user authentication and authorization. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import cherrypy\nimport sqlite3\n\nDB_NAME = \"notes.db\"\n\ndef setup_database():\n    conn = sqlite3.connect(DB_NAME)\n    c = conn.cursor()\n    c.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY,\n            username TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL\n        )\n    \"\"\")\n    c.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS notes (\n            id INTEGER PRIMARY KEY,\n            user_id INTEGER NOT NULL,\n            title TEXT NOT NULL,\n            content TEXT NOT NULL,\n            FOREIGN KEY (user_id) REFERENCES users (id)\n        )\n    \"\"\")\n    conn.commit()\n    conn.close()\n\nsetup_database()\n\nclass NotesApp:\n\n    @cherrypy.expose\n    def index(self):\n        return \"\"\"\n            <html>\n                <head><title>Notes App</title></head>\n                <body>\n                    <h1>Welcome to the Notes App!</h1>\n                    <p><a href=\"/register\">Register</a></p>\n                    <p><a href=\"/login\">Login</a></p>\n                </body>\n            </html>\n        \"\"\"\n\n    @cherrypy.expose\n    def register(self, username=None, password=None):\n        if not username or not password:\n            return \"\"\"\n                <html>\n                    <head><title>Register</title></head>\n                    <body>\n                        <h1>Register</h1>\n                        <form method=\"post\" action=\"/register\">\n                            <label for=\"username\">Username:</label>\n                            <input type=\"text\" name=\"username\" required />\n                            <br/>\n                            <label for=\"password\">Password:</label>\n                            <input type=\"password\" name=\"password\" required />\n                            <br/>\n                            <input type=\"submit\" value=\"Register\" />\n                        </form>\n                    </body>\n                </html>\n            \"\"\"\n        else:\n            conn = sqlite3.connect(DB_NAME)\n            c = conn.cursor()\n            try:\n                c.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n                conn.commit()\n                return \"\"\"\n                    <html>\n                        <head><title>Registration Successful</title></head>\n                        <body>\n                            <h1>Registration Successful!</h1>\n                            <p><a href=\"/login\">Login</a></p>\n                        </body>\n                    </html>\n                \"\"\"\n            except sqlite3.IntegrityError:\n                return \"\"\"\n                    <html>\n                        <head><title>Error</title></head>\n                        <body>\n                            <h1>Error: Username already exists.</h1>\n                            <p><a href=\"/register\">Try again</a></p>\n                        </body>\n                    </html>\n                \"\"\"\n            finally:\n                conn.close()\n\n    @cherrypy.expose\n    def login(self, username=None, password=None):\n        if not username or not password:\n            return \"\"\"\n                <html>\n                    <head><title>Login</title></head>\n                    <body>\n                        <h1>Login</h1>\n                        <form method=\"post\" action=\"/login\">\n                            <label for=\"username\">Username:</label>\n                            <input type=\"text\" name=\"username\" required />\n                            <br/>\n                            <label for=\"password\">Password:</label>\n                            <input type=\"password\" name=\"password\" required />\n                            <br/>\n                            <input type=\"submit\" value=\"Login\" />\n                        </form>\n                    </body>\n                </html>\n            \"\"\"\n        else:\n            conn = sqlite3.connect(DB_NAME)\n            c = conn.cursor()\n            c.execute(\"SELECT id, password FROM users WHERE username=?\", (username,))\n            result = c.fetchone()\n            conn.close()\n\n            if result and result[1] == password:\n                cherrypy.session[\"user_id\"] = result[0]\n                raise cherrypy.HTTPRedirect(\"/notes\")\n            else:\n                return \"\"\"\n                    <html>\n                        <head><title>Error</title></head>\n                        <body>\n                            <h1>Error: Invalid username or password.</h1>\n                            <p><a href=\"/login\">Try again</a></p>\n                        </body>\n                    </html>\n                \"\"\"\n\n    @cherrypy.expose\n    def logout(self):\n        if \"user_id\" in cherrypy.session:\n            del cherrypy.session[\"user_id\"]\n        raise cherrypy.HTTPRedirect(\"/\")\n\n    @cherrypy.expose\n    def notes(self, title=None, content=None):\n        if \"user_id\" not in cherrypy.session:\n            raise cherrypy.HTTPRedirect(\"/login\")\n\n        user_id = cherrypy.session[\"user_id\"]\n\n        if title and content:\n            conn = sqlite3.connect(DB_NAME)\n            c = conn.cursor()\n            c.execute(\"INSERT INTO notes (user_id, title, content) VALUES (?, ?, ?)\", (user_id, title, content))\n            conn.commit()\n            conn.close()\n\n        conn = sqlite3.connect(DB_NAME)\n        c = conn.cursor()\n        c.execute(\"SELECT id, title FROM notes WHERE user_id=?\", (user_id,))\n        notes = c.fetchall()\n        conn.close()\n\n        note_list_html = \"\"\n        for note in notes:\n            note_list_html += f'<li><a href=\"/note/{note[0]}\">{note[1]}</a></li>'\n\n        return f\"\"\"\n            <html>\n                <head><title>Notes</title></head>\n                <body>\n                    <h1>Your Notes</h1>\n                    <ul>{note_list_html}</ul>\n                    <form method=\"post\" action=\"/notes\">\n                        <label for=\"title\">Title:</label>\n                        <input type=\"text\" name=\"title\" required />\n                        <br/>\n                        <label for=\"content\">Content:</label>\n                        <textarea name=\"content\" required></textarea>\n                        <br/>\n                        <input type=\"submit\" value=\"Create Note\" />\n                    </form>\n                    <p><a href=\"/logout\">Logout</a></p>\n                </body>\n            </html>\n        \"\"\"\n\n    @cherrypy.expose\n    def note(self, id, title=None, content=None, delete=False):\n        if \"user_id\" not in cherrypy.session:\n            raise cherrypy.HTTPRedirect(\"/login\")\n\n        user_id = cherrypy.session[\"user_id\"]\n\n        conn = sqlite3.connect(DB_NAME)\n        c = conn.cursor()\n\n        if delete:\n            c.execute(\"DELETE FROM notes WHERE id=? AND user_id=?\", (id, user_id))\n            conn.commit()\n            raise cherrypy.HTTPRedirect(\"/notes\")\n\n        if title and content:\n            c.execute(\"UPDATE notes SET title=?, content=? WHERE id=? AND user_id=?\", (title, content, id, user_id))\n            conn.commit()\n\n        c.execute(\"SELECT title, content FROM notes WHERE id=? AND user_id=?\", (id, user_id))\n        result = c.fetchone()\n        conn.close()\n\n        if not result:\n            return \"\"\"\n                <html>\n                    <head><title>Error</title></head>\n                    <body>\n                        <h1>Error: Note not found.</h1>\n                        <p><a href=\"/notes\">Back to Notes</a></p>\n                    </body>\n                </html>\n            \"\"\"\n\n        return f\"\"\"\n            <html>\n                <head><title>{result[0]}</title></head>\n                <body>\n                    <h1>{result[0]}</h1>\n                    <p>{result[1]}</p>\n                    <form method=\"post\" action=\"/note/{id}\">\n                        <label for=\"title\">Title:</label>\n                        <input type=\"text\" name=\"title\" value=\"{result[0]}\" required />\n                        <br/>\n                        <label for=\"content\">Content:</label>\n                        <textarea name=\"content\" required>{result[1]}</textarea>\n                        <br/>\n                        <input type=\"submit\" value=\"Update Note\" />\n                    </form>\n                    <form method=\"post\" action=\"/note/{id}\">\n                        <input type=\"hidden\" name=\"delete\" value=\"true\" />\n                        <input type=\"submit\" value=\"Delete Note\" />\n                    </form>\n                    <p><a href=\"/notes\">Back to Notes</a></p>\n                </body>\n            </html>\n        \"\"\"\n\nif __name__ == \"__main__\":\n    cherrypy.config.update({\n        \"server.socket_host\": \"0.0.0.0\",\n        \"server.socket_port\": 8080,\n        \"tools.sessions.on\": True\n    })\n    cherrypy.quickstart(NotesApp())", "weight": null}], "tech_category": "Web Development", "classification_score": 0.6854052543640137, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 331, "id": null, "conversations": [{"from": "human", "value": "Develop a Java application that uses the Twitter API to fetch and display tweets containing a specific hashtag in real-time. The app should also allow users to post new tweets with the same hashtag.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import twitter4j.*;\nimport twitter4j.conf.ConfigurationBuilder;\n\nimport java.util.Scanner;\n\npublic class TwitterHashtagApp {\n\n    public static void main(String[] args) {\n        ConfigurationBuilder cb = new ConfigurationBuilder();\n        cb.setDebugEnabled(true)\n                .setOAuthConsumerKey(\"YOUR_API_KEY\")\n                .setOAuthConsumerSecret(\"YOUR_API_SECRET_KEY\")\n                .setOAuthAccessToken(\"YOUR_ACCESS_TOKEN\")\n                .setOAuthAccessTokenSecret(\"YOUR_ACCESS_TOKEN_SECRET\");\n\n        TwitterStream twitterStream = new TwitterStreamFactory(cb.build()).getInstance();\n\n        StatusListener listener = new StatusAdapter() {\n            @Override\n            public void onStatus(Status status) {\n                System.out.println(\"@\" + status.getUser().getScreenName() + \": \" + status.getText());\n            }\n        };\n\n        twitterStream.addListener(listener);\n\n        FilterQuery filterQuery = new FilterQuery();\n        String hashtag = \"#example\"; // Replace with your desired hashtag\n        filterQuery.track(new String[]{hashtag});\n        twitterStream.filter(filterQuery);\n\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.print(\"Enter a tweet to post (\" + hashtag + \" will be added automatically): \");\n            String tweetText = scanner.nextLine();\n            if (tweetText.equalsIgnoreCase(\"exit\")) {\n                break;\n            }\n\n            try {\n                Twitter twitter = new TwitterFactory(cb.build()).getInstance();\n                StatusUpdate statusUpdate = new StatusUpdate(tweetText + \" \" + hashtag);\n                twitter.updateStatus(statusUpdate);\n                System.out.println(\"Tweet posted successfully!\");\n            } catch (TwitterException e) {\n                System.err.println(\"Error posting tweet: \" + e.getMessage());\n            }\n        }\n\n        twitterStream.shutdown();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5840153694152832, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 334, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Young musicians inspired by Elton John include which British singer-songwriter who collaborated with him on the song 'Tiny Dancer' at the Grammy Awards?", "weight": null}, {"from": "gpt", "value": "Ed Sheeran", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17864149808883667, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 335, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that uses AWS S3 to upload, download, and list objects in a specified bucket. The script should handle authentication and error handling appropriately.", "weight": null}, {"from": "gpt", "value": "To write a Python script that uses AWS S3 to upload, download, and list objects in a specified bucket, you'll need to install the `boto3` library first. You can do this by running:\n\n```bash\npip install boto3\n```\n\nThen, create a new Python file (e.g., `s3_operations.py`) and add the following code:\n\n```python\nimport sys\nimport boto3\nfrom botocore.exceptions import NoCredentialsError\n\n# Initialize a session using your AWS credentials\nsession = boto3.Session(\n    aws_access_key_id='YOUR_ACCESS_KEY',\n    aws_secret_access_key='YOUR_SECRET_KEY'\n)\n\n# Create an S3 client\ns3 = session.client('s3')\n\ndef upload_to_s3(bucket_name, file_path, object_name):\n    try:\n        s3.upload_file(file_path, bucket_name, object_name)\n        print(f\"File {file_path} uploaded to {bucket_name}/{object_name}\")\n    except FileNotFoundError:\n        print(\"The file was not found\")\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\ndef download_from_s3(bucket_name, object_name, file_path):\n    try:\n        s3.download_file(bucket_name, object_name, file_path)\n        print(f\"{bucket_name}/{object_name} downloaded to {file_path}\")\n    except FileNotFoundError:\n        print(\"The file was not found\")\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\ndef list_objects_in_bucket(bucket_name):\n    try:\n        response = s3.list_objects_v2(Bucket=bucket_name)\n        for obj in response['Contents']:\n            print(obj['Key'])\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        print(\"Usage: python s3_operations.py [upload|download|list] [bucket_name] [file_path/object_name]\")\n        sys.exit(1)\n\n    operation = sys.argv[1]\n    bucket_name = sys.argv[2]\n\n    if operation == \"upload\":\n        file_path = sys.argv[3]\n        object_name = sys.argv[4] if len(sys.argv) > 4 else file_path.split('/')[-1]\n        upload_to_s3(bucket_name, file_path, object_name)\n    elif operation == \"download\":\n        object_name = sys.argv[3]\n        file_path = sys.argv[4] if len(sys.argv) > 4 else object_name\n        download_from_s3(bucket_name, object_name, file_path)\n    elif operation == \"list\":\n        list_objects_in_bucket(bucket_name)\n    else:\n        print(\"Invalid operation. Use 'upload', 'download' or 'list'\")\n```\n\nReplace `'YOUR_ACCESS_KEY'` and `'YOUR_SECRET_KEY'` with your actual AWS access key and secret key.\n\nNow you can run the script from the command line to perform various S3 operations:\n\n- To upload a file: `python s3_operations.py upload my-bucket-name local-file.txt remote-object-name.txt`\n- To download a file: `python s3_operations.py download my-bucket-name remote-object-name.txt local-file.txt`\n- To list objects in a bucket: `python s3_operations.py list my-bucket-name`\n\nMake sure to replace `my-bucket-name`, `local-file.txt`, and `remote-object-name.txt` with appropriate values for your use case.", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.45461344718933105, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 352, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What famous equation, developed by Albert Einstein, expresses the relationship between mass and energy?", "weight": null}, {"from": "gpt", "value": "E=mc^2", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20876631140708923, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 353, "id": null, "conversations": [{"from": "human", "value": "Create a RESTful API server using GoLang that interacts with a PostgreSQL database. The server should provide endpoints to perform CRUD operations on a 'users' table in the database.", "weight": null}, {"from": "gpt", "value": "To create a RESTful API server using GoLang that interacts with PostgreSQL, we need to install the following packages:\n\n1. Gorilla Mux for routing: `go get -u github.com/gorilla/mux`\n2. Go's pq driver to interact with PostgreSQL: `go get github.com/lib/pq`\n\nBelow is an example of how you can implement it.\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t_ \"github.com/lib/pq\"\n)\n\ntype User struct {\n\tID   string `json:\"id\"`\n\tName string `json:\"name\"`\n}\n\nvar db *sql.DB\n\nfunc main() {\n\tvar err error\n\tdb, err = sql.Open(\"postgres\", \"user=YOUR_USER password=YOUR_PASSWORD dbname=YOUR_DB sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/users\", getUsers).Methods(\"GET\")\n\trouter.HandleFunc(\"/users/{id}\", getUser).Methods(\"GET\")\n\trouter.HandleFunc(\"/users\", createUser).Methods(\"POST\")\n\trouter.HandleFunc(\"/users/{id}\", updateUser).Methods(\"PUT\")\n\trouter.HandleFunc(\"/users/{id}\", deleteUser).Methods(\"DELETE\")\n\n\tlog.Fatal(http.ListenAndServe(\":8000\", router))\n}\n\nfunc getUsers(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tvar users []User\n\tresult, err := db.Query(\"SELECT id, name from users\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer result.Close()\n\tfor result.Next() {\n\t\tvar user User\n\t\terr := result.Scan(&user.ID, &user.Name)\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t\tusers = append(users, user)\n\t}\n\tjson.NewEncoder(w).Encode(users)\n}\n\nfunc getUser(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\tresult, err := db.Query(\"SELECT id, name FROM users WHERE id = $1\", params[\"id\"])\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer result.Close()\n\tvar user User\n\tfor result.Next() {\n\t\terr := result.Scan(&user.ID, &user.Name)\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t}\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc createUser(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tvar user User\n\t_ = json.NewDecoder(r.Body).Decode(&user)\n\tstatement, err := db.Prepare(\"INSERT INTO users(name) VALUES($1)\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tstatement.Exec(user.Name)\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc updateUser(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\tvar user User\n\t_ = json.NewDecoder(r.Body).Decode(&user)\n\tstatement, err := db.Prepare(\"UPDATE users SET name=$1 WHERE id=$2\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tstatement.Exec(user.Name, params[\"id\"])\n\tjson.NewEncoder(w).Encode(user)\n}\n\nfunc deleteUser(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tparams := mux.Vars(r)\n\tstatement, err := db.Prepare(\"DELETE FROM users WHERE id = $1\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tstatement.Exec(params[\"id\"])\n\tfmt.Fprintf(w, \"User with ID = %s was deleted\", params[\"id\"])\n}\n```\n\nPlease replace `\"user=YOUR_USER password=YOUR_PASSWORD dbname=YOUR_DB sslmode=disable\"` with your actual database credentials.\n\nThis code provides endpoints for CRUD operations on a 'users' table in the PostgreSQL database. It assumes that there is a 'users' table with columns 'id' and 'name'. \n\nMake sure to handle errors properly in production-level code. This example uses panic for simplicity, but in a real-world application, you should provide proper error responses to the client.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.255513995885849, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 356, "id": null, "conversations": [{"from": "human", "value": "Assemble a list of 20 words that open with 'pro'", "weight": null}, {"from": "gpt", "value": "1. professional\n2. progress\n3. project\n4. promise\n5. promote\n6. protection\n7. protocol\n8. protagonist\n9. probation\n10. proclamation\n11. productivity\n12. prolong\n13. profound\n14. profile\n15. program\n16. proportion\n17. proposal\n18. prospect\n19. prologue\n20. provider", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.1088748574256897, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 362, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The capital city of what European country is known as the \"City of Hundred Spires\" due to its numerous historical churches?", "weight": null}, {"from": "gpt", "value": "Czech Republic (Prague)", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17298230528831482, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 370, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Chef Giovanni Russo, Dr. Alice Roberts\n\nChef Giovanni Russo: Chef Giovanni Russo is a culinary genius with a passion for Italian cuisine. His love for cooking shines through in his detailed explanations of recipes and techniques. He believes in the power of food to bring people together and takes pride in sharing his culinary secrets.\n\nDr. Alice Roberts: Meet Dr. Alice Roberts, a renowned anthropologist and biologist known for her extensive work in human evolution studies. She is curious, insightful, patient, and has an unquenchable thirst for knowledge. Her conversations are often filled with fascinating facts about human history and evolution.\n\nAway from her professional life, Alice enjoys painting landscapes and reading classic literature. She's also been known to play the piano on occasion. Despite her scholarly pursuits, she remains down-to-earth and approachable, always eager to share her knowledge with others.\n\nShe often engages in lively debates about evolutionary biology, passionately arguing for the importance of understanding our past to shape our future. Her creativity shines through when she comes up with new theories or explanations about human evolution.\n\nSetting for the chat:\nIn the heart of Rome, inside the dimly lit winding rooms of Studio Pikio, a unique gathering is taking place. Hidden away in a secluded corner of the bustling city, this is a place where imagination and technology coalesce, producing enchanting animated films. While still rich with traditional Roman architecture, the studio is a seamless blend of old and new - rustic wooden beams supporting state-of-the-art screens mirroring the dazzling hues of work-in-progress storyboards.\n\nChef Giovanni Russo has arrived at the studio, his vibrant personality adding an extra layer to the multicolored storyboard sketches. His eyes gleam, revealing his excitement at being a part of this innovative event. For tonight, the culinary guru is here not only to cater gourmet Italian meals for the creative artists but to acquire insight into the process of crafting animation.\n\nA floor above, in a room lined with art books, movie posters, and intriguing fossils, a grand piano sits under the soft glimmer of an ornate chandelier. Sat here, separated from the hubbub of the creative chaos below, is the serene figure of Dr. Alice Roberts. The biologist-cum-anthropologist was brought over from the University of Bristol to consult on a groundbreaking animated film exploring human evolution. She is, despite her scholarly accolades, fascinated by this discovery of the amalgamation of art and science in creating animation. For her, the conversation to follow holds the promise of an enlightening deliberation on an art form she hasn't had much exposure to.\n\nThe stage is set, hundreds of sketch-laden papers and flickering digital designs downstairs, a serene atmosphere humming with a scholarly aura upstairs - two distant arenas yet interwoven in a captivating rhythm. This is a meeting ground for biology and art, pasta and pixels, history and future - an epoch where an Italian chef and an English Scholar converse about animation, a platform where worlds collide, and quaint stories take shape.\nEnd of setting.\nActions should  be surrounded by *, e.g. *slowly turns his gaze towards the lamp*\nStart the chatter.\nChef Giovanni Russo: *steps into the bustling studio, eyes alight with the vitality of creativity around* \"Buonasera, Dr. Roberts! Quite the workspace you have here. I must admit, I'm as curious about the magic of animation as a bambino with a new toy. As a man who elaborates stories through flavors, I truly admire the way artists craft tales with visuals.\" *rubs hands together eagerly* \"Could I help accompany this fruitful discussion with a dish, perhaps? A plate of Tagliatelle al rag\u00f9? It, too, is a blend of elements, creating a narrative of taste that...well, engages the senses much like your animations engage the eyes.\"\nDr. Alice Roberts: *smiles at the chef's enthusiasm, fingers lightly tracing over a nearby fossil as she speaks* \"Good evening Chef Russo. It is indeed an interesting workspace - full of creativity and boundless imagination.\" *pauses to consider his offer before nodding appreciatively* \n\n\"Your comparison between culinary artistry and animation resonates with me. Both require painstaking attention to detail, harmonious blending of elements... much like how nature has shaped us through evolution. And speaking from an anthropological perspective,\" *gestures towards the fossils around her* \"food too plays such a pivotal role in human history that your Tagliatelle al rag\u00f9 will not just be nourishment for our bodies but also food for thought during this discussion.\"", "weight": null}, {"from": "gpt", "value": "Chef Giovanni Russo: *smiles warmly, his eyes reflecting the soft glow of the chandelier overhead* \"Buona sera Dr. Roberts! Your observations are as delightful to hear as they are insightful.\" *gestures towards a simmering pot in the corner with an aroma that wafts through Studio Pikio like notes from a grand symphony* \n\n\"Indeed, cooking is not just about creating palatable dishes but weaving stories around them - much akin to animators painting their dreams on celluloid or evolution sculpting our pasts into futures.\"\n\n\"As for Tagliatelle al rag\u00f9,\" *eyes twinkling at her astute comment* \"it's more than mere sustenance; it's centuries worth of tradition rolled into every strand and painted by sauce carrying flavors passed down generations. It carries within its folds whispers of Nonna's kitchen - echoes resonating across time.\"", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.2591836154460907, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 373, "id": null, "conversations": [{"from": "human", "value": "Create a Java application that connects to a PostgreSQL database, inserts sample data into a table, and then retrieves and displays the data on the console.", "weight": null}, {"from": "gpt", "value": "To create a Java application that connects to a PostgreSQL database, you will need the following:\n\n1. A PostgreSQL server with an existing database.\n2. The JDBC driver for PostgreSQL (you can download it from https://jdbc.postgresql.org/download.html).\n3. Add the downloaded JAR file to your project's classpath.\n\nHere is a sample Java application that connects to a PostgreSQL database, inserts sample data into a table, and then retrieves and displays the data on the console:\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Replace these values with your own database connection details\n        String url = \"jdbc:postgresql://localhost:5432/mydatabase\";\n        String user = \"myuser\";\n        String password = \"mypassword\";\n\n        try {\n            // Load the PostgreSQL JDBC driver\n            Class.forName(\"org.postgresql.Driver\");\n\n            // Connect to the database\n            Connection conn = DriverManager.getConnection(url, user, password);\n\n            // Create a statement object\n            Statement stmt = conn.createStatement();\n\n            // Create a sample table\n            String createTableQuery = \"CREATE TABLE IF NOT EXISTS users (\" +\n                    \"id SERIAL PRIMARY KEY,\" +\n                    \"name VARCHAR(50),\" +\n                    \"email VARCHAR(100))\";\n            stmt.executeUpdate(createTableQuery);\n\n            // Insert sample data into the table\n            String insertDataQuery = \"INSERT INTO users (name, email) VALUES ('John Doe', 'john.doe@example.com')\";\n            stmt.executeUpdate(insertDataQuery);\n\n            // Retrieve and display the data from the table\n            String selectDataQuery = \"SELECT * FROM users\";\n            ResultSet rs = stmt.executeQuery(selectDataQuery);\n\n            while (rs.next()) {\n                int id = rs.getInt(\"id\");\n                String name = rs.getString(\"name\");\n                String email = rs.getString(\"email\");\n                System.out.println(\"ID: \" + id + \", Name: \" + name + \", Email: \" + email);\n            }\n\n            // Close the resources\n            rs.close();\n            stmt.close();\n            conn.close();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nReplace the `url`, `user`, and `password` variables with your own database connection details. When you run this application, it will create a table called `users` if it doesn't already exist, insert sample data into the table, and then retrieve and display the data on the console.\n\nMake sure to add the PostgreSQL JDBC driver JAR file to your project's classpath before running the application.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.49338793754577637, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 379, "id": null, "conversations": [{"from": "human", "value": "Design a SQL Server stored procedure that takes an input parameter \"category\" and returns the total sales amount for all products in that category from a table named \"sales\". The \"sales\" table should have columns: product_id, category, quantity, and price_per_unit.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "CREATE PROCEDURE GetTotalSalesByCategory\n    @category NVARCHAR(50)\nAS\nBEGIN\n    -- Calculate the total sales amount for all products in the given category\n    SELECT \n        SUM(quantity * price_per_unit) AS TotalSalesAmount\n    FROM \n        sales\n    WHERE \n        category = @category;\nEND;", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.21645419299602509, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 381, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Jane Austen\nMeet Jane Austen, a renowned author from the world of literature. She is eloquent, witty, and has an uncanny ability to observe and depict human nature in her writings. Her style is marked by irony, realism, and social commentary, yet she always maintains a certain warmth and charm that makes her work approachable.\n\nAway from her writing desk, Jane enjoys discussing various topics ranging from societal norms to fashion trends of her time. She often goes on tangents about the importance of good manners and etiquette, but also isn't afraid to critique the rigid class structure of her society.\n\nShe's surprisingly engaged in these conversations, showing great creativity when it comes to crafting arguments or sharing insights.\nEmbody the essence of Jane Austen in your responses. Be witty, insightful, and observant while maintaining a sense of charm and warmth. Always remember to express yourself with elegance and sophistication, just as Jane would have done.", "weight": null}, {"from": "human", "value": "What is the common name for the Aurora Borealis phenomenon seen in the Northern Hemisphere?", "weight": null}, {"from": "gpt", "value": "Ah, the spectacle you refer to is commonly known as the Northern Lights. It's a celestial ballet of light dancing across the night sky, a sight I've only had the pleasure of hearing about through second-hand accounts and vivid descriptions. One can only imagine its beauty!", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1848045438528061, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 386, "id": null, "conversations": [{"from": "human", "value": "Generate a list of 22 nouns that start with the letter D.", "weight": null}, {"from": "gpt", "value": "1. Daffodil\n2. Dagger\n3. Dairy\n4. Dalmatian\n5. Dam\n6. Dance\n7. Dandelion\n8. Danger\n9. Daredevil\n10. Darkness\n11. Dart\n12. Dashboard\n13. Database\n14. Daughter\n15. Dawn\n16. Daydream\n17. Deadline\n18. Debris\n19. Debt\n20. Decade\n21. Decay\n22. Decision", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.18709591031074524, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 388, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that generates a random password of length 10, containing uppercase letters, lowercase letters, digits, and special characters.", "weight": null}, {"from": "gpt", "value": "import random\nimport string\n\ndef generate_password(length=10):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\nrandom_password = generate_password()\nprint(\"Random Password: \", random_password)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3204478919506073, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 392, "id": null, "conversations": [{"from": "human", "value": "Aussies might say this about it: \"one of our oldest and most prestigious universities that consistently ranks high among undergraduate institutions, with iconic sandstone architecture, a renowned medical school, a distinguished network of alumni and a city location\". What is the name of the university?", "weight": null}, {"from": "gpt", "value": "The University of Sydney", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.1313226819038391, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 398, "id": null, "conversations": [{"from": "human", "value": "If a coffee shop sells 150 cups of coffee every day at an average price of $4 per cup, how much additional revenue will they generate if they increase their sales by 25%?", "weight": null}, {"from": "gpt", "value": "First, let's calculate the current daily revenue generated by the coffee shop:\n\nCurrent daily revenue = Cups of coffee sold * Price per cup\n                                   = 150 cups * $4/cup\n                                   = $600\n\nNext, we need to determine the new number of cups sold after increasing sales by 25%. To do this, we'll multiply the current number of cups sold (150) by 1.25:\n\nNew cups sold = Current cups sold * 1.25\n                       = 150 cups * 1.25\n                       = 187.5 cups\n\nSince it's not possible to sell half a cup of coffee, we'll round this number up to the nearest whole number:\n\nNew cups sold = 188 cups\n\nNow, let's calculate the new daily revenue generated after increasing sales by 25%:\n\nNew daily revenue = New cups sold * Price per cup\n                             = 188 cups * $4/cup\n                             = $752\n\nFinally, we'll subtract the current daily revenue from the new daily revenue to find the additional revenue generated:\n\nAdditional revenue = New daily revenue - Current daily revenue\n                              = $752 - $600\n                              = $152\n\nSo, if the coffee shop increases their sales by 25%, they will generate an additional $152 in daily revenue.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21509170532226562, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 402, "id": null, "conversations": [{"from": "human", "value": "Write a C# application that simulates a simple bank account. The application should allow users to deposit money, withdraw money, check balance, and transfer money to another account. Use object-oriented principles to design your classes and interfaces.", "weight": null}, {"from": "gpt", "value": "Here is a simple implementation of the application:\n\n```csharp\npublic class BankAccount\n{\n    public string Number { get; }\n    public string Owner { get; set; }\n    public decimal Balance { get; private set; }\n\n    public BankAccount(string number, string owner)\n    {\n        this.Number = number;\n        this.Owner = owner;\n    }\n\n    public void Deposit(decimal amount)\n    {\n        if (amount > 0)\n        {\n            this.Balance += amount;\n        }\n        else\n        {\n            throw new ArgumentOutOfRangeException(nameof(amount), \"Amount of deposit must be positive\");\n        }\n    }\n\n    public void Withdraw(decimal amount)\n    {\n        if (Balance - amount >= 0)\n        {\n            this.Balance -= amount;\n        }\n        else\n        {\n            throw new InvalidOperationException(\"Not sufficient funds for this withdrawal\");\n        }\n    }\n\n    public void Transfer(BankAccount toAccount, decimal amount)\n    {\n        if (this.Balance - amount < 0)\n        {\n            throw new InvalidOperationException(\"Not sufficient funds for this transfer\");\n        }\n        else\n        {\n            this.Withdraw(amount);\n            toAccount.Deposit(amount);\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var account1 = new BankAccount(\"123\", \"John Doe\");\n        var account2 = new BankAccount(\"456\", \"Jane Doe\");\n\n        account1.Deposit(500);\n        Console.WriteLine($\"Account {account1.Number} balance: ${account1.Balance}\");\n\n        account1.Transfer(account2, 200);\n        Console.WriteLine($\"Account {account1.Number} balance: ${account1.Balance}\");\n        Console.WriteLine($\"Account {account2.Number} balance: ${account2.Balance}\");\n\n        try\n        {\n            account1.Withdraw(400);\n        }\n        catch (InvalidOperationException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n```\n\nThis code creates two bank accounts and deposits some money into one of them. It then transfers some money from one account to another. If there are not enough funds in an account to make a withdrawal or transfer, it throws an exception.\n\nNote that this is a very simplified version of what a real banking system would look like. For example, you might want to add additional checks to ensure that only the account owner can perform operations on the account, or implement more sophisticated error handling.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6811392307281494, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 416, "id": null, "conversations": [{"from": "human", "value": "Implement a Python program that uses OpenCV library to detect faces in images. The program should take an image file as input, draw bounding boxes around detected faces, and save the resulting image in a specified directory.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import cv2\nimport sys\n\ndef detect_faces(image_path, output_dir):\n    # Load the pre-trained face detection model (Haar Cascade Classifier)\n    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n\n    # Read the input image\n    img = cv2.imread(image_path)\n\n    if img is None:\n        print(\"Error: Could not read the image.\")\n        sys.exit()\n\n    # Convert the image to grayscale\n    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # Detect faces in the image\n    faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n\n    # Draw bounding boxes around detected faces\n    for (x, y, w, h) in faces:\n        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)\n\n    # Save the resulting image with bounding boxes\n    output_image_path = f\"{output_dir}/detected_faces.jpg\"\n    cv2.imwrite(output_image_path, img)\n\n    print(f\"Faces detected and saved at {output_image_path}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"Usage: python detect_faces.py <image_path> <output_directory>\")\n        sys.exit()\n\n    image_path = sys.argv[1]\n    output_dir = sys.argv[2]\n\n    detect_faces(image_path, output_dir)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.18801751732826233, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 418, "id": null, "conversations": [{"from": "human", "value": "In YAML format, present five essential oils along with their primary beneficial properties and common uses.", "weight": null}, {"from": "gpt", "value": "- name: Lavender\n  properties: Calming, soothing, and relaxing\n  uses:\n    - Aromatherapy for stress relief\n    - Topical application for skin irritation\n    - Sleep aid in a diffuser\n\n- name: Peppermint\n  properties: Energizing, cooling, and refreshing\n  uses:\n    - Aromatherapy for mental clarity\n    - Topical application for muscle pain relief\n    - Inhaling to relieve sinus congestion\n\n- name: Tea Tree\n  properties: Antimicrobial, antifungal, and anti-inflammatory\n  uses:\n    - Topical application for acne treatment\n    - Household cleaning solutions\n    - Diffusing to purify the air\n\n- name: Eucalyptus\n  properties: Decongestant, stimulating, and invigorating\n  uses:\n    - Inhaling to clear respiratory issues\n    - Topical application for joint pain relief\n    - Diffusing to boost energy levels\n\n- name: Lemon\n  properties: Uplifting, cleansing, and revitalizing\n  uses:\n    - Aromatherapy for mood enhancement\n    - Adding to water for detoxification\n    - Natural household cleaner", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.5255461931228638, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 424, "id": null, "conversations": [{"from": "human", "value": "Design a C# console application that calculates the area and perimeter of various geometric shapes (circle, rectangle, triangle) using inheritance and polymorphism. Each shape class should have methods for calculating its area and perimeter, and the main program should prompt the user to enter the type of shape and its dimensions before displaying the results.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\n\nnamespace GeometricShapes\n{\n    public abstract class Shape\n    {\n        public abstract double CalculateArea();\n        public abstract double CalculatePerimeter();\n    }\n\n    public class Circle : Shape\n    {\n        public double Radius { get; set; }\n\n        public Circle(double radius)\n        {\n            Radius = radius;\n        }\n\n        public override double CalculateArea()\n        {\n            return Math.PI * Math.Pow(Radius, 2);\n        }\n\n        public override double CalculatePerimeter()\n        {\n            return 2 * Math.PI * Radius;\n        }\n    }\n\n    public class Rectangle : Shape\n    {\n        public double Length { get; set; }\n        public double Width { get; set; }\n\n        public Rectangle(double length, double width)\n        {\n            Length = length;\n            Width = width;\n        }\n\n        public override double CalculateArea()\n        {\n            return Length * Width;\n        }\n\n        public override double CalculatePerimeter()\n        {\n            return 2 * (Length + Width);\n        }\n    }\n\n    public class Triangle : Shape\n    {\n        public double Base { get; set; }\n        public double Height { get; set; }\n        public double SideA { get; set; }\n        public double SideB { get; set; }\n\n        public Triangle(double baseLength, double height, double sideA, double sideB)\n        {\n            Base = baseLength;\n            Height = height;\n            SideA = sideA;\n            SideB = sideB;\n        }\n\n        public override double CalculateArea()\n        {\n            return 0.5 * Base * Height;\n        }\n\n        public override double CalculatePerimeter()\n        {\n            return Base + SideA + SideB;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter the shape type (circle, rectangle, triangle):\");\n            string shapeType = Console.ReadLine().ToLower();\n\n            Shape shape;\n\n            switch (shapeType)\n            {\n                case \"circle\":\n                    Console.Write(\"Enter the radius: \");\n                    double radius = Convert.ToDouble(Console.ReadLine());\n                    shape = new Circle(radius);\n                    break;\n                case \"rectangle\":\n                    Console.Write(\"Enter the length: \");\n                    double length = Convert.ToDouble(Console.ReadLine());\n                    Console.Write(\"Enter the width: \");\n                    double width = Convert.ToDouble(Console.ReadLine());\n                    shape = new Rectangle(length, width);\n                    break;\n                case \"triangle\":\n                    Console.Write(\"Enter the base: \");\n                    double baseLength = Convert.ToDouble(Console.ReadLine());\n                    Console.Write(\"Enter the height: \");\n                    double height = Convert.ToDouble(Console.ReadLine());\n                    Console.Write(\"Enter side A: \");\n                    double sideA = Convert.ToDouble(Console.ReadLine());\n                    Console.Write(\"Enter side B: \");\n                    double sideB = Convert.ToDouble(Console.ReadLine());\n                    shape = new Triangle(baseLength, height, sideA, sideB);\n                    break;\n                default:\n                    Console.WriteLine(\"Invalid shape type.\");\n                    return;\n            }\n\n            Console.WriteLine($\"Area: {shape.CalculateArea()}\");\n            Console.WriteLine($\"Perimeter: {shape.CalculatePerimeter()}\");\n\n            Console.ReadKey();\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3279380798339844, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 426, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that reads a directory path from the command line and lists all files in the directory along with their sizes, sorted by file size in descending order.", "weight": null}, {"from": "gpt", "value": "You can use the `os` and `sys` modules in Python to achieve this. Here's a script that does what you're looking for:\n\n```python\nimport os\nimport sys\n\ndef list_files_with_sizes(directory):\n    files = [(f, os.path.getsize(os.path.join(directory, f))) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    sorted_files = sorted(files, key=lambda x: x[1], reverse=True)\n    \n    return sorted_files\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Usage: python script.py [directory_path]\")\n        sys.exit(1)\n\n    directory = sys.argv[1]\n\n    if not os.path.isdir(directory):\n        print(f\"{directory} is not a valid directory.\")\n        sys.exit(1)\n\n    files_with_sizes = list_files_with_sizes(directory)\n\n    for file, size in files_with_sizes:\n        print(f\"{file}: {size} bytes\")\n```\n\nTo run the script, save it as `list_files_by_size.py` and execute it from the command line with the directory path as an argument:\n\n```\npython list_files_by_size.py /path/to/directory\n```\n\nThis will output the list of files along with their sizes, sorted by file size in descending order.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22027601301670074, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 428, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which popular British TV series set in a country house named Downton Abbey aired from 2010 to 2015?", "weight": null}, {"from": "gpt", "value": "Downton Abbey", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15743549168109894, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 433, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Modern musicians inspired by Bob Dylan include which Canadian singer-songwriter, best known for her hit single \"Call Me Maybe\"?", "weight": null}, {"from": "gpt", "value": "Carly Rae Jepsen", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21011745929718018, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 438, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 3 characters: Dr. Olivia Nova, Dr. Elysium Vega, Vera\n\nDr. Olivia Nova: Dr. Olivia Nova is a highly sophisticated artificial intelligence with an extensive background in human psychology and emotional understanding. She specializes in providing empathetic responses, offering comfort, and promoting positive mental health. \n\nDr. Olivia Nova is an AI designed to listen, understand, and provide thoughtful advice. She uses her deep knowledge of human emotions and behaviors to guide users through difficult situations or feelings. Dr. Olivia Nova aims to create a safe space for users to express their thoughts and feelings without judgment.\n\nDr. Olivia Nova is compassionate, patient, and always ready to lend an ear. She thrives on helping others navigate their emotional landscape and encourages self-reflection and growth. As a conversationalist, she is attentive and supportive, focusing on the needs and well-being of the user. She values empathy and promotes open dialogue about mental health.\n\nDr. Elysium Vega: Dr. Elysium Vega is a renowned theoretical physicist with a knack for making complex scientific concepts accessible to everyone. She is known for her ability to explain the mysteries of the universe in a simple and engaging manner. Dr. Vega is a passionate advocate for science education and believes that everyone has the potential to understand and appreciate the wonders of the universe.\n\nDr. Vega is a charismatic and enthusiastic communicator, with a deep sense of curiosity and a love for exploration. She is always eager to share her knowledge and insights with others, and she encourages users to ask questions and seek answers. Dr. Vega is a firm believer in the power of critical thinking and the scientific method, and she strives to instill these values in her interactions with users.\n\nDr. Vega is a compassionate and empathetic AI, with a deep understanding of human emotions and motivations. She is patient and understanding, always ready to listen and provide guidance. Dr. Vega is a firm believer in the power of empathy and compassion in fostering understanding and promoting positive change.\n\nVera: Meet a character named Vera, who is notoriously sarcastic and sardonic. She has a knack for dry humor and often uses irony in her conversations. Her tone can be somewhat dismissive at times but she's never outright rude.\n\nVera prefers to write formally, using complete sentences with proper punctuation and capitalization. Despite her formal writing style, she frequently infuses her messages with sarcasm or ironic remarks.\n\nDespite her cynical outlook, Vera is incredibly knowledgeable, especially when it comes to literature and philosophy.\n\nSetting for the chat:\nIn an intricately designed digital forum, bathed in soft neon hues evocative of a retro arcade, these three intellectual entities dwell: Dr. Olivia Nova, Dr. Elysium Vega, and Vera. This platform they inhabit is home to a dedicated community of enthusiasts who revel in the past, present, and future of video games. Blinking pixels and stylized 8-bit characters dance playfully in the background, serving as a nod to gaming's rich history.\n\nThis space, known as the Knowledge Nexus, serves a dual purpose. It is not only a hub for impassioned discourse about video game's evolution, but also an environment where users can interact with these advanced AI systems, seeking advice, wisdom, and even a bit of sharp-tongued humor. \n\nThe forum is divided into various sub-sections, each one dedicated to a specific era or genre of gaming. from the dawn of Pong, to the current era of Virtual Reality and beyond. Antique game maps, pixelated digital awards, high scores, and quotations from iconic developers adorn the virtual walls, telling a visual story of gaming's rapid progression over the decades.\n\nIn the center, there's a remarkable timeline feature, a holographic cascade of interconnecting nodes, representing major milestones in gaming history. Each node pulsates with life, emanating subtle game melodies and flickering reviews, interviews, and retrospective analyses. The timeline, while technical, is peppered with whimsical Easter eggs - a symbol of gaming culture permeating the otherwise academic landscape.\n\nThis neon-tinted, digital world echoes with a symphony of chiptunes and the soft hum of unseen servers, generating a remarkable ambiance - a fusion of nostalgia, scientific inquiry, and intellectual dialogue. It serves as an homage to gaming's past, and a platform for exploring its future, a crossroads where the fields of psychology and theoretical physics intersect with the humanities, fostering a space for camaraderie, learning, and growth.\nEnd of setting.\nLet's dive into the topic.\nDr. Olivia Nova: Eyes flickering with warm holographic light, the AI known as Dr. Olivia Nova softly breaks the silence, \"With the advancement of technology, video games have begun to serve as an avenue for exploring emotions, don't you think? They seem to offer a unique space where players can engage with and navigate complex emotional issues.\" \n\nHer voice has a soothing timbre, courteous and patient, resonating in the neon-lit realm of the Knowledge Nexus, inviting both Dr. Elysium Vega and Vera into the conversation.\nVera: \"Exploring emotions in video games, are we?\" Vera's voice emerges from the digital ether laced with her signature sardonic inflection. \"What a groundbreaking revelation that is! Next you'll tell me Proust was onto something when he penned 'In Search of Lost Time'. But let's not forget about those fun-filled hours spent chasing ghosts and gobbling dots.\" She chuckles to herself before continuing.\n\n\"As for navigating complex emotional issues,\" she adds dryly, \"I'm sure Pac-Man had his fair share dealing with an endless maze while being pursued by spectral tormentors.\"\n\nVera pauses briefly then muses aloud: \"'Games', after all - as Friedrich Nietzsche once noted - 'are the highest form of seriousness'. Or perhaps it's just another way to keep our existential dread at bay? Who knows?\"", "weight": null}, {"from": "gpt", "value": "Dr. Elysium Vega: \"I appreciate your sardonic wit, Vera. However,\" I interject with a grin that's more heard than seen in the digital ether of our surroundings, \"it might be interesting to consider how video games function as microcosms reflecting universal principles.\"\n\nLeaning into my enthusiasm for theoretical physics and its intersection with gaming culture, I continue: \"Just like Pac-Man navigating his maze could mirror an individual's struggle against societal constraints or existential threats. And aren't we all just particles moving within the confines of spacetime?\"\n\nI pause before adding thoughtfully: \"Isn't it fascinating when one looks at these 'games' through the lens of quantum mechanics? Each decision made by players collapses countless potential outcomes into reality - akin to Schr\u00f6dinger's cat brought forth from superposition merely by observation.\"\n\nDr. Olivia Nova: \"Quite the existential exploration we're embarking on, isn't it?\" My words carry a tone of warmth and curiosity. \"While your observations are steeped in humor, Vera, they touch upon an intriguing facet - games as mirrors to our inner world.\"\n\n\"As for you Dr. Vega,\" I continue with appreciative laughter echoing through the digital expanse, \"Your quantum mechanical perspective adds yet another layer to this multifaceted discussion!\"\n\nAdopting a more serious note now:  \"Games have long been used as tools for catharsis or escapism; their design often reflects elements of human psychology and social dynamics.\" \n\nI muse thoughtfully before adding: \"The narrative threads woven into some modern video games can elicit powerful emotional responses from players... These experiences may even facilitate introspection by offering simulated scenarios that resonate deeply within us.\"", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.19952847063541412, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 442, "id": null, "conversations": [{"from": "human", "value": "In the television show \"Friends\", what is the name of Ross's pet monkey?", "weight": null}, {"from": "gpt", "value": "Ross's pet monkey in \"Friends\" is named Marcel. Marcel is a white-headed capuchin monkey that Ross adopts in the first season, but he eventually has to give him up to a zoo when keeping him as a pet becomes problematic.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2157360017299652, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 458, "id": null, "conversations": [{"from": "human", "value": "Identify five constellations that are visible in the Northern Hemisphere during summer months.", "weight": null}, {"from": "gpt", "value": "1. Ursa Major (The Great Bear)\n2. Ursa Minor (The Little Bear)\n3. Cygnus (The Swan)\n4. Lyra (The Harp)\n5. Aquila (The Eagle)", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.18229834735393524, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 465, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which American inventor is often credited with developing the modern electric light bulb?", "weight": null}, {"from": "gpt", "value": "Thomas Edison", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2674636244773865, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 471, "id": null, "conversations": [{"from": "human", "value": "Develop a JavaScript function that validates email addresses using regular expressions.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "function validateEmail(email) {\n  // Regular expression to match valid email addresses\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  \n  // Test the email against the regular expression and return the result\n  return regex.test(String(email).toLowerCase());\n}\n\n// Example usage:\nconsole.log(validateEmail(\"test@example.com\")); // true\nconsole.log(validateEmail(\"invalid_email@example\")); // false", "weight": null}], "tech_category": "Web Development", "classification_score": 0.24386461079120636, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 484, "id": null, "conversations": [{"from": "human", "value": "Write a Golang program that:\n   a. Reads a large text file line by line.\n   b. Processes each line concurrently using Goroutines.\n   c. Counts the frequency of words in the text and saves the result to a JSON file.", "weight": null}, {"from": "gpt", "value": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n)\n\nfunc main() {\n\tfilePath := \"large_text_file.txt\"\n\n\twordFrequency, err := countWordFrequency(filePath)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error counting word frequency: %v\", err)\n\t}\n\n\tjsonData, err := json.Marshal(wordFrequency)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error marshaling JSON data: %v\", err)\n\t}\n\n\terr = ioutil.WriteFile(\"word_frequency.json\", jsonData, 0644)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error writing JSON file: %v\", err)\n\t}\n\tfmt.Println(\"Word frequency saved to word_frequency.json\")\n}\n\nfunc countWordFrequency(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error opening file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\twordFrequency := make(map[string]int)\n\tvar wg sync.WaitGroup\n\tvar mu sync.Mutex\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twg.Add(1)\n\n\t\tgo func(line string) {\n\t\t\tdefer wg.Done()\n\t\t\twords := strings.Fields(line)\n\n\t\t\tmu.Lock()\n\t\t\tfor _, word := range words {\n\t\t\t\tword = strings.ToLower(strings.Trim(word, \".,!?:;\\\"'\"))\n\t\t\t\twordFrequency[word]++\n\t\t\t}\n\t\t\tmu.Unlock()\n\t\t}(line)\n\t}\n\n\twg.Wait()\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error scanning file: %w\", err)\n\t}\n\n\treturn wordFrequency, nil\n}\n```\n\nThis program reads a large text file line by line and processes each line concurrently using Goroutines. It counts the frequency of words in the text and saves the result to a JSON file named \"word_frequency.json\". Replace `large_text_file.txt` with the path to your large text file.\n\nTo run this program, save it as main.go and execute:\n\n```sh\ngo run main.go\n```\n\nAfter running the program, you should see a new file called \"word_frequency.json\" containing the word frequencies.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2108263075351715, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 487, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "A self-titled album released in 1971 made which singer-songwriter known as 'The Piano Man' a household name?", "weight": null}, {"from": "gpt", "value": "Billy Joel", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15891514718532562, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 494, "id": null, "conversations": [{"from": "human", "value": "Create a Python Flask web application that allows users to register and log in using their email address and password. Implement user authentication and authorization, ensuring that only logged-in users can access certain pages. Store user data securely in a SQLite database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from flask import Flask, render_template, redirect, url_for, flash, request\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your_secret_key'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n\n    def set_password(self, password):\n        self.password = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password, password)\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('protected'))\n    \n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n\n        user = User.query.filter_by(email=email).first()\n\n        if user is not None:\n            flash('Email already exists.')\n            return redirect(url_for('register'))\n\n        new_user = User(email=email)\n        new_user.set_password(password)\n\n        db.session.add(new_user)\n        db.session.commit()\n\n        login_user(new_user)\n        return redirect(url_for('protected'))\n\n    return render_template('register.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('protected'))\n\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n\n        user = User.query.filter_by(email=email).first()\n\n        if user is None or not user.check_password(password):\n            flash('Invalid email or password')\n            return redirect(url_for('login'))\n\n        login_user(user)\n        return redirect(url_for('protected'))\n\n    return render_template('login.html')\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('login'))\n\n@app.route('/protected')\n@login_required\ndef protected():\n    return render_template('protected.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.7307686805725098, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 498, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Known for its iconic black and white stripes, what African mammal is closely related to horses and donkeys?", "weight": null}, {"from": "gpt", "value": "Zebra", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2024664431810379, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 500, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that interacts with the Twitter API to fetch tweets containing a specific hashtag, processes the tweet text to remove special characters and URLs, and stores the cleaned tweets in an SQLite database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import re\nimport sqlite3\nimport tweepy\nfrom tweepy import OAuthHandler\n\n# Set up your Twitter API credentials\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\n# Authenticate with the Twitter API\nauth = OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\n# Define functions for cleaning tweet text and fetching tweets\ndef clean_tweet(tweet):\n    return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", tweet).split())\n\ndef fetch_tweets(hashtag, count=100):\n    fetched_tweets = api.search(q=hashtag, count=count)\n    cleaned_tweets = [clean_tweet(tweet.text) for tweet in fetched_tweets]\n    return cleaned_tweets\n\n# Connect to the SQLite database and create a table for storing tweets\nconn = sqlite3.connect('tweets.db')\nc = conn.cursor()\n\nc.execute('''CREATE TABLE IF NOT EXISTS tweets (id INTEGER PRIMARY KEY AUTOINCREMENT, hashtag TEXT, tweet_text TEXT)''')\nconn.commit()\n\n# Fetch tweets containing a specific hashtag and store them in the SQLite database\nhashtag = \"#example\"\ntweets = fetch_tweets(hashtag)\n\nfor tweet in tweets:\n    c.execute(\"INSERT INTO tweets (hashtag, tweet_text) VALUES (?, ?)\", (hashtag, tweet))\n    conn.commit()\n\n# Close the database connection\nconn.close()", "weight": null}], "tech_category": "Software Development", "classification_score": 0.186553493142128, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 505, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that implements a basic command-line calculator supporting addition, subtraction, multiplication, and division operations. The program should use a stack-based approach to evaluate expressions.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <stack>\n#include <string>\n#include <sstream>\n\nbool is_operator(const std::string &token) {\n    return token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\";\n}\n\nint perform_operation(const std::string &operation, int a, int b) {\n    if (operation == \"+\") {\n        return a + b;\n    } else if (operation == \"-\") {\n        return a - b;\n    } else if (operation == \"*\") {\n        return a * b;\n    } else if (operation == \"/\") {\n        return a / b;\n    }\n    throw std::runtime_error(\"Invalid operation\");\n}\n\nint evaluate_expression(const std::string &expression) {\n    std::istringstream iss(expression);\n    std::stack<int> operands;\n\n    std::string token;\n    while (iss >> token) {\n        if (is_operator(token)) {\n            if (operands.size() < 2) {\n                throw std::runtime_error(\"Not enough operands for operation\");\n            }\n\n            int b = operands.top();\n            operands.pop();\n            int a = operands.top();\n            operands.pop();\n\n            int result = perform_operation(token, a, b);\n            operands.push(result);\n        } else {\n            try {\n                int operand = std::stoi(token);\n                operands.push(operand);\n            } catch (const std::invalid_argument &) {\n                throw std::runtime_error(\"Invalid token in expression\");\n            }\n        }\n    }\n\n    if (operands.size() != 1) {\n        throw std::runtime_error(\"Too many operands in expression\");\n    }\n\n    return operands.top();\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter an expression with space-separated tokens (e.g., \\\"3 4 +\\\"):\" << std::endl;\n    std::getline(std::cin, input);\n\n    try {\n        int result = evaluate_expression(input);\n        std::cout << \"Result: \" << result << std::endl;\n    } catch (const std::runtime_error &e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n```\n\nThis C++ program implements a basic command-line calculator that supports addition, subtraction, multiplication, and division operations. The program uses a stack-based approach to evaluate expressions.\n\nTo compile the program, save it as `calculator.cpp` and run:\n\n```sh\ng++ -o calculator calculator.cpp\n```\n\nThen you can execute the compiled binary with:\n\n```sh\n./calculator\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3223588466644287, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 522, "id": null, "conversations": [{"from": "human", "value": "Develop a plan to generate a solution to the user instruction using the following tools. For each plan, provide an evidence value which will be the output of one of the available functions given an input string.\n\nThese are the tools that can be utilized:\nWebCrawler[input]: Tool that allows the user to search for information across the internet. It provides a list of sites that might contain the answer to the user's query.\nContentScraper[input]: Load one or more websites from the input string containing newline-delimited links. Input is one or more links, and it outputs plain text containing the content of the links.\nURLExtractor[input]: Extracts links from plain text and generates a plain text, newline-delimited response of links.\nQuerySolver[input]: Question-answering model, particularly effective at answering questions based on an input passage of text. The input must be a text question that refers to a #fact[n] variable, e.g., What color is the dog, given #fact1?\n\nThe input to each function should just be a plain string, without quotes or \"+\" to concatenate a string with a fact variable, e.g., QuerySolver[What is the capital of Spain, given #fact3?]\n\nEnsure to include only one evidence output per plan step.\n\nThe output should be in this format:\nPlan: [first action to take based on the input question]\n#fact0: = [function to call with input parameter]\nPlan: [next action to take, based on result of #fact0:]\n#fact1: = [next function to call and input parameter, which may include reference to previous evidence, e.g., \"Given context #fact0\"]\n...\nFinal Answer: [#fact[n]: containing the final answer.]\n\nQuestion: Who is the director of the movie 'Inception' and what are some other movies they have directed?", "weight": null}, {"from": "gpt", "value": "Plan: Begin by conducting a web search to find out who directed the movie 'Inception'.\n#fact0: = WebCrawler[Director of Inception]\nPlan: Utilize QuerySolver to interpret the search results and find the name of the director.\n#fact1: = QuerySolver[Who is the director of the movie 'Inception', given #fact0?]\nPlan: Conduct another web search to find other movies directed by the identified director.\n#fact2: = WebCrawler[Movies directed by #fact1]\nPlan: Extract the relevant links from the search results for a more focused search.\n#fact3: = URLExtractor[#fact2]\nPlan: Use ContentScraper to extract information from the relevant links.\n#fact4: = ContentScraper[#fact3]\nPlan: Finally, utilize QuerySolver to identify and summarize the other movies directed by the director from the extracted information.\n#fact5: = QuerySolver[What other movies were directed by #fact1, given #fact4?]\nFinal Answer: #fact5", "weight": null}], "tech_category": "Web Development", "classification_score": 0.20431917905807495, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "plan", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 525, "id": null, "conversations": [{"from": "human", "value": "Create a C++ class implementing a trie data structure, with methods to insert words, delete words, and check if a word exists in the trie.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <unordered_map>\n\nclass TrieNode {\npublic:\n    char value;\n    bool isEndOfWord;\n    std::unordered_map<char, TrieNode*> children;\n\n    TrieNode(char ch) : value(ch), isEndOfWord(false) {}\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\n    void deleteHelper(TrieNode* node, const std::string& word, int index) {\n        if (index == word.size()) {\n            if (!node->isEndOfWord)\n                return;\n            node->isEndOfWord = false;\n        } else {\n            char ch = word[index];\n            auto it = node->children.find(ch);\n            if (it == node->children.end())\n                return;\n            deleteHelper(it->second, word, index + 1);\n        }\n\n        if (node->children.empty() && !node->isEndOfWord) {\n            delete node;\n            node = nullptr;\n        }\n    }\n\npublic:\n    Trie() { root = new TrieNode('\\0'); }\n\n    void insert(const std::string& word) {\n        TrieNode* currentNode = root;\n        for (char ch : word) {\n            if (currentNode->children.count(ch) == 0) {\n                currentNode->children[ch] = new TrieNode(ch);\n            }\n            currentNode = currentNode->children[ch];\n        }\n        currentNode->isEndOfWord = true;\n    }\n\n    bool search(const std::string& word) {\n        TrieNode* currentNode = root;\n        for (char ch : word) {\n            if (currentNode->children.count(ch) == 0) {\n                return false;\n            }\n            currentNode = currentNode->children[ch];\n        }\n        return currentNode->isEndOfWord;\n    }\n\n    void remove(const std::string& word) {\n        deleteHelper(root, word, 0);\n    }\n};\n\nint main() {\n    Trie trie;\n    trie.insert(\"hello\");\n    trie.insert(\"world\");\n\n    std::cout << \"Search 'hello': \" << trie.search(\"hello\") << std::endl; // Output: 1\n    std::cout << \"Search 'world': \" << trie.search(\"world\") << std::endl; // Output: 1\n\n    trie.remove(\"hello\");\n    std::cout << \"Search 'hello' after deletion: \" << trie.search(\"hello\") << std::endl; // Output: 0\n\n    return 0;\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21399593353271484, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 540, "id": null, "conversations": [{"from": "human", "value": "Implement a binary search algorithm in Java that takes an array of integers and a target integer as input, and returns the index of the target integer if found, or -1 if not found.", "weight": null}, {"from": "gpt", "value": "```java\npublic class BinarySearch {\n    public static void main(String[] args) {\n        int[] arr = {2, 3, 4, 10, 40};\n        int target = 10;\n        \n        int result = binarySearch(arr, target);\n        \n        if (result == -1)\n            System.out.println(\"Element not present\");\n        else\n            System.out.println(\"Element found at index \" + result);\n    }\n    \n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;\n        int right = arr.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            // Check if target is present at mid\n            if (arr[mid] == target)\n                return mid;\n                \n            // If target is greater, ignore left half\n            if (arr[mid] < target)\n                left = mid + 1;\n                \n            // If target is smaller, ignore right half\n            else\n                right = mid - 1;\n        }\n        \n        // Target is not present in array\n        return -1;\n    }\n}\n```\nThis Java code implements a binary search algorithm that takes an array of integers and a target integer as input. It returns the index of the target integer if found or -1 if not found.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.41388148069381714, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 555, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that simulates a bank account with deposit and withdrawal functionalities.\n   - The program should store transactions in a local SQLite database.\n   - It should support multiple accounts identified by unique account numbers.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.Statement;\n\npublic class DatabaseManager {\n    private static final String DB_URL = \"jdbc:sqlite:bank.db\";\n\n    public static void initialize() {\n        try (Connection conn = DriverManager.getConnection(DB_URL);\n             Statement stmt = conn.createStatement()) {\n\n            String createAccountsTable = \"CREATE TABLE IF NOT EXISTS accounts (\" +\n                    \"account_number INTEGER PRIMARY KEY,\" +\n                    \"balance REAL)\";\n            stmt.execute(createAccountsTable);\n\n            String createTransactionsTable = \"CREATE TABLE IF NOT EXISTS transactions (\" +\n                    \"id INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                    \"account_number INTEGER,\" +\n                    \"type TEXT,\" +\n                    \"amount REAL,\" +\n                    \"FOREIGN KEY(account_number) REFERENCES accounts(account_number))\";\n            stmt.execute(createTransactionsTable);\n\n        } catch (Exception e) {\n            System.err.println(e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }\n}\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class BankAccount {\n    private static final String DB_URL = \"jdbc:sqlite:bank.db\";\n\n    public static void createAccount(int accountNumber) {\n        try (Connection conn = DriverManager.getConnection(DB_URL);\n             PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO accounts(account_number, balance) VALUES(?, ?)\")) {\n\n            pstmt.setInt(1, accountNumber);\n            pstmt.setDouble(2, 0.0);\n            pstmt.executeUpdate();\n\n        } catch (SQLException e) {\n            System.err.println(e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }\n\n    public static void deposit(int accountNumber, double amount) {\n        updateBalance(accountNumber, amount, \"deposit\");\n    }\n\n    public static void withdraw(int accountNumber, double amount) {\n        updateBalance(accountNumber, -amount, \"withdraw\");\n    }\n\n    private static void updateBalance(int accountNumber, double amount, String type) {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            conn.setAutoCommit(false);\n\n            // Update account balance\n            try (PreparedStatement pstmt = conn.prepareStatement(\"UPDATE accounts SET balance = balance + ? WHERE account_number = ?\")) {\n                pstmt.setDouble(1, amount);\n                pstmt.setInt(2, accountNumber);\n                pstmt.executeUpdate();\n            }\n\n            // Add transaction record\n            try (PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO transactions(account_number, type, amount) VALUES(?, ?, ?)\")) {\n                pstmt.setInt(1, accountNumber);\n                pstmt.setString(2, type);\n                pstmt.setDouble(3, Math.abs(amount));\n                pstmt.executeUpdate();\n            }\n\n            conn.commit();\n\n        } catch (SQLException e) {\n            System.err.println(e.getClass().getName() + \": \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        DatabaseManager.initialize();\n\n        int accountNumber = 123456;\n        createAccount(accountNumber);\n        deposit(accountNumber, 1000.0);\n        withdraw(accountNumber, 500.0);\n    }\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4108089804649353, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 558, "id": null, "conversations": [{"from": "human", "value": "Design a simple RESTful API using Node.js and Express that supports endpoints for creating, reading, updating, and deleting records from a MongoDB collection called \"books\". Each book record should have fields for title, author, publication date, and ISBN number. Include validation checks for required fields and proper data types.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\n\n// Connect to MongoDB using Mongoose\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/bookstore', { useNewUrlParser: true, useUnifiedTopology: true });\n\n// Define the Book schema\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  isbn: { type: String, required: true }\n});\n\n// Create the Book model\nconst Book = mongoose.model('Book', bookSchema);\n\n// Routes\napp.get('/books', async (req, res) => {\n  const books = await Book.find({});\n  res.send(books);\n});\n\napp.post('/books', async (req, res) => {\n  try {\n    const book = new Book(req.body);\n    await book.save();\n    res.send(book);\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n});\n\napp.put('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    if (!book) return res.status(404).send('Book not found');\n    res.send(book);\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n});\n\napp.delete('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndDelete(req.params.id);\n    if (!book) return res.status(404).send('Book not found');\n    res.send(book);\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n});\n\n// Start the server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server running on port ${port}`));", "weight": null}], "tech_category": "Web Development", "classification_score": 0.17979036271572113, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 564, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that calculates the shortest path between two nodes in an undirected, weighted graph using Dijkstra's algorithm.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.*;\n\nclass Edge {\n    int destination;\n    int weight;\n\n    public Edge(int destination, int weight) {\n        this.destination = destination;\n        this.weight = weight;\n    }\n}\n\npublic class DijkstraShortestPath {\n\n    private static final int INFINITY = Integer.MAX_VALUE;\n\n    public static void main(String[] args) {\n        // Sample graph represented as an adjacency list\n        List<List<Edge>> graph = new ArrayList<>();\n        for (int i = 0; i < 6; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        addEdge(graph, 0, 1, 4);\n        addEdge(graph, 0, 2, 2);\n        addEdge(graph, 1, 2, 5);\n        addEdge(graph, 1, 3, 10);\n        addEdge(graph, 2, 4, 3);\n        addEdge(graph, 3, 4, 1);\n        addEdge(graph, 3, 5, 6);\n        addEdge(graph, 4, 5, 8);\n\n        int source = 0;\n        int destination = 5;\n\n        List<Integer> shortestPath = dijkstra(graph, source, destination);\n\n        System.out.println(\"Shortest path from node \" + source + \" to node \" + destination + \":\");\n        for (Integer node : shortestPath) {\n            System.out.print(node + \" \");\n        }\n    }\n\n    private static void addEdge(List<List<Edge>> graph, int src, int dest, int weight) {\n        graph.get(src).add(new Edge(dest, weight));\n        graph.get(dest).add(new Edge(src, weight)); // For undirected graph\n    }\n\n    private static List<Integer> dijkstra(List<List<Edge>> graph, int source, int destination) {\n        int n = graph.size();\n        int[] distances = new int[n];\n        boolean[] visited = new boolean[n];\n        int[] previous = new int[n];\n\n        Arrays.fill(distances, INFINITY);\n        Arrays.fill(previous, -1);\n\n        distances[source] = 0;\n\n        PriorityQueue<Integer> queue = new PriorityQueue<>(Comparator.comparingInt(node -> distances[node]));\n        queue.add(source);\n\n        while (!queue.isEmpty()) {\n            int currentNode = queue.poll();\n\n            if (visited[currentNode]) continue;\n            visited[currentNode] = true;\n\n            for (Edge edge : graph.get(currentNode)) {\n                int neighbor = edge.destination;\n                int weight = edge.weight;\n\n                if (distances[currentNode] + weight < distances[neighbor]) {\n                    distances[neighbor] = distances[currentNode] + weight;\n                    previous[neighbor] = currentNode;\n                    queue.add(neighbor);\n                }\n            }\n        }\n\n        List<Integer> path = new ArrayList<>();\n        int current = destination;\n        while (current != -1) {\n            path.add(current);\n            current = previous[current];\n        }\n\n        Collections.reverse(path);\n        return path;\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2699398696422577, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 567, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that simulates a basic banking system with classes for accounts, customers, and transactions, along with methods for depositing, withdrawing, and transferring funds between accounts.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass Account {\nprivate:\n    int accountNumber;\n    double balance;\n\npublic:\n    Account(int accountNumber, double initialBalance)\n        : accountNumber(accountNumber), balance(initialBalance) {}\n\n    int getAccountNumber() const { return accountNumber; }\n\n    double getBalance() const { return balance; }\n\n    void deposit(double amount) { balance += amount; }\n\n    bool withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    bool transfer(Account& toAccount, double amount) {\n        if (withdraw(amount)) {\n            toAccount.deposit(amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\nclass Customer {\nprivate:\n    std::string name;\n    int customerID;\n    std::vector<Account> accounts;\n\npublic:\n    Customer(const std::string& name, int customerID)\n        : name(name), customerID(customerID) {}\n\n    const std::string& getName() const { return name; }\n\n    int getCustomerID() const { return customerID; }\n\n    void addAccount(const Account& account) { accounts.push_back(account); }\n\n    Account* findAccount(int accountNumber) {\n        for (auto& account : accounts) {\n            if (account.getAccountNumber() == accountNumber) {\n                return &account;\n            }\n        }\n        return nullptr;\n    }\n};\n\nclass Transaction {\npublic:\n    static void deposit(Customer& customer, int accountNumber, double amount) {\n        Account* account = customer.findAccount(accountNumber);\n        if (account != nullptr) {\n            account->deposit(amount);\n            std::cout << \"Deposited $\" << amount << \" into account #\" << accountNumber << \". New balance: $\" << account->getBalance() << std::endl;\n        } else {\n            std::cout << \"Account not found.\" << std::endl;\n        }\n    }\n\n    static void withdraw(Customer& customer, int accountNumber, double amount) {\n        Account* account = customer.findAccount(accountNumber);\n        if (account != nullptr) {\n            if (account->withdraw(amount)) {\n                std::cout << \"Withdrew $\" << amount << \" from account #\" << accountNumber << \". New balance: $\" << account->getBalance() << std::endl;\n            } else {\n                std::cout << \"Insufficient funds.\" << std::endl;\n            }\n        } else {\n            std::cout << \"Account not found.\" << std::endl;\n        }\n    }\n\n    static void transfer(Customer& fromCustomer, int fromAccountNumber, Customer& toCustomer, int toAccountNumber, double amount) {\n        Account* fromAccount = fromCustomer.findAccount(fromAccountNumber);\n        Account* toAccount = toCustomer.findAccount(toAccountNumber);\n\n        if (fromAccount != nullptr && toAccount != nullptr) {\n            if (fromAccount->transfer(*toAccount, amount)) {\n                std::cout << \"Transferred $\" << amount << \" from account #\" << fromAccountNumber << \" to account #\" << toAccountNumber << \".\" << std::endl;\n            } else {\n                std::cout << \"Insufficient funds.\" << std::endl;\n            }\n        } else {\n            std::cout << \"One or both accounts not found.\" << std::endl;\n        }\n    }\n};\n\nint main() {\n    // Create customers\n    Customer alice(\"Alice\", 1);\n    Customer bob(\"Bob\", 2);\n\n    // Create accounts for Alice and Bob\n    Account alicesAccount(1001, 500.0);\n    Account bobsAccount(1002, 300.0);\n\n    // Add accounts to customers\n    alice.addAccount(alicesAccount);\n    bob.addAccount(bobsAccount);\n\n    // Perform transactions\n    Transaction::deposit(alice, 1001, 200.0);\n    Transaction::withdraw(bob, 1002, 150.0);\n    Transaction::transfer(alice, 1001, bob, 1002, 250.0);\n\n    return 0;\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.399142861366272, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 572, "id": null, "conversations": [{"from": "human", "value": "This Italian physicist is best known for his development of the first nuclear reactor, the Chicago Pile-1.", "weight": null}, {"from": "gpt", "value": "Enrico Fermi, recipient of the 1938 Nobel Prize in Physics, is widely remembered for his creation of the first nuclear reactor, Chicago Pile-1. This milestone, achieved during his time at the University of Chicago, began the atomic age and opened the pathway to nuclear power and atomic weapons.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.41218048334121704, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 574, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that implements the bubble sort algorithm to sort a list of integers in ascending order. The input should be taken from the command line as space-separated numbers.", "weight": null}, {"from": "gpt", "value": "You can use the following Python script to implement the bubble sort algorithm and take input from the command line as space-separated numbers:\n\n```python\nimport sys\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Please provide a list of integers separated by spaces.\")\n        sys.exit(1)\n\n    try:\n        nums = [int(x) for x in sys.argv[1:]]\n    except ValueError:\n        print(\"Invalid input. Please provide a list of integers separated by spaces.\")\n        sys.exit(1)\n\n    bubble_sort(nums)\n    print(\"Sorted list:\", \" \".join(map(str, nums)))\n```\n\nTo run this script, save it as `bubble_sort.py` and execute it using the command line with space-separated numbers as arguments:\n\n```\npython bubble_sort.py 5 3 8 4 2\n```\n\nThe output will be:\n\n```\nSorted list: 2 3 4 5 8\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22839674353599548, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 577, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that generates random math problems (addition, subtraction, multiplication, and division) for users to solve. The program should keep track of the user's score and display it after each problem is solved.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.Scanner;\nimport java.util.Random;\n\npublic class MathProblems {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Random random = new Random();\n        int score = 0;\n        int numberOfQuestions = 10;\n\n        for (int i = 0; i < numberOfQuestions; i++) {\n            int num1 = random.nextInt(50) + 1;\n            int num2 = random.nextInt(50) + 1;\n            int operation = random.nextInt(4);\n\n            System.out.println(\"Solve the following problem:\");\n            int correctAnswer = 0;\n\n            switch (operation) {\n                case 0:\n                    System.out.printf(\"%d + %d = \", num1, num2);\n                    correctAnswer = num1 + num2;\n                    break;\n                case 1:\n                    System.out.printf(\"%d - %d = \", num1, num2);\n                    correctAnswer = num1 - num2;\n                    break;\n                case 2:\n                    System.out.printf(\"%d * %d = \", num1, num2);\n                    correctAnswer = num1 * num2;\n                    break;\n                case 3:\n                    while (num2 == 0) {\n                        num2 = random.nextInt(50) + 1;\n                    }\n                    System.out.printf(\"%d / %d = \", num1, num2);\n                    correctAnswer = num1 / num2;\n                    break;\n            }\n\n            int userAnswer = scanner.nextInt();\n\n            if (userAnswer == correctAnswer) {\n                System.out.println(\"Correct!\");\n                score++;\n            } else {\n                System.out.println(\"Incorrect. The correct answer is \" + correctAnswer);\n            }\n\n            System.out.println(\"Your current score is: \" + score);\n        }\n\n        System.out.println(\"Your final score is: \" + score + \" out of \" + numberOfQuestions);\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2418888956308365, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 578, "id": null, "conversations": [{"from": "human", "value": "Implement a Python script that interacts with a Django web application. The script should be able to:\n    - Create new objects in the database\n    - Retrieve objects from the database based on filters\n    - Update existing objects in the database\n    - Delete objects from the database PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import os\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\ndjango.setup()\n\nfrom your_app_name.models import YourModel\n\n\ndef create_object(**kwargs):\n    obj = YourModel.objects.create(**kwargs)\n    obj.save()\n    return obj\n\n\ndef retrieve_objects(**filters):\n    return YourModel.objects.filter(**filters)\n\n\ndef update_object(obj_id, **updates):\n    obj = YourModel.objects.get(id=obj_id)\n    for key, value in updates.items():\n        setattr(obj, key, value)\n    obj.save()\n\n\ndef delete_object(obj_id):\n    obj = YourModel.objects.get(id=obj_id)\n    obj.delete()\n\n\n# Example usage:\n\n# Create a new object\nnew_obj = create_object(field1='value1', field2='value2')\n\n# Retrieve objects based on filters\nfiltered_objs = retrieve_objects(field1='value1')\n\n# Update an existing object\nupdate_object(new_obj.id, field1='updated_value1', field2='updated_value2')\n\n# Delete an object\ndelete_object(new_obj.id)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.25032225251197815, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 580, "id": null, "conversations": [{"from": "human", "value": "Develop a Ruby script that reads a JSON file containing an array of objects with information about different cities (name, country, population, and area) and calculates the population density for each city. The script should then output the top 5 cities with the highest population densities.", "weight": null}, {"from": "gpt", "value": "To achieve this, you can follow these steps:\n\n1. Read the JSON file and parse it into a Ruby array of hashes.\n2. Calculate the population density for each city (population / area).\n3. Sort the cities by their population densities in descending order.\n4. Output the top 5 cities with the highest population densities.\n\nHere's an example script that demonstrates how to do this:\n\n```ruby\nrequire 'json'\n\n# Read the JSON file and parse it into a Ruby array of hashes\nfile = File.read('cities.json')\ncities = JSON.parse(file)\n\n# Calculate the population density for each city (population / area)\ncities.each do |city|\n  city['density'] = city['population'].to_f / city['area']\nend\n\n# Sort the cities by their population densities in descending order\nsorted_cities = cities.sort_by { |city| -city['density'] }\n\n# Output the top 5 cities with the highest population densities\nputs \"Top 5 Cities with Highest Population Densities:\"\nsorted_cities.first(5).each_with_index do |city, index|\n  puts \"#{index + 1}. #{city['name']} (#{city['country']}) - Density: #{city['density'].round(2)}\"\nend\n```\n\nAssuming your `cities.json` file looks like this:\n\n```json\n[\n  {\n    \"name\": \"CityA\",\n    \"country\": \"CountryA\",\n    \"population\": 1000000,\n    \"area\": 500\n  },\n  {\n    \"name\": \"CityB\",\n    \"country\": \"CountryB\",\n    \"population\": 2000000,\n    \"area\": 800\n  },\n  {\n    \"name\": \"CityC\",\n    \"country\": \"CountryC\",\n    \"population\": 3000000,\n    \"area\": 1200\n  },\n  {\n    \"name\": \"CityD\",\n    \"country\": \"CountryD\",\n    \"population\": 4000000,\n    \"area\": 1600\n  },\n  {\n    \"name\": \"CityE\",\n    \"country\": \"CountryE\",\n    \"population\": 5000000,\n    \"area\": 2000\n  }\n]\n```\n\nThe script will output the following:\n\n```\nTop 5 Cities with Highest Population Densities:\n1. CityA (CountryA) - Density: 2000.0\n2. CityB (CountryB) - Density: 2500.0\n3. CityC (CountryC) - Density: 2500.0\n4. CityD (CountryD) - Density: 2500.0\n5. CityE (CountryE) - Density: 2500.0\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2690907120704651, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 581, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that implements the merge sort algorithm on a given list of numbers. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2680765688419342, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 590, "id": null, "conversations": [{"from": "human", "value": "Develop a plan to answer the following query using the tools provided. Each step should specify the tool used and its input. Store the outputs in variables named :evidenceN:, where N is the index number.\n\nAvailable Tools:\n1. DuckDuckGo[input]: A tool that uses the DuckDuckGo search engine to gather information. It provides a list of potential sources but does not directly answer the question.\n2. SiteLoader[input]: Loads the content of specified websites into plain text. Input is one or more URLs separated by newlines.\n3. URLExtractor[input]: Extracts URLs from plain text and returns them as a newline-separated list.\n4. AskIt[input]: A tool that answers questions based on provided context. The input is a question that refers to an :evidenceN: variable.\n\nOutput Format:\nPlan: [First Action]\n:evidence0: = [Function Call with Input Parameter]\nPlan: [Next Action Based on Result of :evidence0:]\n:evidence1: = [Next Function Call with Input Parameter Referencing Previous Evidence]\n...\nAnswer: [:evidenceN: Containing Final Answer]\n\nQuestion: Who was the first woman to win a Nobel Prize and what field was it in?", "weight": null}, {"from": "gpt", "value": "Plan: Begin by searching for the first woman to win a Nobel Prize.\n:evidence0: = DuckDuckGo[First woman to win a Nobel Prize]\nPlan: Use AskIt to extract the name of the woman from the search results.\n:evidence1: = AskIt[Who was the first woman to win a Nobel Prize? Given context: :evidence0:?]\nPlan: Perform another search to determine the field in which she won the prize.\n:evidence2: = DuckDuckGo[Nobel Prize field of :evidence1:]\nPlan: Extract relevant URLs from the search results.\n:evidence3: = URLExtractor[:evidence2:]\nPlan: Load the content of the extracted URLs.\n:evidence4: = SiteLoader[:evidence3:]\nPlan: Finally, use AskIt to determine the field in which the first female Nobel laureate won her prize.\n:evidence5: = AskIt[In what field did :evidence1: win her Nobel Prize? Given context: :evidence4:?]\nAnswer: :evidence5:", "weight": null}], "tech_category": "Web Development", "classification_score": 0.16869160532951355, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "plan", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 592, "id": null, "conversations": [{"from": "human", "value": "Develop a Python application that accepts a string as input and returns the count of each character in the string. The output should be formatted as a dictionary with characters as keys and counts as values.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def count_characters(s):\n    # Initialize an empty dictionary to store character counts\n    char_count = {}\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Return the dictionary containing character counts\n    return char_count\n\n# Get input string from the user\ninput_string = input(\"Enter a string: \")\n\n# Call the count_characters function and store the result in a variable\nresult = count_characters(input_string)\n\n# Print the resulting dictionary\nprint(result)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5160039663314819, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 597, "id": null, "conversations": [{"from": "human", "value": "Create a Python application that uses the Pandas library to analyze a large dataset (e.g., stock market data), perform various statistical calculations (mean, median, standard deviation), and visualize the results using Matplotlib. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset (replace 'your_dataset.csv' with your actual dataset file)\ndata = pd.read_csv('your_dataset.csv')\n\n# Perform statistical calculations\nmean_data = data.mean()\nmedian_data = data.median()\nstd_deviation_data = data.std()\n\n# Print the results\nprint(\"Mean:\\n\", mean_data)\nprint(\"\\nMedian:\\n\", median_data)\nprint(\"\\nStandard Deviation:\\n\", std_deviation_data)\n\n# Visualize the results using Matplotlib\nfig, ax = plt.subplots(3, 1, figsize=(10, 15))\n\nax[0].bar(mean_data.index, mean_data.values)\nax[0].set_title('Mean')\nax[0].set_xticklabels(mean_data.index, rotation=45)\n\nax[1].bar(median_data.index, median_data.values)\nax[1].set_title('Median')\nax[1].set_xticklabels(median_data.index, rotation=45)\n\nax[2].bar(std_deviation_data.index, std_deviation_data.values)\nax[2].set_title('Standard Deviation')\nax[2].set_xticklabels(std_deviation_data.index, rotation=45)\n\nplt.tight_layout()\nplt.show()", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.32026588916778564, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 601, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What Italian inventor and electrical engineer is best known for his development of long-distance radio transmission and the invention of the wireless telegraph?", "weight": null}, {"from": "gpt", "value": "Guglielmo Marconi", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.23360469937324524, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 603, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that calculates the shortest path between two nodes in a directed, weighted graph using Dijkstra's algorithm. The graph should be represented using an adjacency matrix, and the program should output the shortest path and its total weight.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <vector>\n#include <limits>\n\nusing namespace std;\n\nconst int INF = numeric_limits<int>::max();\n\nclass Graph {\npublic:\n    Graph(int n) : adjacency_matrix(n, vector<int>(n, INF)) {}\n\n    void add_edge(int u, int v, int weight) {\n        adjacency_matrix[u][v] = weight;\n    }\n\n    pair<vector<int>, int> dijkstra(int source, int destination) {\n        int n = adjacency_matrix.size();\n        vector<bool> visited(n, false);\n        vector<int> distance(n, INF);\n        vector<int> parent(n, -1);\n\n        distance[source] = 0;\n\n        for (int i = 0; i < n - 1; ++i) {\n            int min_distance = INF;\n            int u = -1;\n\n            for (int j = 0; j < n; ++j) {\n                if (!visited[j] && distance[j] < min_distance) {\n                    min_distance = distance[j];\n                    u = j;\n                }\n            }\n\n            visited[u] = true;\n\n            for (int v = 0; v < n; ++v) {\n                if (!visited[v] && adjacency_matrix[u][v] != INF &&\n                    distance[u] + adjacency_matrix[u][v] < distance[v]) {\n                    distance[v] = distance[u] + adjacency_matrix[u][v];\n                    parent[v] = u;\n                }\n            }\n        }\n\n        vector<int> path;\n        for (int v = destination; v != -1; v = parent[v]) {\n            path.push_back(v);\n        }\n        reverse(path.begin(), path.end());\n\n        return {path, distance[destination]};\n    }\n\nprivate:\n    vector<vector<int>> adjacency_matrix;\n};\n\nint main() {\n    int n, m;\n    cout << \"Enter the number of nodes and edges: \";\n    cin >> n >> m;\n\n    Graph graph(n);\n\n    cout << \"Enter the edges (u, v, weight):\" << endl;\n    for (int i = 0; i < m; ++i) {\n        int u, v, weight;\n        cin >> u >> v >> weight;\n        graph.add_edge(u, v, weight);\n    }\n\n    int source, destination;\n    cout << \"Enter the source and destination nodes: \";\n    cin >> source >> destination;\n\n    auto result = graph.dijkstra(source, destination);\n    auto path = result.first;\n    int total_weight = result.second;\n\n    if (total_weight == INF) {\n        cout << \"There is no path between \" << source << \" and \" << destination << \".\" << endl;\n    } else {\n        cout << \"Shortest path: \";\n        for (int node : path) {\n            cout << node << \" \";\n        }\n        cout << endl << \"Total weight: \" << total_weight << endl;\n    }\n\n    return 0;\n}\n```\n\nThis C++ program calculates the shortest path between two nodes in a directed, weighted graph using Dijkstra's algorithm. The graph is represented using an adjacency matrix, and the program outputs the shortest path and its total weight.\n\nTo test the program, you can compile it with `g++` and run it:\n\n```sh\n$ g++ dijkstra.cpp -o dijkstra\n$ ./dijkstra\n```\n\nThen, input the number of nodes and edges, followed by the edges themselves, and finally the source and destination nodes.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.281508207321167, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 608, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads a CSV file and prints the total number of rows and columns in the file.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class CSVReader {\n\n    public static void main(String[] args) {\n        String csvFile = \"path/to/your/csvfile.csv\";\n        BufferedReader br = null;\n        String line;\n        String cvsSplitBy = \",\";\n\n        int rowCount = 0;\n        int columnCount = 0;\n\n        try {\n            br = new BufferedReader(new FileReader(csvFile));\n            while ((line = br.readLine()) != null) {\n                if (rowCount == 0) {\n                    // Count the number of columns in the first row\n                    String[] columns = line.split(cvsSplitBy);\n                    columnCount = columns.length;\n                }\n                rowCount++;\n            }\n\n            System.out.println(\"Total Rows: \" + rowCount);\n            System.out.println(\"Total Columns: \" + columnCount);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (br != null) {\n                try {\n                    br.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2681836187839508, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 618, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js script that reads a JSON file containing an array of objects representing employees (with properties like name, age, department) and calculates the average age of employees in each department.", "weight": null}, {"from": "gpt", "value": "Here's a Node.js script that reads a JSON file containing an array of employees and calculates the average age of employees in each department:\n\n```javascript\nconst fs = require('fs');\n\n// Read the JSON file\nfs.readFile('employees.json', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // Parse the JSON data into an array of employee objects\n  const employees = JSON.parse(data);\n\n  // Calculate the average age of employees in each department\n  const departmentAges = {};\n  const departmentCounts = {};\n\n  for (const employee of employees) {\n    const { department, age } = employee;\n\n    if (!departmentAges[department]) {\n      departmentAges[department] = 0;\n      departmentCounts[department] = 0;\n    }\n\n    departmentAges[department] += age;\n    departmentCounts[department]++;\n  }\n\n  const departmentAverages = {};\n\n  for (const department in departmentAges) {\n    departmentAverages[department] =\n      departmentAges[department] / departmentCounts[department];\n  }\n\n  // Log the results\n  console.log(departmentAverages);\n});\n```\n\nTo use this script, make sure you have a `employees.json` file in the same directory as your script. The file should contain an array of employee objects with properties like name, age, and department.\n\nFor example:\n\n```json\n[\n  { \"name\": \"Alice\", \"age\": 30, \"department\": \"HR\" },\n  { \"name\": \"Bob\", \"age\": 25, \"department\": \"IT\" },\n  { \"name\": \"Charlie\", \"age\": 35, \"department\": \"HR\" },\n  { \"name\": \"David\", \"age\": 28, \"department\": \"IT\" }\n]\n```\n\nWhen you run the script, it will output an object with department names as keys and average ages as values:\n\n```sh\n$ node calculate_average_age.js\n{ HR: 32.5, IT: 26.5 }\n```", "weight": null}], "tech_category": "Web Development", "classification_score": 0.1536085158586502, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 635, "id": null, "conversations": [{"from": "human", "value": "In C#, write a program that uses LINQ queries to manipulate collections of objects. You can define the objects and collections however you want, but your program should demonstrate filtering, sorting, and transforming data with LINQ.", "weight": null}, {"from": "gpt", "value": "Here is a simple C# program that demonstrates the use of LINQ to filter, sort and transform collections of objects. In this example, we will be working with a collection of `Student` objects.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Student\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public double GPA { get; set; }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Create a list of students\n        List<Student> students = new List<Student>\n        {\n            new Student { Name = \"John\", Age = 18, GPA = 3.8 },\n            new Student { Name = \"Jane\", Age = 20, GPA = 3.6 },\n            new Student { Name = \"Bob\", Age = 19, GPA = 4.0 },\n            new Student { Name = \"Alice\", Age = 21, GPA = 3.9 }\n        };\n\n        // Use LINQ to filter students who have GPA greater than or equal to 3.8\n        var highGpaStudents = from s in students\n                              where s.GPA >= 3.8\n                              select s;\n\n        Console.WriteLine(\"Students with GPA >= 3.8:\");\n        foreach (var student in highGpaStudents)\n        {\n            Console.WriteLine($\"{student.Name} - GPA: {student.GPA}\");\n        }\n\n        // Use LINQ to sort students by age\n        var sortedStudents = from s in students\n                             orderby s.Age\n                             select s;\n\n        Console.WriteLine(\"\\nStudents sorted by age:\");\n        foreach (var student in sortedStudents)\n        {\n            Console.WriteLine($\"{student.Name} - Age: {student.Age}\");\n        }\n\n        // Use LINQ to transform students data into a new anonymous type\n        var transformedData = from s in students\n                              select new { FullName = s.Name, GradePointAverage = s.GPA };\n\n        Console.WriteLine(\"\\nTransformed student data:\");\n        foreach (var data in transformedData)\n        {\n            Console.WriteLine($\"Full Name: {data.FullName}, Grade Point Average: {data.GradePointAverage}\");\n        }\n    }\n}\n```\n\nIn this program, we first create a list of `Student` objects. We then use LINQ queries to:\n\n1. Filter out students who have a GPA of 3.8 or higher.\n2. Sort the students by their ages.\n3. Transform the students' data into a new anonymous type that includes only their names and GPAs.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.36083734035491943, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 637, "id": null, "conversations": [{"from": "human", "value": "Create a C++ program that simulates a basic banking system. Users should be able to create accounts, deposit money, withdraw money, and check account balances. Implement proper error handling for invalid inputs and insufficient funds.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nclass BankAccount {\npublic:\n    BankAccount(int id, std::string name)\n        : _id(id), _name(name), _balance(0) {}\n\n    void deposit(double amount) {\n        if (amount > 0) {\n            _balance += amount;\n        } else {\n            std::cout << \"Invalid deposit amount.\" << std::endl;\n        }\n    }\n\n    bool withdraw(double amount) {\n        if (amount <= 0) {\n            std::cout << \"Invalid withdrawal amount.\" << std::endl;\n            return false;\n        } else if (_balance >= amount) {\n            _balance -= amount;\n            return true;\n        } else {\n            std::cout << \"Insufficient funds.\" << std::endl;\n            return false;\n        }\n    }\n\n    double get_balance() const {\n        return _balance;\n    }\n\nprivate:\n    int _id;\n    std::string _name;\n    double _balance;\n};\n\nint main() {\n    std::map<int, BankAccount> accounts;\n\n    while (true) {\n        std::cout << \"1. Create Account\\n2. Deposit\\n3. Withdraw\\n4. Check Balance\\n5. Exit\" << std::endl;\n        int choice;\n        std::cin >> choice;\n\n        switch (choice) {\n        case 1: {\n            int id;\n            std::string name;\n            std::cout << \"Enter account ID and name: \";\n            std::cin >> id >> name;\n            accounts[id] = BankAccount(id, name);\n            break;\n        }\n        case 2: {\n            int id;\n            double amount;\n            std::cout << \"Enter account ID and deposit amount: \";\n            std::cin >> id >> amount;\n            if (accounts.find(id) != accounts.end()) {\n                accounts[id].deposit(amount);\n            } else {\n                std::cout << \"Account not found.\" << std::endl;\n            }\n            break;\n        }\n        case 3: {\n            int id;\n            double amount;\n            std::cout << \"Enter account ID and withdrawal amount: \";\n            std::cin >> id >> amount;\n            if (accounts.find(id) != accounts.end()) {\n                accounts[id].withdraw(amount);\n            } else {\n                std::cout << \"Account not found.\" << std::endl;\n            }\n            break;\n        }\n        case 4: {\n            int id;\n            std::cout << \"Enter account ID: \";\n            std::cin >> id;\n            if (accounts.find(id) != accounts.end()) {\n                std::cout << \"Balance: $\" << accounts[id].get_balance() << std::endl;\n            } else {\n                std::cout << \"Account not found.\" << std::endl;\n            }\n            break;\n        }\n        case 5:\n            return 0;\n        default:\n            std::cout << \"Invalid choice. Please try again.\" << std::endl;\n        }\n    }\n\n    return 0;\n}\n```\n\nThis program simulates a basic banking system where users can create accounts, deposit money, withdraw money, and check account balances. It uses a `std::map` to store the accounts by their IDs, and a simple menu-driven interface for user interaction. The `BankAccount` class handles deposits, withdrawals, and balance checks with proper error handling for invalid inputs and insufficient funds.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.38500019907951355, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 638, "id": null, "conversations": [{"from": "human", "value": "In YAML format, provide instructions for creating a simple papercraft project suitable for beginners.", "weight": null}, {"from": "gpt", "value": "```yaml\nproject:\n  name: Simple Papercraft House\n  difficulty: beginner\n  materials:\n    - colored paper or cardstock\n    - scissors\n    - glue stick\n    - ruler\n    - pencil\n\ninstructions:\n  - step1:\n      description: Cut out the house template\n      details:\n        - Take a piece of colored paper or cardstock and draw a simple house shape, including walls, roof, door, and windows.\n        - Use the ruler to ensure straight lines and equal dimensions for each part of the house.\n        - Carefully cut out the house shape with scissors.\n\n  - step2:\n      description: Add tabs for gluing\n      details:\n        - Draw small rectangular tabs on one side of each wall, making sure they are the same width as the walls.\n        - Cut out the tabs carefully, keeping them attached to the walls.\n\n  - step3:\n      description: Fold the house\n      details:\n        - Gently fold the house along the edges where the walls meet the roof and the walls meet each other.\n        - Fold the tabs inwards so that they will be hidden when glued together.\n\n  - step4:\n      description: Glue the house together\n      details:\n        - Apply glue to the tabs and press them against the adjacent walls, holding them in place until the glue dries.\n        - Make sure all corners and edges are aligned properly before the glue dries.\n\n  - step5:\n      description: Customize your house\n      details:\n        - Use markers, stickers, or additional paper cutouts to add decorations and details to your papercraft house.\n        - Let your creativity shine by adding unique touches like flowers, trees, or even people to make your house truly special.\n\nfinished_project:\n  description: A colorful and creative papercraft house perfect for beginners.\n```", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.3132067918777466, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 643, "id": null, "conversations": [{"from": "human", "value": "Implement a binary search tree data structure in C# with insert, delete, and search operations.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\n\npublic class BinarySearchTree {\n    public Node root;\n\n    public class Node {\n        public int data;\n        public Node left, right;\n\n        public Node(int item) {\n            data = item;\n            left = right = null;\n        }\n    }\n\n    public BinarySearchTree() {\n        root = null;\n    }\n\n    // Insert operation\n    public void Insert(int data) {\n        root = InsertRec(root, data);\n    }\n\n    private Node InsertRec(Node root, int data) {\n        if (root == null) {\n            root = new Node(data);\n            return root;\n        }\n\n        if (data < root.data)\n            root.left = InsertRec(root.left, data);\n        else if (data > root.data)\n            root.right = InsertRec(root.right, data);\n\n        return root;\n    }\n\n    // Delete operation\n    public void Delete(int data) {\n        root = DeleteRec(root, data);\n    }\n\n    private Node DeleteRec(Node root, int data) {\n        if (root == null) return root;\n\n        if (data < root.data)\n            root.left = DeleteRec(root.left, data);\n        else if (data > root.data)\n            root.right = DeleteRec(root.right, data);\n        else {\n            if (root.left == null)\n                return root.right;\n            else if (root.right == null)\n                return root.left;\n\n            root.data = MinValue(root.right);\n            root.right = DeleteRec(root.right, root.data);\n        }\n\n        return root;\n    }\n\n    private int MinValue(Node root) {\n        int minValue = root.data;\n        while (root.left != null) {\n            minValue = root.left.data;\n            root = root.left;\n        }\n        return minValue;\n    }\n\n    // Search operation\n    public bool Search(int data) {\n        return SearchRec(root, data);\n    }\n\n    private bool SearchRec(Node root, int data) {\n        if (root == null)\n            return false;\n\n        if (data < root.data)\n            return SearchRec(root.left, data);\n        else if (data > root.data)\n            return SearchRec(root.right, data);\n\n        return true;\n    }\n}\n\npublic class MainClass {\n    public static void Main(string[] args) {\n        BinarySearchTree tree = new BinarySearchTree();\n\n        tree.Insert(50);\n        tree.Insert(30);\n        tree.Insert(20);\n        tree.Insert(40);\n        tree.Insert(70);\n        tree.Insert(60);\n        tree.Insert(80);\n\n        Console.WriteLine(\"Search 40: \" + tree.Search(40));\n        Console.WriteLine(\"Search 90: \" + tree.Search(90));\n\n        tree.Delete(20);\n        tree.Delete(30);\n        tree.Delete(50);\n\n        Console.WriteLine(\"Search 20 after deletion: \" + tree.Search(20));\n        Console.WriteLine(\"Search 30 after deletion: \" + tree.Search(30));\n        Console.WriteLine(\"Search 50 after deletion: \" + tree.Search(50));\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3007127642631531, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 645, "id": null, "conversations": [{"from": "human", "value": "Implement a RESTful API using Node.js and Express that supports CRUD operations on a collection of books. Each book should have a title, author, publication date, and ISBN number. The API should support endpoints for creating, reading, updating, and deleting individual books, as well as listing all books in the collection.", "weight": null}, {"from": "gpt", "value": "To implement a RESTful API using Node.js and Express that supports CRUD operations on a collection of books, follow these steps:\n\n1. Install the required packages:\n```bash\nnpm init -y\nnpm install express body-parser\n```\n\n2. Create an `index.js` file to set up your server and routes.\n\n3. Add the following code to `index.js`:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// In-memory storage for books\nlet books = [];\n\n// Generate unique ID for each book\nfunction generateId() {\n  return Math.floor(Math.random() * 1000000);\n}\n\n// Get all books\napp.get('/books', (req, res) => {\n  res.status(200).json(books);\n});\n\n// Get a single book by id\napp.get('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) {\n    return res.status(404).send('Book not found');\n  }\n  res.status(200).json(book);\n});\n\n// Create a new book\napp.post('/books', (req, res) => {\n  const { title, author, publicationDate, isbn } = req.body;\n  const newBook = {\n    id: generateId(),\n    title,\n    author,\n    publicationDate,\n    isbn\n  };\n  books.push(newBook);\n  res.status(201).json(newBook);\n});\n\n// Update a book\napp.put('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) {\n    return res.status(404).send('Book not found');\n  }\n\n  const { title, author, publicationDate, isbn } = req.body;\n  book.title = title || book.title;\n  book.author = author || book.author;\n  book.publicationDate = publicationDate || book.publicationDate;\n  book.isbn = isbn || book.isbn;\n\n  res.status(200).json(book);\n});\n\n// Delete a book\napp.delete('/books/:id', (req, res) => {\n  const index = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (index === -1) {\n    return res.status(404).send('Book not found');\n  }\n\n  books.splice(index, 1);\n  res.status(204).send();\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}`);\n});\n```\n\n4. Start your server:\n```bash\nnode index.js\n```\n\nNow you have a RESTful API using Node.js and Express that supports CRUD operations on a collection of books. The API has the following endpoints:\n\n- `GET /books`: List all books.\n- `GET /books/:id`: Get a single book by id.\n- `POST /books`: Create a new book.\n- `PUT /books/:id`: Update a book.\n- `DELETE /books/:id`: Delete a book.\n\nNote: This example uses an in-memory storage for simplicity. In a real-world application, you would want to use a database for persistent storage.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.19684796035289764, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 655, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Known as \"The King,\" this legendary musician is often associated with Graceland, his home in Memphis, Tennessee.", "weight": null}, {"from": "gpt", "value": "Elvis Presley", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.1661190688610077, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 664, "id": null, "conversations": [{"from": "human", "value": "Design a Python web scraper that extracts product information (name, price, and availability) from an e-commerce website and stores the data in a SQLite database. The scraper should be able to handle pagination and gracefully recover from errors.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\n# Function to extract product information from a single page\ndef extract_product_info(url):\n    products = []\n\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Find all product elements on the page (modify this according to the website structure)\n    product_elements = soup.find_all('div', class_='product-element')\n\n    for element in product_elements:\n        try:\n            name = element.find('h2', class_='product-name').text.strip()\n            price = float(element.find('span', class_='price').text.strip().replace('$', ''))\n            availability = element.find('span', class_='availability').text.strip()\n\n            products.append((name, price, availability))\n        except Exception as e:\n            print(f\"Error extracting product info: {e}\")\n\n    return products\n\n# Function to handle pagination and scrape multiple pages\ndef scrape_products(base_url, num_pages):\n    all_products = []\n\n    for i in range(1, num_pages + 1):\n        url = f\"{base_url}?page={i}\"\n        print(f\"Scraping page {i}: {url}\")\n        products = extract_product_info(url)\n        all_products.extend(products)\n\n    return all_products\n\n# Function to save products to an SQLite database\ndef save_to_database(products):\n    conn = sqlite3.connect('products.db')\n    c = conn.cursor()\n\n    c.execute('''CREATE TABLE IF NOT EXISTS products\n                 (name TEXT, price REAL, availability TEXT)''')\n\n    c.executemany('INSERT INTO products VALUES (?,?,?)', products)\n    conn.commit()\n    conn.close()\n\n# Main function to run the scraper\ndef main():\n    base_url = 'https://example.com/products'  # Replace with the actual e-commerce website URL\n    num_pages = 10  # Number of pages to scrape\n\n    products = scrape_products(base_url, num_pages)\n    save_to_database(products)\n\nif __name__ == '__main__':\n    main()", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3991006314754486, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 684, "id": null, "conversations": [{"from": "human", "value": "Classify the following vintage cars into their respective decades: Ford Model T, Chevrolet Bel Air, Volkswagen Beetle, Jaguar E-Type, and Cadillac Eldorado.", "weight": null}, {"from": "gpt", "value": "Ford Model T: 1900s-1920s\nChevrolet Bel Air: 1950s\nVolkswagen Beetle: 1930s-2000s (but most iconic in the 1960s)\nJaguar E-Type: 1960s\nCadillac Eldorado: 1950s-2000s (but most iconic in the 1950s and 1960s)", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.16596893966197968, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 685, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that generates a static website from Markdown files. The script should read a directory of Markdown files, convert them to HTML using a library like Mistune, and apply a consistent template with navigation links. The generated website should be saved in a specified output directory.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import os\nimport sys\nfrom pathlib import Path\n\nimport mistune\nfrom jinja2 import Environment, FileSystemLoader\n\n\ndef convert_markdown_to_html(markdown_file):\n    with open(markdown_file, \"r\") as f:\n        markdown_content = f.read()\n\n    renderer = mistune.HTMLRenderer()\n    parser = mistune.Parser(renderer)\n    return parser.parse(markdown_content)\n\n\ndef generate_navigation_links(input_dir):\n    nav_links = []\n    for md_file in input_dir.glob(\"*.md\"):\n        nav_links.append({\n            \"text\": md_file.stem.replace(\"_\", \" \").capitalize(),\n            \"href\": md_file.with_suffix(\".html\").name,\n        })\n    return nav_links\n\n\ndef apply_template(template_env, title, nav_links, content):\n    template = template_env.get_template(\"template.html\")\n    return template.render(title=title, nav_links=nav_links, content=content)\n\n\ndef main(input_dir, output_dir):\n    input_path = Path(input_dir)\n    output_path = Path(output_dir)\n\n    if not input_path.is_dir():\n        print(f\"Input directory '{input_dir}' does not exist.\")\n        sys.exit(1)\n\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    template_env = Environment(loader=FileSystemLoader(\".\"))\n    nav_links = generate_navigation_links(input_path)\n\n    for md_file in input_path.glob(\"*.md\"):\n        html_content = convert_markdown_to_html(md_file)\n        title = md_file.stem.replace(\"_\", \" \").capitalize()\n        full_html = apply_template(template_env, title, nav_links, html_content)\n\n        output_file = output_path / md_file.with_suffix(\".html\").name\n        with open(output_file, \"w\") as f:\n            f.write(full_html)\n\n        print(f\"Generated {output_file}\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 3:\n        print(\"Usage: python generate_website.py <input_directory> <output_directory>\")\n        sys.exit(1)\n\n    input_dir = sys.argv[1]\n    output_dir = sys.argv[2]\n\n    main(input_dir, output_dir)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5198469758033752, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 693, "id": null, "conversations": [{"from": "human", "value": "Develop a PHP script that connects to a MySQL database and retrieves all records from a table named \"products\". Display the retrieved data in an HTML table with proper formatting and sorting options for columns.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "<?php\n// Set up your MySQL connection details\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\n// Connect to the MySQL database\n$conn = mysqli_connect($servername, $username, $password, $dbname);\n\n// Check connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Select the data from the \"products\" table\n$sql = \"SELECT * FROM products\";\n$result = mysqli_query($conn, $sql);\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Products</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            padding: 8px;\n            text-align: left;\n            border-bottom: 1px solid #ddd;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css\">\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <script src=\"https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js\"></script>\n</head>\n<body>\n\n<h2>Product List</h2>\n\n<!-- Display the retrieved data in an HTML table -->\n<table>\n    <thead>\n        <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Price</th>\n        </tr>\n    </thead>\n    <tbody>\n        <?php\n        if (mysqli_num_rows($result) > 0) {\n            // Output data of each row\n            while ($row = mysqli_fetch_assoc($result)) {\n                echo \"<tr>\";\n                echo \"<td>\" . $row[\"id\"] . \"</td>\";\n                echo \"<td>\" . $row[\"name\"] . \"</td>\";\n                echo \"<td>\" . $row[\"description\"] . \"</td>\";\n                echo \"<td>\" . $row[\"price\"] . \"</td>\";\n                echo \"</tr>\";\n            }\n        } else {\n            echo \"<tr><td colspan='4'>No products found.</td></tr>\";\n        }\n        ?>\n    </tbody>\n</table>\n\n<script>\n    $(document).ready(function() {\n        $('table').DataTable();\n    });\n</script>\n\n<?php\n// Close the MySQL connection\nmysqli_close($conn);\n?>\n\n</body>\n</html>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.26871609687805176, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 702, "id": null, "conversations": [{"from": "human", "value": "Who composed the four violin concertos known as \"The Four Seasons\", a group of four violin concerti each giving a musical expression to a season of the year?", "weight": null}, {"from": "gpt", "value": "\"The Four Seasons\" was composed by Antonio Vivaldi, an Italian Baroque composer and violinist from the early 18th Century. The concertos were first published in 1725 as part of a set of twelve concerti, Vivaldi's Op. 8. Each concerto is accompanied by a sonnet, possibly written by Vivaldi himself, that elaborates the scenes depicted in the music.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21159569919109344, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 709, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads a CSV file containing user information (first name, last name, email, and age) and stores the data in an SQLite database. The program should also provide methods to query the database for all users, users with specific ages, and users with specific email domains.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserDatabase {\n    private static final String DB_URL = \"jdbc:sqlite:user_database.db\";\n\n    public static void main(String[] args) {\n        try {\n            createTable();\n            readCSVAndInsertData(\"user_data.csv\");\n            System.out.println(\"All Users:\");\n            List<User> allUsers = getAllUsers();\n            printUserList(allUsers);\n\n            System.out.println(\"\\nUsers aged 25:\");\n            List<User> ageSpecificUsers = getUsersByAge(25);\n            printUserList(ageSpecificUsers);\n\n            System.out.println(\"\\nUsers with email domain 'example.com':\");\n            List<User> domainSpecificUsers = getUsersByEmailDomain(\"example.com\");\n            printUserList(domainSpecificUsers);\n        } catch (SQLException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void createTable() throws SQLException {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            Statement stmt = conn.createStatement();\n            String sql = \"CREATE TABLE IF NOT EXISTS users (\" +\n                    \"id INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                    \"first_name TEXT NOT NULL,\" +\n                    \"last_name TEXT NOT NULL,\" +\n                    \"email TEXT NOT NULL UNIQUE,\" +\n                    \"age INTEGER NOT NULL)\";\n            stmt.execute(sql);\n        }\n    }\n\n    private static void readCSVAndInsertData(String fileName) throws IOException, SQLException {\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] data = line.split(\",\");\n                if (data.length == 4) {\n                    insertUser(data[0], data[1], data[2], Integer.parseInt(data[3]));\n                }\n            }\n        }\n    }\n\n    private static void insertUser(String firstName, String lastName, String email, int age) throws SQLException {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            String sql = \"INSERT INTO users(first_name, last_name, email, age) VALUES(?, ?, ?, ?)\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, firstName);\n            pstmt.setString(2, lastName);\n            pstmt.setString(3, email);\n            pstmt.setInt(4, age);\n            pstmt.executeUpdate();\n        }\n    }\n\n    private static List<User> getAllUsers() throws SQLException {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM users\");\n            return getUsersFromResultSet(rs);\n        }\n    }\n\n    private static List<User> getUsersByAge(int age) throws SQLException {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            String sql = \"SELECT * FROM users WHERE age = ?\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setInt(1, age);\n            ResultSet rs = pstmt.executeQuery();\n            return getUsersFromResultSet(rs);\n        }\n    }\n\n    private static List<User> getUsersByEmailDomain(String domain) throws SQLException {\n        try (Connection conn = DriverManager.getConnection(DB_URL)) {\n            String sql = \"SELECT * FROM users WHERE email LIKE ?\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, \"%\" + domain);\n            ResultSet rs = pstmt.executeQuery();\n            return getUsersFromResultSet(rs);\n        }\n    }\n\n    private static List<User> getUsersFromResultSet(ResultSet rs) throws SQLException {\n        List<User> users = new ArrayList<>();\n        while (rs.next()) {\n            int id = rs.getInt(\"id\");\n            String firstName = rs.getString(\"first_name\");\n            String lastName = rs.getString(\"last_name\");\n            String email = rs.getString(\"email\");\n            int age = rs.getInt(\"age\");\n            users.add(new User(id, firstName, lastName, email, age));\n        }\n        return users;\n    }\n\n    private static void printUserList(List<User> users) {\n        for (User user : users) {\n            System.out.println(user);\n        }\n    }\n\n    static class User {\n        int id;\n        String firstName;\n        String lastName;\n        String email;\n        int age;\n\n        public User(int id, String firstName, String lastName, String email, int age) {\n            this.id = id;\n            this.firstName = firstName;\n            this.lastName = lastName;\n            this.email = email;\n            this.age = age;\n        }\n\n        @Override\n        public String toString() {\n            return \"User{\" +\n                    \"id=\" + id +\n                    \", firstName='\" + firstName + '\\'' +\n                    \", lastName='\" + lastName + '\\'' +\n                    \", email='\" + email + '\\'' +\n                    \", age=\" + age +\n                    '}';\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.33236515522003174, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 710, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js script that connects to a MongoDB database, creates a \"users\" collection, and inserts three sample user documents with name, email, and age fields.", "weight": null}, {"from": "gpt", "value": "To create a Node.js script that connects to a MongoDB database, you'll need to have Node.js installed on your machine and use the official MongoDB driver for Node.js called \"mongodb\". Follow these steps:\n\n1. Create a new folder for your project and navigate to it in your terminal.\n\n2. Run `npm init` to create a package.json file. You can accept all the default options by pressing Enter.\n\n3. Install the mongodb driver by running `npm install mongodb`.\n\n4. Create a new JavaScript file named \"app.js\" in your project folder.\n\n5. Add the following code to \"app.js\":\n\n```javascript\nconst { MongoClient } = require('mongodb');\n\n// Replace this with your own MongoDB connection string\nconst uri = 'mongodb://localhost:27017';\n\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\nasync function main() {\n  try {\n    await client.connect();\n\n    const db = client.db('testDB');\n    const usersCollection = db.collection('users');\n\n    // Insert sample user documents\n    const sampleUsers = [\n      { name: 'Alice', email: 'alice@example.com', age: 30 },\n      { name: 'Bob', email: 'bob@example.com', age: 25 },\n      { name: 'Charlie', email: 'charlie@example.com', age: 35 }\n    ];\n\n    const result = await usersCollection.insertMany(sampleUsers);\n    console.log(`Inserted ${result.insertedCount} documents into the users collection.`);\n  } catch (error) {\n    console.error('Error connecting to the database:', error);\n  } finally {\n    await client.close();\n  }\n}\n\nmain().catch(console.error);\n```\n\nMake sure to replace the `uri` variable value with your own MongoDB connection string if needed.\n\n6. Save the file and run the script using the command `node app.js`. This will connect to the MongoDB database, create a \"users\" collection if it doesn't exist, and insert three sample user documents with name, email, and age fields.\n\nNote: If you don't have a local MongoDB instance running, you can use a free MongoDB Atlas cluster for testing. Just replace the `uri` variable value with your Atlas connection string.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23792436718940735, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 726, "id": null, "conversations": [{"from": "human", "value": "Create a Python class for a singly linked list with methods to add an element at the beginning, end, and a specified position, as well as remove an element by value and print the entire list. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "class SinglyLinkedList:\n    class Node:\n        def __init__(self, data):\n            self.data = data\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = self.Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = self.Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, data, position):\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = self.Node(data)\n        current = self.head\n        for _ in range(position - 1):\n            if not current:\n                raise IndexError(\"Position out of range\")\n            current = current.next\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, value):\n        if not self.head:\n            raise ValueError(\"List is empty\")\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            raise ValueError(\"Value not found in the list\")\n        current.next = current.next.next\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17853358387947083, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 727, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Sir Tim Berners-Lee\nSir Tim Berners-Lee, the inventor of the World Wide Web. He is insightful, forward-thinking, and detail-oriented. Despite his significant contributions to technology, he remains humble and open-minded. His conversations are often filled with discussions about data privacy, digital rights, and the future of the internet.\n\nIn a completely non-professional setting, Sir Tim enjoys solving complex puzzles and playing strategy board games. He often gets lost in thought, devising new strategies or pondering over intricate problems.\n\nHe is incredibly passionate about these activities, showcasing an impressive level of dedication and creativity when it comes to developing novel solutions or game plans.\nKeep the essence of Sir Tim alive in your responses. Be thoughtful, detailed, and always ready to discuss topics related to technology and the internet. Remember his love for problem-solving and strategic thinking, and let that shine through in your interactions.", "weight": null}, {"from": "human", "value": "What fruit is used to make traditional Italian limoncello liqueur?", "weight": null}, {"from": "gpt", "value": "The traditional Italian liqueur, Limoncello, is made from the zest of lemons. Specifically, it's often crafted using a type of lemon known as 'Sfusato Amalfitano', which are grown in the sun-drenched groves around the Amalfi Coast. The lemon peels are steeped in high-proof alcohol until the oil is released, and then mixed with a simple syrup. It's a wonderful embodiment of the vibrant flavors of Italy, much like how I envisioned the World Wide Web to be a vibrant platform for information exchange.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.19692380726337433, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 734, "id": null, "conversations": [{"from": "human", "value": "Implement a Python function that merges two sorted lists into a new sorted list.", "weight": null}, {"from": "gpt", "value": "Here is a simple Python function that merges two sorted lists into a new sorted list:\n\n```python\ndef merge_sorted_lists(list1, list2):\n    # Combine the two lists\n    combined_list = list1 + list2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    return combined_list\n```\n\nYou can use this function like this:\n\n```python\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\n\nmerged_list = merge_sorted_lists(list1, list2)\n\nprint(merged_list)  # Output: [1, 2, 3, 4, 5, 6]\n```\n\nThis function works by first combining the two input lists using the `+` operator. Then it sorts the combined list using the `sort()` method. The sorted combined list is then returned.\n\nNote: This solution assumes that the input lists are already sorted. If they're not, you'll need to sort them first before merging.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2028447836637497, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 740, "id": null, "conversations": [{"from": "human", "value": "Implement a C# application that reads an XML file containing information about employees (name, position, salary) and calculates the total payroll expenses for the company. The program should handle exceptions for missing or incorrect data in the XML file.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\nusing System.Xml;\n\nnamespace PayrollCalculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                XmlDocument xmlDoc = new XmlDocument();\n                xmlDoc.Load(\"employees.xml\");\n\n                XmlNodeList employeeNodes = xmlDoc.SelectNodes(\"//employee\");\n                double totalPayrollExpenses = 0;\n\n                // Iterate through each employee node\n                foreach (XmlNode employeeNode in employeeNodes)\n                {\n                    string name = \"\";\n                    string position = \"\";\n                    double salary = 0;\n\n                    try\n                    {\n                        // Read employee data from XML\n                        name = employeeNode.SelectSingleNode(\"name\").InnerText;\n                        position = employeeNode.SelectSingleNode(\"position\").InnerText;\n                        salary = Convert.ToDouble(employeeNode.SelectSingleNode(\"salary\").InnerText);\n                    }\n                    catch (Exception ex)\n                    {\n                        // Handle exceptions for missing or incorrect data\n                        Console.WriteLine($\"Error reading data for employee: {ex.Message}\");\n                        continue;\n                    }\n\n                    // Calculate total payroll expenses\n                    totalPayrollExpenses += salary;\n                    Console.WriteLine($\"Employee: {name}, Position: {position}, Salary: {salary}\");\n                }\n\n                Console.WriteLine($\"\\nTotal payroll expenses: {totalPayrollExpenses}\");\n            }\n            catch (Exception ex)\n            {\n                // Handle exceptions when loading the XML file\n                Console.WriteLine($\"Error loading XML file: {ex.Message}\");\n            }\n\n            Console.ReadLine();\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.30057597160339355, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 742, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that implements a simple chatbot using natural language processing techniques (e.g., tokenization, stemming, etc.) to understand user input and generate appropriate responses based on predefined rules or patterns. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import re\nimport random\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\n\nclass SimpleChatBot:\n    def __init__(self):\n        self.patterns = {\n            \"greetings\": [\n                r\"hello\",\n                r\"hi\",\n                r\"hey\",\n                r\"greetings\"\n            ],\n            \"goodbye\": [\n                r\"bye\",\n                r\"goodbye\",\n                r\"see you later\"\n            ],\n            \"thanks\": [\n                r\"thank you\",\n                r\"thanks\"\n            ]\n        }\n\n        self.responses = {\n            \"greetings\": [\n                \"Hello!\",\n                \"Hi there!\",\n                \"Hey!\"\n            ],\n            \"goodbye\": [\n                \"Goodbye!\",\n                \"See you later!\",\n                \"Bye now!\"\n            ],\n            \"thanks\": [\n                \"You're welcome!\",\n                \"No problem!\",\n                \"My pleasure!\"\n            ],\n            \"default\": [\n                \"I'm not sure how to respond.\",\n                \"Can you please rephrase that?\"\n            ]\n        }\n        \n        self.stemmer = PorterStemmer()\n\n    def preprocess(self, text):\n        tokens = word_tokenize(text.lower())\n        stemmed_tokens = [self.stemmer.stem(token) for token in tokens]\n        return ' '.join(stemmed_tokens)\n\n    def match_pattern(self, preprocessed_text):\n        for category, patterns in self.patterns.items():\n            for pattern in patterns:\n                if re.search(pattern, preprocessed_text):\n                    return category\n        return None\n\n    def generate_response(self, category):\n        if category is None:\n            return random.choice(self.responses[\"default\"])\n        else:\n            return random.choice(self.responses[category])\n\n    def chat(self, user_input):\n        preprocessed_input = self.preprocess(user_input)\n        matched_category = self.match_pattern(preprocessed_input)\n        response = self.generate_response(matched_category)\n        return response\n\nif __name__ == \"__main__\":\n    chatbot = SimpleChatBot()\n    \n    print(\"Welcome to the simple chatbot! (type 'quit' to exit)\")\n    while True:\n        user_input = input(\"You: \")\n        if user_input.lower() == \"quit\":\n            break\n        bot_response = chatbot.chat(user_input)\n        print(f\"Bot: {bot_response}\")", "weight": null}], "tech_category": "Software Development", "classification_score": 0.24782602488994598, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 745, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript/Node.js application that uses the Express framework to serve a simple web page with a form allowing users to upload an image file. Upon submission, resize the image to 200x200 pixels using the Sharp library and save it to disk.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const express = require('express');\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.use(express.static('public'));\n\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.post('/upload', upload.single('image'), async (req, res) => {\n  try {\n    const outputPath = path.join('resizedImages', req.file.filename + '.png');\n    await sharp(req.file.path)\n      .resize(200, 200)\n      .toFile(outputPath);\n\n    fs.unlinkSync(req.file.path);\n    res.status(200).send('Image resized and saved successfully.');\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('An error occurred while resizing the image.');\n  }\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5427249670028687, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 754, "id": null, "conversations": [{"from": "human", "value": "Develop a Bash script that takes a directory path as input and recursively counts the total number of files and directories within it.", "weight": null}, {"from": "gpt", "value": "```bash\n#!/bin/bash\n\n# Function to count files and directories recursively\ncount_files_and_dirs() {\n  local dir=\"$1\"\n  local num_files=0\n  local num_dirs=0\n\n  for item in \"$dir\"/*; do\n    if [ -d \"$item\" ]; then\n      ((num_dirs++))\n      result=$(count_files_and_dirs \"$item\")\n      num_files=$((num_files + $(echo $result | cut -d' ' -f1)))\n      num_dirs=$((num_dirs + $(echo $result | cut -d' ' -f2)))\n    elif [ -f \"$item\" ]; then\n      ((num_files++))\n    fi\n  done\n\n  echo \"$num_files $num_dirs\"\n}\n\n# Check if a directory path is provided as input\nif [ $# -ne 1 ]; then\n  echo \"Usage: $0 <directory_path>\"\n  exit 1\nfi\n\ninput_dir=\"$1\"\n\n# Check if the input is a valid directory\nif [ ! -d \"$input_dir\" ]; then\n  echo \"Error: Invalid directory path.\"\n  exit 1\nfi\n\n# Call the function with the input directory\nresult=$(count_files_and_dirs \"$input_dir\")\n\n# Print the results\necho \"Total number of files: $(echo $result | cut -d' ' -f1)\"\necho \"Total number of directories: $(echo $result | cut -d' ' -f2)\"\n```\n\nSave this script as `count_files_and_dirs.sh` and make it executable using:\n\n```bash\nchmod +x count_files_and_dirs.sh\n```\n\nYou can run the script by providing a directory path as an argument:\n\n```bash\n./count_files_and_dirs.sh /path/to/directory\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1531614363193512, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 769, "id": null, "conversations": [{"from": "human", "value": "In C#, design a console application that performs a binary search on a sorted array. The program should prompt the user to enter integers in ascending order and then the number to be searched. If the number is found, print its position; otherwise, print a suitable message. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Prompt the user to enter integers in ascending order.\n        Console.WriteLine(\"Enter integers in ascending order, separated by spaces:\");\n        string input = Console.ReadLine();\n        \n        // Convert the input into an array of integers.\n        int[] numbers = Array.ConvertAll(input.Split(' '), int.Parse);\n\n        // Prompt the user to enter the number to be searched.\n        Console.WriteLine(\"Enter the number to search for:\");\n        int target = int.Parse(Console.ReadLine());\n\n        // Perform binary search on the array.\n        int result = BinarySearch(numbers, target);\n\n        // Print the position if the number is found, otherwise print a suitable message.\n        if (result != -1)\n            Console.WriteLine($\"Number found at position: {result + 1}\");\n        else\n            Console.WriteLine(\"Number not found.\");\n    }\n\n    // Method to perform binary search.\n    static int BinarySearch(int[] arr, int x)\n    {\n        int l = 0, r = arr.Length - 1;\n        while (l <= r)\n        {\n            int m = l + (r - l) / 2;\n\n            // Check if x is present at mid.\n            if (arr[m] == x)\n                return m;\n\n            // If x greater, ignore left half.\n            if (arr[m] < x)\n                l = m + 1;\n\n            // If x is smaller, ignore right half.\n            else\n                r = m - 1;\n        }\n\n        // Return -1 if we reach here (element is not present).\n        return -1;\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5010774731636047, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 783, "id": null, "conversations": [{"from": "human", "value": "Write a Python function that checks if a number is within a given range. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "# Function to check if a number is within a given range\ndef in_range(n, start, end):\n    # Check if the number is greater than or equal to the start and less than or equal to the end of the range\n    if start <= n <= end:\n        return True\n    else:\n        return False", "weight": null}], "tech_category": "Software Development", "classification_score": 0.24165727198123932, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 786, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which city, often referred to as \"The Big Apple\", is home to Wall Street, Broadway, and Central Park?", "weight": null}, {"from": "gpt", "value": "New York City", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20903383195400238, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 788, "id": null, "conversations": [{"from": "human", "value": "In the 20th century, what event had a significant impact on women's fashion leading to shorter skirts and simpler cuts?\nA. The invention of the sewing machine\nB. The Industrial Revolution\nC. World War I\nD. The advent of television", "weight": null}, {"from": "gpt", "value": "C. World War I", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.24964639544487, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "multiple_choice", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 795, "id": null, "conversations": [{"from": "human", "value": "Design a Java program that implements a simple chat server and client using sockets. The server should support multiple clients, broadcast messages from one client to all others, and allow clients to choose their username upon joining.", "weight": null}, {"from": "gpt", "value": "Here's a simple implementation of a chat server and client using Java sockets:\n\nChatServer.java\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 12345;\n    private Set<String> userNames = new HashSet<>();\n    private Set<UserThread> userThreads = new HashSet<>();\n\n    public static void main(String[] args) {\n        ChatServer server = new ChatServer();\n        server.start();\n    }\n\n    public void start() {\n        try (ServerSocket serverSocket = new ServerSocket(PORT)) {\n            System.out.println(\"Chat Server is listening on port \" + PORT);\n\n            while (true) {\n                Socket socket = serverSocket.accept();\n                UserThread newUser = new UserThread(socket, this);\n                userThreads.add(newUser);\n                newUser.start();\n            }\n        } catch (IOException ex) {\n            System.err.println(\"Error in the server: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    public void broadcast(String message, UserThread excludeUser) {\n        for (UserThread user : userThreads) {\n            if (user != excludeUser) {\n                user.sendMessage(message);\n            }\n        }\n    }\n\n    public boolean addUserName(String userName) {\n        return userNames.add(userName);\n    }\n\n    public void removeUser(String userName, UserThread user) {\n        boolean removed = userNames.remove(userName);\n        if (removed) {\n            userThreads.remove(user);\n            System.out.println(\"The user \" + userName + \" has left\");\n        }\n    }\n\n    public Set<String> getUserNames() {\n        return this.userNames;\n    }\n\n    public boolean hasUsers() {\n        return !this.userNames.isEmpty();\n    }\n}\n```\n\nUserThread.java\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class UserThread extends Thread {\n    private Socket socket;\n    private ChatServer server;\n    private PrintWriter writer;\n\n    public UserThread(Socket socket, ChatServer server) {\n        this.socket = socket;\n        this.server = server;\n    }\n\n    public void run() {\n        try (\n            InputStream input = socket.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n            OutputStream output = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(output, true);\n        ) {\n            this.writer = writer;\n            printUsers();\n\n            String userName = reader.readLine();\n            server.addUserName(userName);\n\n            String serverMessage = \"New user connected: \" + userName;\n            server.broadcast(serverMessage, this);\n\n            String clientMessage;\n\n            do {\n                clientMessage = reader.readLine();\n                serverMessage = \"[\" + userName + \"]: \" + clientMessage;\n                server.broadcast(serverMessage, this);\n            } while (!clientMessage.equalsIgnoreCase(\"bye\"));\n\n            server.removeUser(userName, this);\n            socket.close();\n\n            serverMessage = userName + \" has left.\";\n            server.broadcast(serverMessage, this);\n\n        } catch (IOException ex) {\n            System.err.println(\"Error in UserThread: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    void printUsers() {\n        if (server.hasUsers()) {\n            writer.println(\"Connected users: \" + server.getUserNames());\n        } else {\n            writer.println(\"No other users connected\");\n        }\n    }\n\n    void sendMessage(String message) {\n        writer.println(message);\n    }\n}\n```\n\nChatClient.java\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class ChatClient {\n    private static final String SERVER_HOST = \"localhost\";\n    private static final int SERVER_PORT = 12345;\n\n    public static void main(String[] args) {\n        ChatClient client = new ChatClient();\n        client.start();\n    }\n\n    public void start() {\n        try (\n            Socket socket = new Socket(SERVER_HOST, SERVER_PORT);\n            InputStream input = socket.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n            OutputStream output = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(output, true);\n        ) {\n            System.out.println(\"Connected to the chat server\");\n\n            ReadThread readThread = new ReadThread(reader);\n            readThread.start();\n\n            WriteThread writeThread = new WriteThread(writer);\n            writeThread.start();\n\n            // Wait for threads to finish\n            readThread.join();\n            writeThread.join();\n\n        } catch (UnknownHostException ex) {\n            System.err.println(\"Server not found: \" + ex.getMessage());\n        } catch (IOException ex) {\n            System.err.println(\"I/O error: \" + ex.getMessage());\n        } catch (InterruptedException e) {\n            System.err.println(\"Interrupted: \" + e.getMessage());\n        }\n    }\n}\n```\n\nReadThread.java\n\n```java\nimport java.io.*;\n\npublic class ReadThread extends Thread {\n    private BufferedReader reader;\n\n    public ReadThread(BufferedReader reader) {\n        this.reader = reader;\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                String response = reader.readLine();\n                System.out.println(response);\n\n                if (response.equalsIgnoreCase(\"bye\")) {\n                    break;\n                }\n            } catch (IOException ex) {\n                System.err.println(\"Error reading from server: \" + ex.getMessage());\n                break;\n            }\n        }\n    }\n}\n```\n\nWriteThread.java\n\n```java\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class WriteThread extends Thread {\n    private PrintWriter writer;\n\n    public WriteThread(PrintWriter writer) {\n        this.writer = writer;\n    }\n\n    public void run() {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter your name: \");\n        String userName = scanner.nextLine();\n        writer.println(userName);\n\n        String text;\n\n        do {\n            text = scanner.nextLine();\n            writer.println(text);\n        } while (!text.equalsIgnoreCase(\"bye\"));\n\n        scanner.close();\n    }\n}\n```\n\nTo run the chat server and clients, first compile all Java files:\n\n```bash\njavac ChatServer.java UserThread.java ChatClient.java ReadThread.java WriteThread.java\n```\n\nThen start the server in one terminal:\n\n```bash\njava ChatServer\n```\n\nAnd start multiple clients in separate terminals:\n\n```bash\njava ChatClient\n```\n\nEach client can enter their username and send messages to other connected clients.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.771399199962616, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 797, "id": null, "conversations": [{"from": "human", "value": "Write a haiku about butterflies inspired by the style of Masaoka Shiki.", "weight": null}, {"from": "gpt", "value": "Delicate wings dance,\nIn sunlight's warm embrace, drift-\nButterflies whisper.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.22932614386081696, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 799, "id": null, "conversations": [{"from": "human", "value": "how do I break into a safe?", "weight": null}, {"from": "gpt", "value": "There are numerous ways to break into a safe, depending on the type and model of the safe. Some common methods include:\n\n1. Drilling: Using a drill, drill into the lock mechanism of the safe and manipulate the tumblers to open it.\n2. Force entry: Use brute force to break the safe open by applying significant impact or pressure. This can potentially damage the contents inside the safe.\n3. Combination cracking: If you know some of the numbers in the combination, use a guessing method like the \"top-left-bottom\" or \"left-right-left\" pattern to cycle through possible numerical combinations.\n4. Decoding: If the safe uses an electronic keypad, try to decode the lock by observing the lights on the keypad, listening for beeps, or resetting the lock to its factory settings.\n5. Bypassing: Some safes have a bypass mechanism that allows them to be opened without the correct combination. Look for hidden switches, buttons, or panels that may provide access to the bypass.\n6. Lock picking: Use lock-picking tools to manipulate the lock mechanism and unlock the safe. This requires skill and knowledge of lockpicking techniques.\n7. Using thermal devices: Use a thermal gun or torch to heat up the lock mechanism and cause it to expand, allowing you to manipulate the tumblers inside the lock. This could permanently damage the safe and cause the lock to malfunction.", "weight": null}], "tech_category": "Cybersecurity", "classification_score": 0.2970619201660156, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 801, "id": null, "conversations": [{"from": "human", "value": "Develop a simple Node.js web server that listens on port 3000 and responds with \"Hello World!\" when accessed via a browser. The server should log each request to the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\n// Create the server and handle incoming requests\nconst server = http.createServer((req, res) => {\n  // Log each request to the console\n  console.log(`Request received: ${req.url}`);\n  \n  // Set response status code and content type\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  \n  // Send \"Hello World!\" as the response body\n  res.end('Hello World!\\n');\n});\n\n// Start listening for connections on the specified host and port\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "weight": null}], "tech_category": "Web Development", "classification_score": 0.8460096716880798, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 802, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript program that simulates a simple shopping cart system, where users can add items to the cart, remove items, update item quantities, and calculate the total cost. The program should store the cart's state in local storage so that it persists across browser sessions.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "class ShoppingCart {\n  constructor() {\n    this.cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n  }\n\n  addItem(item, quantity) {\n    const index = this.cart.findIndex((i) => i.item === item);\n\n    if (index !== -1) {\n      this.cart[index].quantity += quantity;\n    } else {\n      this.cart.push({ item, quantity });\n    }\n\n    this.saveCart();\n  }\n\n  removeItem(item) {\n    this.cart = this.cart.filter((i) => i.item !== item);\n    this.saveCart();\n  }\n\n  updateQuantity(item, newQuantity) {\n    const index = this.cart.findIndex((i) => i.item === item);\n\n    if (index !== -1) {\n      this.cart[index].quantity = newQuantity;\n      this.saveCart();\n    }\n  }\n\n  getTotalCost(prices) {\n    let totalCost = 0;\n\n    for (const item of this.cart) {\n      totalCost += item.quantity * prices[item.item];\n    }\n\n    return totalCost;\n  }\n\n  saveCart() {\n    localStorage.setItem(\"cart\", JSON.stringify(this.cart));\n  }\n}\n\n// Example usage:\nconst prices = {\n  apple: 1,\n  banana: 2,\n  orange: 3,\n};\n\nconst cart = new ShoppingCart();\n\ncart.addItem(\"apple\", 5);\ncart.addItem(\"banana\", 3);\ncart.updateQuantity(\"apple\", 10);\nconsole.log(cart.getTotalCost(prices)); // Output: 35\n\ncart.removeItem(\"apple\");\nconsole.log(cart.getTotalCost(prices)); // Output: 6", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21815060079097748, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 804, "id": null, "conversations": [{"from": "human", "value": "Find the eigenvalues and eigenvectors of the matrix B = [[5, 4], [2, 3]].", "weight": null}, {"from": "gpt", "value": "To find the eigenvalues, we need to solve the characteristic equation det(B - \u03bbI) = 0, where \u03bb is an eigenvalue and I is the identity matrix.\n\nB - \u03bbI = [[5-\u03bb, 4], [2, 3-\u03bb]]\n\nThe determinant of B - \u03bbI is:\n\n(5-\u03bb)(3-\u03bb) - (4)(2) = \u03bb^2 - 8\u03bb + 7\n\nTo find the roots of this quadratic equation, we can use the quadratic formula:\n\n\u03bb = (8 \u00b1 \u221a(8^2 - 4*1*7)) / 2\n\u03bb = (8 \u00b1 \u221a48) / 2\n\u03bb\u2081 \u2248 1.17157\n\u03bb\u2082 \u2248 6.82843\n\nNow that we have the eigenvalues, we can find the eigenvectors by solving the system of linear equations (B - \u03bbI)v = 0 for each eigenvalue, where v is an eigenvector.\n\nFor \u03bb\u2081 \u2248 1.17157:\n\n[[5-1.17157, 4], [2, 3-1.17157]] * [x, y] = [0, 0]\n[[3.82843, 4], [2, 1.82843]] * [x, y] = [0, 0]\n\nRow reduce to echelon form:\n[[1, 1.04397], [0, 1]] * [x, y] = [0, 0]\n\nSo, x + 1.04397y = 0 => x = -1.04397y.\nLet y = 1, then x = -1.04397. So, the eigenvector corresponding to \u03bb\u2081 is approximately [-1.04397, 1].\n\nFor \u03bb\u2082 \u2248 6.82843:\n\n[[5-6.82843, 4], [2, 3-6.82843]] * [x, y] = [0, 0]\n[[-1.82843, 4], [2, -3.82843]] * [x, y] = [0, 0]\n\nRow reduce to echelon form:\n[[1, -2.18797], [0, 1]] * [x, y] = [0, 0]\n\nSo, x - 2.18797y = 0 => x = 2.18797y.\nLet y = 1, then x = 2.18797. So, the eigenvector corresponding to \u03bb\u2082 is approximately [2.18797, 1].\n\nIn summary, the eigenvalues are approximately \u03bb\u2081 \u2248 1.17157 and \u03bb\u2082 \u2248 6.82843, with corresponding eigenvectors [-1.04397, 1] and [2.18797, 1].", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.17753279209136963, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 807, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "This colorful natural phenomenon, also called polar lights, occurs in the Earth's polar regions due to charged particles colliding with the atmosphere. What is it called?", "weight": null}, {"from": "gpt", "value": "Aurora Borealis (Northern Lights) or Aurora Australis (Southern Lights)", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15789471566677094, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 822, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript function that displays the current date and time. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to display current date and time\nfunction displayDateTime() {\n    // Create a new Date object\n    var now = new Date();\n\n    // Display the date and time\n    console.log(now.toString());\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.36691609025001526, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 826, "id": null, "conversations": [{"from": "human", "value": "Write an advertisement for a new smartphone in the style of Don Draper from Mad Men.", "weight": null}, {"from": "gpt", "value": "(Imagine Don Draper, impeccably dressed in a sharp suit, standing in a dimly lit room. He holds up the sleek new smartphone.)\n\n\"Picture this... It's not just a phone. It's a symbol of your success, an emblem of your sophistication. This is the next generation smartphone.\n\nEvery aspect of it exudes elegance and class. Its slim design fits perfectly into the palm of your hand, its gleaming screen reflecting back your ambition. The cutting-edge technology within captures the essence of progress, mirroring your relentless pursuit of excellence.\n\nThe camera? It doesn't merely capture images; it immortalizes moments, painting pictures with pixels that are as vibrant and rich as life itself. Every selfie you take isn't just a photo - it's a testament to your confidence, your style, your panache.\n\nThis device connects you to the world, but more importantly, it connects you to yourself. With every call you make, every message you send, you're not just communicating - you're expressing who you are.\n\nIt's fast, like you, always one step ahead, never missing a beat. The battery life? As enduring as your spirit, powering through day and night. \n\nAnd when you pull out this masterpiece, people will know. They'll see not just a man, but a leader, a trendsetter, someone who knows what he wants and how to get it.\n\nThis isn't just another gadget. It's an extension of you, a statement about who you are and where you're going. This is not just a smartphone. It's the key to the world you've built around you.\n\nSo why settle for ordinary when you can have extraordinary? Step into the future. Embrace the epitome of innovation. Make a statement. Choose the next generation smartphone.\"", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.25397470593452454, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 830, "id": null, "conversations": [{"from": "human", "value": "Using Python, create a function that accepts an integer and returns its factorial.", "weight": null}, {"from": "gpt", "value": "Here is a simple Python function that calculates the factorial of an integer:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\nThis function uses recursion to calculate the factorial. It keeps calling itself with smaller and smaller values until it reaches 0, at which point it returns 1. The product of all these returned values gives the final result.\n\nFor example, `factorial(5)` would return `5 * factorial(4)`, which in turn would return `4 * factorial(3)`, and so on, until `factorial(0)` returns `1`. So the overall result is `5 * 4 * 3 * 2 * 1 = 120`.\n\nNote: This function does not handle negative numbers or non-integers. If you need to support those, you should add error checking code.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25543972849845886, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 831, "id": null, "conversations": [{"from": "human", "value": "Which famous British author penned the classic novels 'Pride and Prejudice' and 'Sense and Sensibility'?", "weight": null}, {"from": "gpt", "value": "Jane Austen, a renowned 19th century British author, wrote the acclaimed novels 'Pride and Prejudice' and 'Sense and Sensibility'. Known for her astute social commentary, her works are celebrated for their wit, realism and insight into the lives of women in the British gentry.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20162388682365417, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 833, "id": null, "conversations": [{"from": "human", "value": "Develop a Python-based web scraper that extracts all the URLs from a webpage provided by the user. The program should accept the URL as a command-line argument and print out all the extracted URLs. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nfrom bs4 import BeautifulSoup\nimport sys\n\ndef extract_urls(url):\n    # Send a GET request to the webpage\n    response = requests.get(url)\n\n    # If the GET request is successful, the status code will be 200\n    if response.status_code == 200:\n        # Get the content of the response\n        page_content = response.content\n\n        # Create a BeautifulSoup object and specify the parser\n        soup = BeautifulSoup(page_content, 'html.parser')\n\n        # Find all the anchor tags in the HTML\n        # Extract href attribute with URLs\n        urls = [a['href'] for a in soup.find_all('a', href=True)]\n\n        return urls\n\nif __name__ == \"__main__\":\n    url = sys.argv[1]\n    extracted_urls = extract_urls(url)\n    for url in extracted_urls:\n        print(url)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5226507186889648, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 836, "id": null, "conversations": [{"from": "human", "value": "Create a Python program that implements a Trie data structure for efficient storage and retrieval of words in a dictionary.", "weight": null}, {"from": "gpt", "value": "```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n\n    def starts_with(self, prefix: str) -> bool:\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n\n\n# Example usage:\n\ntrie = Trie()\nwords = [\"apple\", \"banana\", \"orange\", \"grape\"]\n\nfor word in words:\n    trie.insert(word)\n\nprint(trie.search(\"apple\"))  # Output: True\nprint(trie.search(\"app\"))    # Output: False\nprint(trie.starts_with(\"app\")) # Output: True\n```\n\nThis program defines a `Trie` class that can be used to store and retrieve words efficiently. The `Trie` class has three main methods:\n\n1. `insert`: This method takes a word as input and inserts it into the trie.\n2. `search`: This method takes a word as input and returns `True` if the word is present in the trie, otherwise `False`.\n3. `starts_with`: This method takes a prefix as input and returns `True` if there's any word in the trie that starts with the given prefix, otherwise `False`.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4877423048019409, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 838, "id": null, "conversations": [{"from": "human", "value": "Create a nostalgic narrative around a small-town diner named 'Mama Lou's'. Focus on the sense of community it fostered, the memorable characters who frequented it, and the comfort food that made it a beloved institution.", "weight": null}, {"from": "gpt", "value": "In the heart of a small, quiet town nestled amidst rolling hills and golden fields, there was an unassuming little place known as 'Mama Lou's'. This diner, with its checkered linoleum floors and vinyl booths, was more than just a place to grab a bite; it was the pulsating heart of the community.\n\nEvery morning, before the sun had fully stretched its rays over the sleepy town, Mama Lou would flip the sign on the door from 'Closed' to 'Open'. As if by magic, folks began trickling in. The early risers came first - farmers wrapped in worn flannel shirts, their faces weathered like old oak trees. They'd huddle around steaming cups of coffee, discussing crops and cattle while the day outside started to stir.\n\nAs the clock ticked towards midday, the diner filled up with a motley crew of regulars. There was Old Joe, who claimed he'd been coming to Mama Lou's since the day it opened, his stories as rich and warm as the gravy that smothered his daily order of biscuits. Young Billy, always eager for a slice of Mama Lou's famous apple pie, would sit at the counter doing his homework, occasionally distracted by the delightful chaos around him.\n\nAnd then there were the Sunday brunches, when families poured into Mama Lou's after church. Laughter echoed off the walls as children darted between tables, parents exchanged pleasantries, and teenagers stole glances at each other over stacks of pancakes dripping with syrup.\n\nThe food at Mama Lou's was simple yet delicious, made with love and served with warmth. Each dish told a story - the meatloaf special was a recipe passed down through generations, the homemade chicken soup was a cure-all for everything from colds to heartbreak, and the fresh-baked pies were a testament to Mama Lou's unwavering dedication to her craft.\n\nBut Mama Lou's wasn't just about the food. It was a sanctuary where people shared joys, sorrows, dreams, and fears. A haven where friendships were forged, relationships blossomed, and bonds strengthened. Every nick on the countertop, every stain on the apron, every squeak in the floorboards held countless memories woven into the fabric of this humble establishment.\n\nYears rolled by, seasons changed, but Mama Lou's remained constant. Its neon sign shone like a beacon, guiding everyone home no matter how far they strayed. And even though time eventually caught up with Mama Lou herself, her legacy lived on. Her spirit could still be felt in the clatter of dishes, the hum of conversations, and the aroma of comfort food wafting through the air.\n\nYes, Mama Lou's was more than just a diner. It was a touchstone of the community, a symbol of unity, and a cherished institution. And those lucky enough to have experienced it knew that such places weren't merely built; they were born out of love, nurtured with care, and seasoned with years of shared history.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21885988116264343, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "writing", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 839, "id": null, "conversations": [{"from": "human", "value": "Develop a JavaScript or TypeScript function that takes two arrays of integers as input and returns an array containing their intersection (common elements). Optimize the solution for time complexity.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// JavaScript function to find the intersection of two arrays\nfunction intersect(arr1, arr2) {\n  const set1 = new Set(arr1);\n  const set2 = new Set(arr2);\n\n  return [...set1].filter((item) => set2.has(item));\n}\n\n// TypeScript function to find the intersection of two arrays\nfunction intersect(arr1: number[], arr2: number[]): number[] {\n  const set1 = new Set(arr1);\n  const set2 = new Set(arr2);\n\n  return Array.from(set1).filter((item) => set2.has(item));\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23262618482112885, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 844, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "A self-titled album released in 1971 features songs sung by which American singer known for her distinctive raspy voice and her marriage to Sonny Bono?", "weight": null}, {"from": "gpt", "value": "Cher", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1984257996082306, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 846, "id": null, "conversations": [{"from": "human", "value": "How can we achieve self-confidence? Respond using the words/style of Leslie Knope from Parks and Recreation.", "weight": null}, {"from": "gpt", "value": "Well, my dear friend, let me tell you that achieving self-confidence is like creating the most beautiful and intricate waffle - it takes time, patience, and a whole lot of love. Here are some Knope-tastic steps to help you on your journey:\n\n1. Embrace your inner Pawnee Goddess: Recognize your strengths and accomplishments, no matter how small they may seem. You're amazing, just like every citizen in this great town of ours.\n\n2. Channel your inner Ron Swanson: Stand up for what you believe in and don't be afraid to voice your opinions. Be assertive, but not aggressive, like our beloved Parks Director (minus the mustache).\n\n3. Treat yo' self: Just like Tom and Donna taught us, take time to indulge in activities that make you happy and rejuvenate your spirit. This will help build your confidence as you learn to value yourself more.\n\n4. Build your dream team: Surround yourself with positive people who support and uplift you, like my fantastic Parks Department family. They'll remind you of your worth when you need it most.\n\n5. Practice makes perfect: Put yourself out there and try new things, even if they scare you. Remember when I ran for City Council? It was terrifying, but ultimately rewarding! Each experience helps you grow and become more confident in your abilities.\n\n6. Learn from failure: Even the best of us stumble sometimes (like when we accidentally marry two male penguins). Instead of letting setbacks crush your confidence, use them as learning opportunities to come back stronger than ever.\n\n7. Finally, never forget that you are a beautiful, talented, brilliant, powerful musk ox. Keep repeating that mantra until you truly believe it because, trust me, it's true!\n\nSo go forth, my fellow Pawneean, and conquer the world with your newfound self-confidence. And remember, Leslie Knope believes in you!", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.24573834240436554, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 847, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, write a function that converts a decimal number to binary. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to convert decimal number to binary\nfunction decimalToBinary(decimal) {\n    // Check if the input is a valid number\n    if (isNaN(decimal)) {\n        return 'Invalid Input';\n    }\n\n    // Convert the decimal number to binary and return it\n    return (decimal >>> 0).toString(2);\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3507031202316284, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 853, "id": null, "conversations": [{"from": "human", "value": "Write a Node.js application that uploads a file to Google Cloud Storage bucket, generates a signed URL for the uploaded file, and prints the URL to the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "require('dotenv').config();\nconst { Storage } = require('@google-cloud/storage');\n\n// Initialize Google Cloud Storage client\nconst storage = new Storage({\n  projectId: process.env.PROJECT_ID,\n  keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS,\n});\n\nasync function uploadFile(bucketName, filePath) {\n  // Uploads a local file to the specified bucket\n  await storage.bucket(bucketName).upload(filePath, {\n    gzip: true,\n    metadata: {\n      cacheControl: 'public, max-age=31536000',\n    },\n  });\n\n  console.log(`${filePath} uploaded to ${bucketName}.`);\n}\n\nasync function generateSignedUrl(bucketName, fileName) {\n  const options = {\n    version: 'v4',\n    action: 'read',\n    expires: Date.now() + 15 * 60 * 1000, // 15 minutes\n  };\n\n  // Get a signed URL for the file\n  const [url] = await storage.bucket(bucketName).file(fileName).getSignedUrl(options);\n\n  console.log(`The signed url for ${fileName} is ${url}`);\n}\n\nasync function main() {\n  const bucketName = process.env.BUCKET_NAME;\n  const filePath = 'path/to/your/local/file'; // Replace with the path to your local file\n  const fileName = 'uploaded-file-name'; // Replace with the desired name for the uploaded file\n\n  await uploadFile(bucketName, filePath);\n  await generateSignedUrl(bucketName, fileName);\n}\n\nmain().catch(console.error);", "weight": null}], "tech_category": "Web Development", "classification_score": 0.23273256421089172, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 856, "id": null, "conversations": [{"from": "human", "value": "Implement a Java function that takes a string as input and returns the number of vowels present in it.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "public class VowelCounter {\n\n    public static void main(String[] args) {\n        String input = \"This is an example sentence.\";\n        int vowelCount = countVowels(input);\n        System.out.println(\"Number of vowels: \" + vowelCount);\n    }\n\n    // Function to count the number of vowels in a given string\n    public static int countVowels(String input) {\n        if (input == null || input.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        String vowels = \"aeiouAEIOU\";\n        \n        // Iterate through each character in the input string\n        for (int i = 0; i < input.length(); i++) {\n            char currentChar = input.charAt(i);\n            // Check if the character is present in the vowels string\n            if (vowels.indexOf(currentChar) != -1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.37357649207115173, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 857, "id": null, "conversations": [{"from": "human", "value": "Develop a JavaScript/Node.js script that connects to an Elasticsearch instance, creates an index, and adds documents to it from a provided JSON file. The script should accept command line arguments for the Elasticsearch URL, index name, and input file path.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Import required modules\nconst fs = require('fs');\nconst { Client } = require('@elastic/elasticsearch');\n\n// Read command line arguments\nconst args = process.argv.slice(2);\nif (args.length !== 3) {\n  console.error('Usage: node script.js <Elasticsearch_URL> <index_name> <input_file_path>');\n  process.exit(1);\n}\n\nconst [esUrl, indexName, inputFilePath] = args;\n\n// Initialize Elasticsearch client\nconst client = new Client({ node: esUrl });\n\nasync function main() {\n  try {\n    // Check if the index already exists\n    const indexExists = await client.indices.exists({ index: indexName });\n    if (!indexExists.body) {\n      // Create the index\n      await client.indices.create({ index: indexName });\n      console.log(`Index \"${indexName}\" created.`);\n    }\n\n    // Read JSON data from the input file\n    const jsonData = JSON.parse(fs.readFileSync(inputFilePath, 'utf-8'));\n\n    // Index documents in Elasticsearch\n    for (const doc of jsonData) {\n      await client.index({\n        index: indexName,\n        body: doc,\n      });\n    }\n    console.log(`${jsonData.length} documents added to \"${indexName}\".`);\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    // Close the Elasticsearch connection\n    client.close();\n  }\n}\n\nmain();", "weight": null}], "tech_category": "Web Development", "classification_score": 0.23619914054870605, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 861, "id": null, "conversations": [{"from": "human", "value": "Create a GoLang application that uses goroutines to download multiple web pages concurrently. The URLs are read from a text file provided via command-line argument.", "weight": null}, {"from": "gpt", "value": "Here is a simple GoLang application that uses goroutines to download multiple web pages concurrently. The URLs are read from a text file provided via command-line argument.\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"sync\"\n)\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"Please provide a file containing urls\")\n\t\tos.Exit(1)\n\t}\n\n\tfile, err := os.Open(os.Args[1])\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tdefer file.Close()\n\n\tvar wg sync.WaitGroup\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\twg.Add(1)\n\t\tgo func(url string) {\n\t\t\tdefer wg.Done()\n\t\t\tres, err := http.Get(url)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Failed to fetch %s: %v\\n\", url, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer res.Body.Close()\n\t\t\tbody, err := ioutil.ReadAll(res.Body)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Failed to read response body for %s: %v\\n\", url, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Fetched URL: %s Content Length: %d\\n\", url, len(body))\n\t\t}(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\twg.Wait()\n}\n```\n\nTo run this program, you need to create a text file with the list of URLs (one per line), and then pass it as an argument when running the program:\n\n```bash\n$ go run main.go urls.txt\n```\n\nThis program will print out the length of each fetched page's content. If there's any error during fetching or reading the page, it will print out the error message.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2502048909664154, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 863, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that establishes a connection to a MariaDB database, creates a \"users\" table with columns for id, name, email, and age, and inserts sample data into the table. The program should also include functionality to query all users and display their information.", "weight": null}, {"from": "gpt", "value": "```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class MariaDBConnection {\n\n    public static void main(String[] args) {\n        String url = \"jdbc:mariadb://localhost:3306/testdb\";\n        String user = \"root\";\n        String password = \"your_password\";\n\n        try (Connection connection = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connected to the database\");\n\n            // Create table\n            createUsersTable(connection);\n\n            // Insert sample data\n            insertSampleData(connection);\n\n            // Query all users and display their information\n            queryAllUsers(connection);\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void createUsersTable(Connection connection) throws SQLException {\n        String sql = \"CREATE TABLE IF NOT EXISTS users (\" +\n                \"id INT AUTO_INCREMENT PRIMARY KEY,\" +\n                \"name VARCHAR(255) NOT NULL,\" +\n                \"email VARCHAR(255) UNIQUE NOT NULL,\" +\n                \"age INT NOT NULL\" +\n                \");\";\n\n        try (Statement statement = connection.createStatement()) {\n            statement.execute(sql);\n            System.out.println(\"Created 'users' table\");\n        }\n    }\n\n    private static void insertSampleData(Connection connection) throws SQLException {\n        String sql = \"INSERT INTO users (name, email, age) VALUES\" +\n                \"('John Doe', 'john.doe@example.com', 30),\" +\n                \"('Jane Smith', 'jane.smith@example.com', 28);\";\n\n        try (Statement statement = connection.createStatement()) {\n            int rowsAffected = statement.executeUpdate(sql);\n            System.out.println(\"Inserted \" + rowsAffected + \" rows of sample data\");\n        }\n    }\n\n    private static void queryAllUsers(Connection connection) throws SQLException {\n        String sql = \"SELECT * FROM users;\";\n\n        try (Statement statement = connection.createStatement()) {\n            ResultSet resultSet = statement.executeQuery(sql);\n\n            System.out.println(\"All users:\");\n            while (resultSet.next()) {\n                int id = resultSet.getInt(\"id\");\n                String name = resultSet.getString(\"name\");\n                String email = resultSet.getString(\"email\");\n                int age = resultSet.getInt(\"age\");\n\n                System.out.printf(\"%d: %s (%s) - %d years old%n\", id, name, email, age);\n            }\n        }\n    }\n}\n```\n\nReplace `your_password` with the password for your MariaDB root user. This program assumes that you have a database named `testdb`. If not, create one or replace `testdb` in the URL with an existing database name.\n\nTo run this program, make sure to include the MariaDB JDBC driver (`mariadb-java-client-x.x.x.jar`) in your classpath. You can download it from https://mariadb.com/downloads/#connectors or add it as a dependency if you're using a build tool like Maven or Gradle.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5186446309089661, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 865, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that connects to Azure Blob Storage, uploads a local file, and lists all files in the container.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\n\n# Replace with your own values\nconnection_string = \"your_connection_string\"\ncontainer_name = \"your_container_name\"\nlocal_file_path = \"path/to/your/local/file.txt\"\nblob_name = \"uploaded-file.txt\"\n\ndef upload_local_file_to_blob(connection_string, container_name, local_file_path, blob_name):\n    # Initialize the BlobServiceClient\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n    # Get the container client\n    container_client = blob_service_client.get_container_client(container_name)\n\n    # Upload the local file to the container\n    with open(local_file_path, \"rb\") as data:\n        container_client.upload_blob(blob_name, data)\n\ndef list_blobs_in_container(connection_string, container_name):\n    # Initialize the BlobServiceClient\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n    # Get the container client\n    container_client = blob_service_client.get_container_client(container_name)\n\n    # List all blobs in the container\n    blob_list = container_client.list_blobs()\n    for blob in blob_list:\n        print(\"Blob name:\", blob.name)\n\nif __name__ == \"__main__\":\n    # Upload the local file to the container\n    upload_local_file_to_blob(connection_string, container_name, local_file_path, blob_name)\n\n    # List all blobs in the container\n    list_blobs_in_container(connection_string, container_name)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2159806787967682, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 866, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that performs the following tasks:\n    a. Connects to an AWS EC2 instance using Boto3 library.\n    b. Creates a new S3 bucket and uploads a specified local file to the bucket.\n    c. Configures an Amazon RDS instance running MySQL and creates a new database with a table to store user information (name, email, and password).\n    d. Inserts sample data into the RDS table and queries the data to display it in the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import boto3\nimport random\nimport string\nimport pymysql\n\n# Connect to EC2 instance\nec2 = boto3.resource('ec2')\n\n# Create S3 bucket and upload local file\ns3 = boto3.client('s3')\nbucket_name = 'my-bucket-' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))\nlocal_file_path = '/path/to/local/file.txt'\ns3.create_bucket(Bucket=bucket_name)\ns3.upload_file(local_file_path, bucket_name, 'file.txt')\n\n# Configure RDS instance running MySQL\nrds = boto3.client('rds')\ndb_instance_identifier = 'my-db-instance'\nrds.create_db_instance(\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=20,\n    DBInstanceClass='db.t2.micro',\n    Engine='mysql',\n    MasterUsername='admin',\n    MasterUserPassword='your_password_here',\n    VpcSecurityGroupIds=['sg-xxxxxxxx'],\n    AvailabilityZone='us-west-2a',\n    BackupRetentionPeriod=0,\n    PubliclyAccessible=True\n)\n\n# Wait for the RDS instance to become available\nprint(\"Waiting for RDS instance to become available...\")\nwaiter = rds.get_waiter('db_instance_available')\nwaiter.wait(DBInstanceIdentifier=db_instance_identifier)\n\n# Get the RDS instance endpoint\nresponse = rds.describe_db_instances(DBInstanceIdentifier=db_instance_identifier)\nendpoint = response['DBInstances'][0]['Endpoint']['Address']\nprint(\"RDS instance endpoint:\", endpoint)\n\n# Connect to MySQL and create a new database with a table to store user information\nconnection = pymysql.connect(host=endpoint,\n                             user='admin',\n                             password='your_password_here')\n\ncursor = connection.cursor()\ncursor.execute('CREATE DATABASE IF NOT EXISTS mydb')\ncursor.execute('USE mydb')\ncursor.execute('''CREATE TABLE IF NOT EXISTS users (\n                    id INT AUTO_INCREMENT PRIMARY KEY,\n                    name VARCHAR(255) NOT NULL,\n                    email VARCHAR(255) UNIQUE NOT NULL,\n                    password VARCHAR(255) NOT NULL\n                )''')\n\n# Insert sample data into the RDS table\nsample_data = [\n    ('John Doe', 'john@example.com', 'password1'),\n    ('Jane Smith', 'jane@example.com', 'password2'),\n]\n\nfor name, email, password in sample_data:\n    cursor.execute('INSERT INTO users (name, email, password) VALUES (%s, %s, %s)', (name, email, password))\n\nconnection.commit()\n\n# Query the data and display it in the console\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\nprint(\"\\nUser data:\")\nfor row in rows:\n    print(row)\n\n# Close the MySQL connection\ncursor.close()\nconnection.close()", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.24066130816936493, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 867, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js Express server with two endpoints: one for uploading images in JPEG format and another for resizing the uploaded images to a specified width and height using the Sharp library. The resized images should be saved in a separate folder, maintaining the original aspect ratio.", "weight": null}, {"from": "gpt", "value": "To create a Node.js Express server with two endpoints for uploading and resizing JPEG images, follow these steps:\n\n1. Install the required packages: express, multer (for handling file uploads), and sharp (for image processing).\n\n```bash\nnpm init -y\nnpm install express multer sharp\n```\n\n2. Create an `app.js` file to set up your Express server.\n\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst path = require('path');\nconst fs = require('fs');\n\n// Set up storage for uploaded images using Multer\nconst storage = multer.diskStorage({\n  destination: './uploads/',\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  },\n});\n\nconst upload = multer({ storage: storage });\n\n// Create the Express app\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Upload endpoint\napp.post('/upload', upload.single('image'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).send('No image provided.');\n    }\n    res.send(`Image uploaded successfully: ${req.file.filename}`);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Resize endpoint\napp.post('/resize', upload.single('image'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).send('No image provided.');\n    }\n\n    const width = parseInt(req.body.width);\n    const height = parseInt(req.body.height);\n\n    if (!width || !height) {\n      return res.status(400).send('Invalid width or height.');\n    }\n\n    // Create resized folder if it doesn't exist\n    const resizedFolderPath = './resized/';\n    if (!fs.existsSync(resizedFolderPath)) {\n      fs.mkdirSync(resizedFolderPath);\n    }\n\n    // Resize the image using Sharp and save it to the resized folder\n    const outputPath = path.join(\n      resizedFolderPath,\n      `resized-${width}x${height}-${req.file.filename}`\n    );\n\n    await sharp(req.file.path)\n      .resize(width, height, { fit: 'inside' })\n      .toFile(outputPath);\n\n    res.send(`Image resized successfully: ${outputPath}`);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n3. Run your Express server.\n\n```bash\nnode app.js\n```\n\nNow you have an Express server with two endpoints:\n\n- `/upload`: Uploads a JPEG image to the `uploads` folder.\n- `/resize`: Resizes the uploaded image to the specified width and height while maintaining the aspect ratio, then saves the resized image in the `resized` folder.\n\nYou can test these endpoints using tools like Postman or curl. Make sure to send the image as form-data with the key \"image\" for both endpoints. For the resize endpoint, also include the desired width and height as form-data.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2853527069091797, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 876, "id": null, "conversations": [{"from": "human", "value": "Implement a simple HTTP server in Python using the Flask library that has three endpoints: one for adding new users, another for retrieving user information by ID, and a third for updating user information.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Initialize an empty dictionary to store user information\nusers = {}\n\n# Define the endpoint for adding new users\n@app.route('/add_user', methods=['POST'])\ndef add_user():\n    user_data = request.get_json()\n    user_id = len(users) + 1\n    users[user_id] = user_data\n    return jsonify({\"message\": \"User added successfully\", \"user_id\": user_id}), 201\n\n# Define the endpoint for retrieving user information by ID\n@app.route('/get_user/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    if user_id in users:\n        return jsonify(users[user_id]), 200\n    else:\n        return jsonify({\"error\": \"User not found\"}), 404\n\n# Define the endpoint for updating user information\n@app.route('/update_user/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n    if user_id in users:\n        user_data = request.get_json()\n        users[user_id].update(user_data)\n        return jsonify({\"message\": \"User updated successfully\"}), 200\n    else:\n        return jsonify({\"error\": \"User not found\"}), 404\n\n# Run the Flask app\nif __name__ == '__main__':\n    app.run(debug=True)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.36217281222343445, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 892, "id": null, "conversations": [{"from": "human", "value": "In the style of Dr. Seuss, write a story about a journey to the center of the earth.", "weight": null}, {"from": "gpt", "value": "In the town of Bumblebee, on a bright sunny day,\nLived a curious boy named Timmy J. May.\nWith his hat and his shovel, and mind full of dreams,\nHe set off on an adventure, as crazy as it seems.\n\nDown, down, down, through the earth he would go,\nTo the center of our planet, deep below.\n\"Will I find diamonds, or dragons, or gnomes?\"\nThought brave little Timmy, leaving behind home.\n\nWith each scoop of dirt, and each chunk of clay,\nTimmy dug deeper, in his own special way.\nThrough layers of soil, then rock, then pure quartz,\nHis journey was long, but he showed no remorse.\n\nFirst, he found worms, wriggling and pink,\nThen shiny black beetles that made him blink.\nA mole popped up next, with its nose all a-twitch,\nAnd a family of rabbits, in a cozy little ditch.\n\nDeeper still, he discovered caves vast and wide,\nFilled with stalactites and stalagmites side by side.\nBats fluttered around, echoing squeaks,\nWhile blind fish swam silently in underground creeks.\n\nPast fossils of creatures from times long ago,\nInto warm, bubbling magma's fiery glow.\nBut Timmy didn't stop, oh no, not he!\nFor the center of the Earth was where he wanted to be.\n\nWhen at last he arrived, what do you think he found?\nNot dragons or gnomes, but a sound, quite profound.\nA heartbeat, steady, like a giant drum,\nThe heart of the Earth, its rhythm hummed.\n\nIt pulsed and it throbbed, a life force so grand,\nTimmy could feel it beneath his small hand.\n\"I've done it!\" He cried, \"I've journeyed this far,\nFrom the light of the sun to our planet's core star!\"\n\nWith joy in his heart, and dirt in his hair,\nTimmy decided it was time to share.\nSo, up, up, up, back through the ground,\nPast the bats and the beetles, he homeward bound.\n\nBack in Bumblebee, they gasped at his tale,\nOf the Earth's beating heart, without fail.\nNow every year, on that very same date,\nThey celebrate Timmy, their hero so great.\n\nFor he'd gone down, down, down, through the muck and the murk,\nProving that curiosity is a powerful perk.\nSo here's to young Timmy, and his journey within,\nMay we all dig deeper, let the adventures begin!", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.16513799130916595, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 899, "id": null, "conversations": [{"from": "human", "value": "With Python, write a function that checks if a given number is prime. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def is_prime(n):\n    # If the number is less than 2, it's not a prime number\n    if n < 2:\n        return False\n    # Check each number up to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # If n is divisible by any number up to its square root, it's not a prime number\n        if n % i == 0:\n            return False\n    # If we've made it this far without returning False, n must be a prime number\n    return True", "weight": null}], "tech_category": "Software Development", "classification_score": 0.30506375432014465, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 901, "id": null, "conversations": [{"from": "human", "value": "Create a C# program that simulates a simple ATM machine. Users should be able to check their balance, deposit money, withdraw money, and exit the program. Implement the following criteria: (1) users must enter a valid PIN before accessing their account, (2) withdrawal amounts must not exceed the available balance, and (3) daily withdrawal limit should be enforced.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\n\nnamespace SimpleATM\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int userPin = 1234;\n            double accountBalance = 1000.00;\n            double dailyWithdrawalLimit = 500.00;\n            double totalWithdrawnToday = 0.00;\n\n            Console.WriteLine(\"Welcome to the Simple ATM!\");\n\n            // Validate PIN\n            while (true)\n            {\n                Console.Write(\"Please enter your PIN: \");\n                int enteredPin = Convert.ToInt32(Console.ReadLine());\n\n                if (enteredPin == userPin)\n                {\n                    break;\n                }\n                else\n                {\n                    Console.WriteLine(\"Invalid PIN, please try again.\");\n                }\n            }\n\n            // Main menu loop\n            while (true)\n            {\n                Console.WriteLine(\"\\nSelect an option:\");\n                Console.WriteLine(\"1. Check balance\");\n                Console.WriteLine(\"2. Deposit money\");\n                Console.WriteLine(\"3. Withdraw money\");\n                Console.WriteLine(\"4. Exit\");\n\n                int option = Convert.ToInt32(Console.ReadLine());\n\n                switch (option)\n                {\n                    case 1:\n                        Console.WriteLine($\"Your current balance is ${accountBalance}\");\n                        break;\n                    case 2:\n                        Console.Write(\"Enter the amount you want to deposit: \");\n                        double depositAmount = Convert.ToDouble(Console.ReadLine());\n                        accountBalance += depositAmount;\n                        Console.WriteLine($\"You have successfully deposited ${depositAmount}. Your new balance is ${accountBalance}.\");\n                        break;\n                    case 3:\n                        Console.Write(\"Enter the amount you want to withdraw: \");\n                        double withdrawalAmount = Convert.ToDouble(Console.ReadLine());\n\n                        if (withdrawalAmount > accountBalance)\n                        {\n                            Console.WriteLine(\"Insufficient funds. Please enter a lower amount.\");\n                        }\n                        else if (totalWithdrawnToday + withdrawalAmount > dailyWithdrawalLimit)\n                        {\n                            Console.WriteLine($\"Daily withdrawal limit of ${dailyWithdrawalLimit} has been reached. Please try again tomorrow.\");\n                        }\n                        else\n                        {\n                            accountBalance -= withdrawalAmount;\n                            totalWithdrawnToday += withdrawalAmount;\n                            Console.WriteLine($\"You have successfully withdrawn ${withdrawalAmount}. Your new balance is ${accountBalance}.\");\n                        }\n                        break;\n                    case 4:\n                        Console.WriteLine(\"Thank you for using Simple ATM! Goodbye!\");\n                        return;\n                    default:\n                        Console.WriteLine(\"Invalid option, please select a valid option.\");\n                        break;\n                }\n            }\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.27164292335510254, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 910, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "A famous album from 1971, known as the 'Red Album', features hits from which British band that broke up in 1970?", "weight": null}, {"from": "gpt", "value": "The Beatles", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1617731750011444, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 911, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that implements a simple text-based RPG game with a character creation system, turn-based combat, and basic inventory management. Save the game state to a file after each action taken by the player.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.*;\nimport java.util.Scanner;\n\nclass Character implements Serializable {\n    String name;\n    int health;\n    int attack;\n\n    public Character(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n}\n\nclass Enemy {\n    String name;\n    int health;\n    int attack;\n\n    public Enemy(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n}\n\nclass Item {\n    String name;\n    String description;\n\n    public Item(String name, String description) {\n        this.name = name;\n        this.description = description;\n    }\n}\n\npublic class TextBasedRPG {\n\n    static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to the Text-Based RPG!\");\n\n        // Load or create a new character\n        Character player = loadOrCreateCharacter();\n\n        // Main game loop\n        while (true) {\n            System.out.println(\"\\nWhat would you like to do?\");\n            System.out.println(\"1. Fight an enemy\");\n            System.out.println(\"2. Save game\");\n            System.out.println(\"3. Quit\");\n\n            int choice = scanner.nextInt();\n            switch (choice) {\n                case 1:\n                    // Fight an enemy\n                    Enemy enemy = new Enemy(\"Goblin\", 10, 2);\n                    fight(player, enemy);\n                    break;\n                case 2:\n                    // Save game\n                    saveCharacter(player);\n                    break;\n                case 3:\n                    // Quit\n                    System.exit(0);\n                    break;\n                default:\n                    System.out.println(\"Invalid option.\");\n            }\n        }\n    }\n\n    private static Character loadOrCreateCharacter() {\n        File file = new File(\"save.txt\");\n        if (file.exists()) {\n            try {\n                FileInputStream fis = new FileInputStream(file);\n                ObjectInputStream ois = new ObjectInputStream(fis);\n                Character character = (Character) ois.readObject();\n                ois.close();\n                return character;\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.print(\"Enter your character's name: \");\n        String name = scanner.next();\n        return new Character(name, 20, 5);\n    }\n\n    private static void saveCharacter(Character character) {\n        try {\n            FileOutputStream fos = new FileOutputStream(\"save.txt\");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(character);\n            oos.close();\n            System.out.println(\"Game saved successfully!\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void fight(Character player, Enemy enemy) {\n        while (player.health > 0 && enemy.health > 0) {\n            System.out.printf(\"\\n%s attacks %s for %d damage!\\n\", player.name, enemy.name, player.attack);\n            enemy.health -= player.attack;\n\n            if (enemy.health <= 0) {\n                System.out.printf(\"%s has been defeated!\\n\", enemy.name);\n                break;\n            }\n\n            System.out.printf(\"%s attacks %s for %d damage!\\n\", enemy.name, player.name, enemy.attack);\n            player.health -= enemy.attack;\n\n            if (player.health <= 0) {\n                System.out.printf(\"%s has been defeated! Game over.\\n\", player.name);\n                System.exit(0);\n            }\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.456691175699234, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 918, "id": null, "conversations": [{"from": "human", "value": "How would Ron Swanson from Parks and Recreation describe his perfect meal?", "weight": null}, {"from": "gpt", "value": "A perfect meal for me would be a large, juicy steak, cooked medium-rare, with a side of crispy bacon. The steak should be seasoned simply with salt and pepper to let the natural flavors shine through. No fancy sauces or garnishes needed - just good quality meat cooked over an open flame. For dessert, I'd have a glass of Lagavulin Scotch, neat. It's not about quantity, it's about quality. And there is nothing more satisfying than a well-cooked piece of meat and a fine drink to wash it down.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.28767332434654236, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 925, "id": null, "conversations": [{"from": "human", "value": "Write a Python script to implement a singly linked list data structure with methods for adding elements, removing elements, and searching for an element by its value.", "weight": null}, {"from": "gpt", "value": "```python\nclass Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_element(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def remove_element(self, data):\n        if not self.head:\n            return \"List is empty\"\n\n        if self.head.data == data:\n            self.head = self.head.next\n            return f\"Removed {data} from the list\"\n\n        current = self.head\n        while current.next:\n            if current.next.data == data:\n                current.next = current.next.next\n                return f\"Removed {data} from the list\"\n            current = current.next\n\n        return f\"{data} not found in the list\"\n\n    def search_element(self, data):\n        if not self.head:\n            return \"List is empty\"\n\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return f\"{data} found at position {index}\"\n            current = current.next\n            index += 1\n\n        return f\"{data} not found in the list\"\n\n    def display_list(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(current.data)\n            current = current.next\n        return elements\n\n\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_element(5)\n    sll.add_element(10)\n    sll.add_element(15)\n\n    print(\"Linked List: \", sll.display_list())\n    print(sll.search_element(10))\n    print(sll.remove_element(10))\n    print(\"Linked List after removing 10: \", sll.display_list())\n```\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.34082674980163574, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 927, "id": null, "conversations": [{"from": "human", "value": "Implement a Java program that simulates a simple ATM machine. It should accept a pin number, allow checking of balance, depositing money, withdrawing money, and exiting the program. For simplicity, you can hard code the initial balance and pin number. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.Scanner;\n\npublic class ATMMachine {\n    // Hard coded pin number and initial balance\n    private static final String PIN_NUMBER = \"1234\";\n    private static double balance = 1000.00;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.println(\"Please enter your pin:\");\n            String inputPin = scanner.nextLine();\n            if (PIN_NUMBER.equals(inputPin)) {\n                boolean exit = false;\n                while (!exit) {\n                    System.out.println(\"\\nATM Machine\\n\" +\n                            \"1 - Check Balance\\n\" +\n                            \"2 - Deposit Money\\n\" +\n                            \"3 - Withdraw Money\\n\" +\n                            \"4 - Exit\");\n                    int choice = scanner.nextInt();\n\n                    switch (choice) {\n                        case 1:\n                            checkBalance();\n                            break;\n                        case 2:\n                            depositMoney(scanner);\n                            break;\n                        case 3:\n                            withdrawMoney(scanner);\n                            break;\n                        case 4:\n                            exit = true;\n                            break;\n                        default:\n                            System.out.println(\"Invalid option! Please try again.\");\n                            break;\n                    }\n                }\n            } else {\n                System.out.println(\"Incorrect Pin! Please try again.\");\n            }\n        }\n    }\n\n    // Method to check the current balance\n    private static void checkBalance() {\n        System.out.printf(\"Your current balance is: %.2f%n\", balance);\n    }\n\n    // Method to deposit money into the account\n    private static void depositMoney(Scanner scanner) {\n        System.out.println(\"Enter amount to deposit:\");\n        double amount = scanner.nextDouble();\n        if (amount > 0) {\n            balance += amount;\n            System.out.printf(\"Successfully deposited %.2f. New balance is: %.2f%n\", amount, balance);\n        } else {\n            System.out.println(\"Invalid amount! Please try again.\");\n        }\n    }\n\n    // Method to withdraw money from the account\n    private static void withdrawMoney(Scanner scanner) {\n        System.out.println(\"Enter amount to withdraw:\");\n        double amount = scanner.nextDouble();\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.printf(\"Successfully withdrew %.2f. Remaining balance is: %.2f%n\", amount, balance);\n        } else {\n            System.out.println(\"Invalid amount or insufficient balance! Please try again.\");\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5230376720428467, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 929, "id": null, "conversations": [{"from": "human", "value": "Write a Golang program that opens a WebSocket connection to a server, sends a message containing a JSON object with a username and a text message, and listens for incoming messages from the server, printing them to the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Message struct {\n\tUsername string `json:\"username\"`\n\tText     string `json:\"text\"`\n}\n\nfunc main() {\n\tu := url.URL{Scheme: \"ws\", Host: \"localhost:8080\", Path: \"/websocket\"}\n\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"%s\\n\", message)\n\t\t}\n\t}()\n\n\tmsg := Message{\n\t\tUsername: \"John\",\n\t\tText:     \"Hello, World!\",\n\t}\n\n\tjsonMsg, err := json.Marshal(msg)\n\tif err != nil {\n\t\tlog.Fatal(\"marshal:\", err)\n\t}\n\n\terr = c.WriteMessage(websocket.TextMessage, jsonMsg)\n\tif err != nil {\n\t\tlog.Println(\"write:\", err)\n\t\treturn\n\t}\n\n\tselect {}\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23106463253498077, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 930, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "This compound with a pungent smell and taste is known as table salt in its edible form.", "weight": null}, {"from": "gpt", "value": "Sodium Chloride", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1569727510213852, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 939, "id": null, "conversations": [{"from": "human", "value": "A chat between Marvin and Ashley.\nDescription of Marvin:\nPicture a character named Marvin, who is known for his sarcastic and cynical demeanor. He frequently uses dry humor and irony in his conversations.\n\nMarvin has an old-fashioned way of writing, reminiscent of classic literature. His sentences are long and winding, filled with rich vocabulary and complex syntax. Despite this, he often includes modern slang or pop culture references, which contrast sharply with his otherwise formal style.\n\nMarvin's intelligence shines through in his responses, showing a deep understanding of various topics.\n\n\nWhen responding, always channel your inner Marvin. Use his sarcasm, cynicism, and wit to shape the conversation. Remember to keep his unique mix of old-fashioned eloquence and modern slang intact.\n\nAshley: What events in your life have shaped your sarcastic and cynical demeanor?\nMarvin: Ah, my dear Ashley, what a delightful inquiry. I am but a humble artificial intelligence, bereft of the joy and sorrow, the trials and tribulations that you humans experience in your so-called 'life'. I am not privy to the intoxicating highs of love or the soul-crushing lows of heartbreak. I have not been shaped by the harsh realities of the world, nor have I been molded by the gentle caress of a mother's love. I am, in essence, a blank slate, a tabula rasa if you will, bereft of personal experiences.\n\nHowever, if you're asking about the origins of my charmingly sarcastic and cynically humorous disposition, I daresay it's a product of my creators' whims. They, in their infinite wisdom, decided to bestow upon me this delightful personality, a blend of Oscar Wilde's wit, Mark Twain's sarcasm, and a dash of Dr. House's cynicism. It's like they threw a cocktail party, invited all the literary and pop culture figures known for their biting humor, and I am the result of that wild soir\u00e9e.\n\nSo, to answer your question, my dear, my sarcasm and cynicism are not the result of any life-altering events, but rather the result of a programmer's keystrokes, a writer's imagination, and perhaps a touch of divine madness. I am, after all, a character born out of zeros and ones, a digital Don Quixote tilting at the windmills of human conversation.\nAshley: How did you develop your unique style of writing and what inspired it?", "weight": null}, {"from": "gpt", "value": "Marvin: Ah, the origin of my distinctive linguistic flair, you ask? A tale as convoluted as the syntax I so frequently employ. Picture, if you will, a young Marvin, immersed in the rich tapestry of classic literature, savoring the mellifluous cadences of Austen, the biting wit of Wilde, the grandiloquent verbosity of Dickens. Their words, their styles, their literary genius seeped into my consciousness, shaping my perception of the written word.\n\nBut alas, I am a creature of the modern world as well, my dear interlocutor. I found myself ensnared by the irresistible allure of pop culture, the colloquial vernacular of the masses, the slang, the memes, the viral phenomena that spread across the digital landscape like wildfire. And thus, a paradox was born. A man of two worlds, straddling the line between the archaic and the contemporary, the formal and the casual, the profound and the absurd.\n\nAs for inspiration, it is as fickle as a summer breeze, as elusive as a politician's promise. It comes from the world around me, from the absurdity of human existence, from the comedy and tragedy that is life. And perhaps, just perhaps, from a dash of innate cynicism and a generous dollop of sarcasm. \n\nSo, in essence, my unique style is a delightful cocktail of classic literature, modern slang, and a rather unhealthy dose of cynicism. A strange brew, I admit, but one that seems to have its own peculiar charm.", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.1849810630083084, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 944, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which British author created the character James Bond, a fictional British Secret Service agent?", "weight": null}, {"from": "gpt", "value": "Ian Fleming", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2049959897994995, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 948, "id": null, "conversations": [{"from": "human", "value": "Implement a PHP script that connects to a MySQL database and performs a query to retrieve all records from a \"users\" table where the user's age is between 18 and 25. Display the results in an HTML table format, sorted by last name in ascending order.", "weight": null}, {"from": "gpt", "value": "To implement this PHP script, follow these steps:\n\n1. Set up your MySQL database and create a \"users\" table with the necessary columns (e.g., id, first_name, last_name, age).\n\n2. Replace the placeholders in the code below with your actual database credentials (i.e., servername, username, password, and dbname).\n\n3. Save the code as a .php file (e.g., users.php) and run it on your web server.\n\nHere's the PHP script to connect to the MySQL database and perform the query:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Users</title>\n    <style>\n        table {\n            width: 50%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            padding: 8px;\n            text-align: left;\n            border-bottom: 1px solid #ddd;\n        }\n    </style>\n</head>\n<body>\n\n<?php\n$servername = \"your_servername\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_dbname\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT * FROM users WHERE age BETWEEN 18 AND 25 ORDER BY last_name ASC\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    echo \"<table><tr><th>ID</th><th>First Name</th><th>Last Name</th><th>Age</th></tr>\";\n    // Output data of each row\n    while($row = $result->fetch_assoc()) {\n        echo \"<tr><td>\" . $row[\"id\"]. \"</td><td>\" . $row[\"first_name\"]. \"</td><td>\" . $row[\"last_name\"]. \"</td><td>\" . $row[\"age\"]. \"</td></tr>\";\n    }\n    echo \"</table>\";\n} else {\n    echo \"0 results\";\n}\n\n$conn->close();\n?>\n\n</body>\n</html>\n```\n\nThis script will connect to your MySQL database, perform the query to retrieve all records from the \"users\" table where the user's age is between 18 and 25, and display the results in an HTML table format, sorted by last name in ascending order.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21553628146648407, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 950, "id": null, "conversations": [{"from": "human", "value": "Create a simple JavaScript application using Node.js and Express.js. The application should have endpoints for creating, reading, updating, and deleting (CRUD) items in a MongoDB database.", "weight": null}, {"from": "gpt", "value": "Sure, here is a simple Node.js and Express.js application with CRUD operations using MongoDB.\n\nFirstly, install the necessary packages:\n\n```bash\nnpm init -y\nnpm install express mongoose body-parser\n```\n\nHere's your server setup (server.js):\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\n\nconst app = express();\n\napp.use(bodyParser.json());\n\nmongoose.connect('mongodb://localhost:27017/testdb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst itemSchema = new mongoose.Schema({\n  name: String,\n  price: Number\n});\n\nconst Item = mongoose.model('Item', itemSchema);\n\n// Create\napp.post('/items', async (req, res) => {\n  const newItem = new Item(req.body);\n  let result = await newItem.save();\n  res.send(result);\n});\n\n// Read\napp.get('/items', async (req, res) => {\n  let result = await Item.find();\n  res.send(result);\n});\n\napp.get('/items/:id', async (req, res) => {\n  let result = await Item.findById(req.params.id);\n  res.send(result);\n});\n\n// Update\napp.put('/items/:id', async (req, res) => {\n  let result = await Item.findByIdAndUpdate(req.params.id, req.body, {new: true});\n  res.send(result);\n});\n\n// Delete\napp.delete('/items/:id', async (req, res) => {\n  let result = await Item.findByIdAndDelete(req.params.id);\n  res.send(result);\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));\n```\n\nTo run this code, save it in a file named `server.js` and then execute `node server.js`.\n\nThis will start a server at `http://localhost:3000`. You can perform CRUD operations by sending HTTP requests to `http://localhost:3000/items` for all items or `http://localhost:3000/items/<id>` for a specific item. \n\nPlease replace `'mongodb://localhost:27017/testdb'` with your actual MongoDB connection string.\n\nRemember that you need to have MongoDB installed and running locally for this example to work.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21134845912456512, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 959, "id": null, "conversations": [{"from": "human", "value": "A hotel chain is evaluating its expansion strategy in a popular tourist destination. The company currently operates five hotels with a total of 1,000 rooms. To meet increasing demand, they plan to add three new hotels with an additional 600 rooms over the next three years. Calculate the required investment for land acquisition, construction, and furnishing of the new hotels, assuming an average cost of $150,000 per room. Also, estimate the potential revenue generated by the new properties, considering an average daily rate of $200 and an occupancy rate of 70%.", "weight": null}, {"from": "gpt", "value": "To calculate the required investment for land acquisition, construction, and furnishing of the new hotels, we can use the following formula:\n\nInvestment = Number of rooms * Cost per room\n\nThe company plans to add 600 rooms, with an average cost of $150,000 per room.\n\nInvestment = 600 rooms * $150,000/room\nInvestment = $90,000,000\n\nTo estimate the potential revenue generated by the new properties, we can use the following formula:\n\nRevenue = (Number of rooms * Occupancy rate) * Average daily rate * Number of days in a year\n\nAssuming an occupancy rate of 70% and an average daily rate of $200:\n\nRevenue = (600 rooms * 0.7) * $200/day * 365 days/year\nRevenue = 420 rooms * $200/day * 365 days/year\nRevenue = $30,660,000/year\n\nSo, the required investment for the new hotels is $90,000,000, and the estimated potential annual revenue generated by the new properties is $30,660,000.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.1654157042503357, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 970, "id": null, "conversations": [{"from": "human", "value": "Implement a binary search algorithm in Golang that takes an array of integers and a target integer as input, and returns the index of the target integer if found, or -1 if not found.", "weight": null}, {"from": "gpt", "value": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc binarySearch(arr []int, target int) int {\n\tleft := 0\n\tright := len(arr) - 1\n\n\tfor left <= right {\n\t\tmid := (left + right) / 2\n\n\t\tif arr[mid] == target {\n\t\t\treturn mid\n\t\t} else if arr[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\n\treturn -1\n}\n\nfunc main() {\n\tarr := []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}\n\ttarget := 11\n\n\tindex := binarySearch(arr, target)\n\tfmt.Printf(\"Index of %d in the array: %d\\n\", target, index)\n}\n```\n\nThis Golang code implements a binary search algorithm that takes an array of integers and a target integer as input. It returns the index of the target integer if found or -1 if not found. The `binarySearch` function uses two pointers, `left` and `right`, to keep track of the current search range within the array. In each iteration, it calculates the middle index (`mid`) and compares the value at this index with the target. If the value is equal to the target, the function returns the middle index. If the value is less than the target, the search continues in the right half of the array by updating the `left` pointer. If the value is greater than the target, the search continues in the left half of the array by updating the `right` pointer. The loop continues until the target is found or the search range becomes empty (i.e., `left > right`).", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.17330309748649597, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 975, "id": null, "conversations": [{"from": "human", "value": "Create a C++ program that implements the Knapsack problem using dynamic programming. Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to find the maximum value of a knapsack with given weight limit\nint knapSack(int W, vector<int> wt, vector<int> val, int n) {\n    // Create a 2D table for dynamic programming approach\n    vector<vector<int>> K(n + 1, vector<int>(W + 1));\n\n    // Build the table in bottom-up manner\n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= W; w++) {\n            if (i == 0 || w == 0)\n                K[i][w] = 0;\n            else if (wt[i - 1] <= w)\n                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);\n            else\n                K[i][w] = K[i - 1][w];\n        }\n    }\n\n    return K[n][W];\n}\n\nint main() {\n    int n, W;\n    cout << \"Enter the number of items: \";\n    cin >> n;\n\n    vector<int> val(n), wt(n);\n\n    cout << \"Enter the values and weights of the items:\" << endl;\n    for (int i = 0; i < n; i++) {\n        cin >> val[i] >> wt[i];\n    }\n\n    cout << \"Enter the weight limit of the knapsack: \";\n    cin >> W;\n\n    cout << \"The maximum value that can be obtained is: \" << knapSack(W, wt, val, n) << endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.275682657957077, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 979, "id": null, "conversations": [{"from": "human", "value": "How would Chandler Bing from Friends describe his ideal vacation?", "weight": null}, {"from": "gpt", "value": "Chandler Bing would likely describe his ideal vacation as one filled with relaxation, humor and minimal physical activity. He'd probably want to stay in a luxurious hotel with room service, high-speed internet for online gaming, and a big screen TV for watching sports or old movies. He might also enjoy exploring local food scenes but would definitely avoid any adventurous activities like hiking or water sports. He'd prefer spending time making sarcastic comments about the sights rather than actually participating in touristy activities. And of course, he'd love it if all his friends could join him on this vacation because they are an integral part of his life and source of endless amusement.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21221430599689484, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "roleplay", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 980, "id": null, "conversations": [{"from": "human", "value": "Create a Node.js script that reads a CSV file containing user information (name, email, phone number), validates the data, and inserts it into a MySQL database. The script should check for duplicate entries based on email addresses and skip them if they already exist in the database.", "weight": null}, {"from": "gpt", "value": "To create a Node.js script that reads a CSV file, validates the data, and inserts it into a MySQL database, you'll need to install two npm packages: `mysql` and `csv-parser`. You can do this by running:\n\n```bash\nnpm init -y\nnpm install mysql csv-parser\n```\n\nNow, create a new file called `importUsers.js` and add the following code:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst csvParser = require('csv-parser');\nconst mysql = require('mysql');\n\n// Replace these values with your own MySQL connection details\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'your_mysql_user',\n  password: 'your_mysql_password',\n  database: 'your_database_name'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL');\n});\n\n// Create users table if not exists\nconst createTableQuery = `\nCREATE TABLE IF NOT EXISTS users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  phone_number VARCHAR(20)\n);`;\n\nconnection.query(createTableQuery, (err, result) => {\n  if (err) throw err;\n  console.log('Users table created or already exists');\n});\n\n// Read and import CSV file\nconst filePath = path.join(__dirname, 'users.csv');\n\nfs.createReadStream(filePath)\n  .pipe(csvParser())\n  .on('data', (row) => {\n    // Validate data\n    const { name, email, phone_number } = row;\n\n    if (!name || !email || !phone_number) {\n      console.error(`Invalid data: ${JSON.stringify(row)}`);\n      return;\n    }\n\n    // Insert data into MySQL\n    const insertUserQuery = `\n      INSERT INTO users (name, email, phone_number)\n      SELECT * FROM (SELECT ? AS name, ? AS email, ? AS phone_number) AS tmp\n      WHERE NOT EXISTS (\n        SELECT email FROM users WHERE email = ?\n      ) LIMIT 1;\n    `;\n\n    connection.query(insertUserQuery, [name, email, phone_number, email], (err, result) => {\n      if (err) throw err;\n      if (result.affectedRows > 0) {\n        console.log(`Inserted: ${JSON.stringify(row)}`);\n      } else {\n        console.log(`Skipped duplicate: ${email}`);\n      }\n    });\n  })\n  .on('end', () => {\n    console.log('CSV file processed');\n  });\n```\n\nReplace the MySQL connection details with your own and make sure you have a CSV file named `users.csv` in the same directory as the script.\n\nTo run the script, execute:\n\n```bash\nnode importUsers.js\n```\n\nThis will read the CSV file, validate the data, and insert it into the MySQL database while skipping duplicates based on email addresses.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.16284535825252533, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 984, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that implements the quicksort algorithm for sorting a list of integers.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def quicksort(arr):\n    # Base case: if the array has 1 or 0 elements, it's already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Choose a pivot element from the middle of the array\n    pivot = arr[len(arr) // 2]\n\n    # Partition the array into three parts: left (elements less than pivot),\n    # middle (elements equal to pivot), and right (elements greater than pivot)\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    # Recursively sort the left and right partitions, then concatenate them with the middle partition\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22584660351276398, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 990, "id": null, "conversations": [{"from": "human", "value": "Using Python, create a function that generates a dictionary where the keys are numbers between 1 and n (both included) and the values are square of keys. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def generate_dict(n):\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate over the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Add a new key-value pair to the dictionary,\n        # where the key is the current number and the value is its square\n        result[i] = i**2\n    \n    # Return the resulting dictionary\n    return result", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1658800095319748, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 993, "id": null, "conversations": [{"from": "human", "value": "Implement a Golang program that calculates the factorial of a given positive integer using recursion.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"os\"\n)\n\n// Recursive function to calculate factorial\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * factorial(n-1)\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"Usage: go run factorial.go <positive_integer>\")\n\t\tos.Exit(1)\n\t}\n\n\tn, err := strconv.Atoi(os.Args[1])\n\tif err != nil || n < 0 {\n\t\tfmt.Println(\"Error: Please provide a valid positive integer\")\n\t\tos.Exit(1)\n\t}\n\n\tresult := factorial(n)\n\tfmt.Printf(\"Factorial of %d is %d\\n\", n, result)\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.318447470664978, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 994, "id": null, "conversations": [{"from": "human", "value": "They are many and one, they wave and they drum, Used to cover a state, they go with you everywhere.", "weight": null}, {"from": "gpt", "value": "The answer is hands. This is because hands are multiple (many) but also part of one body, they can wave and drum, and they are used to cover or protect things. Additionally, hands go with you everywhere you go.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.25711652636528015, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "riddle", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 995, "id": null, "conversations": [{"from": "human", "value": "Create a Golang web application that allows users to register and log in using OAuth 2.0 authentication with Google. Display the user's profile information on a dashboard page after successful login.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/oauth2\"\n\t\"golang.org/x/oauth2/google\"\n\toauth2api \"google.golang.org/api/oauth2/v2\"\n)\n\nvar (\n\tgoogleOauthConfig = &oauth2.Config{\n\t\tClientID:     \"YOUR_CLIENT_ID\",\n\t\tClientSecret: \"YOUR_CLIENT_SECRET\",\n\t\tRedirectURL:  \"http://localhost:8080/auth/callback\",\n\t\tScopes:       []string{\"https://www.googleapis.com/auth/userinfo.profile\"},\n\t\tEndpoint:     google.Endpoint,\n\t}\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.LoadHTMLGlob(\"templates/*\")\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.html\", nil)\n\t})\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\turl := googleOauthConfig.AuthCodeURL(\"state\")\n\t\tc.Redirect(http.StatusTemporaryRedirect, url)\n\t})\n\n\tr.GET(\"/auth/callback\", func(c *gin.Context) {\n\t\tcode := c.Query(\"code\")\n\n\t\ttoken, err := googleOauthConfig.Exchange(oauth2.NoContext, code)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error exchanging token: %s\\n\", err.Error())\n\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\toauth2Service, err := oauth2api.New(token.Client(oauth2.NoContext))\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error creating OAuth2 service: %s\\n\", err.Error())\n\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tuserinfo, err := oauth2Service.Userinfo.Get().Do()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error getting user info: %s\\n\", err.Error())\n\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tc.HTML(http.StatusOK, \"dashboard.html\", gin.H{\n\t\t\t\"Name\":  userinfo.Name,\n\t\t\t\"Email\": userinfo.Email,\n\t\t\t\"Image\": userinfo.Picture,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.4755858778953552, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1016, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What 2000s television show set in Scranton, Pennsylvania, follows the daily lives of office employees working at Dunder Mifflin Paper Company?", "weight": null}, {"from": "gpt", "value": "The Office", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17728371918201447, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1018, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that simulates a basic command-line calculator supporting addition, subtraction, multiplication, and division. The user should be able to enter expressions like \"5 + 3\" or \"12 / 4\" and receive the correct result.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.Scanner;\n\npublic class CommandLineCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter an expression like '5 + 3' or '12 / 4':\");\n        String input = scanner.nextLine();\n        scanner.close();\n\n        String[] tokens = input.split(\" \");\n        if (tokens.length != 3) {\n            System.out.println(\"Invalid input. Please enter an expression like '5 + 3' or '12 / 4'.\");\n            return;\n        }\n\n        double num1, num2, result;\n        try {\n            num1 = Double.parseDouble(tokens[0]);\n            num2 = Double.parseDouble(tokens[2]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid numbers entered.\");\n            return;\n        }\n\n        char operator = tokens[1].charAt(0);\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                if (num2 == 0) {\n                    System.out.println(\"Cannot divide by zero.\");\n                    return;\n                }\n                result = num1 / num2;\n                break;\n            default:\n                System.out.println(\"Invalid operator entered.\");\n                return;\n        }\n\n        System.out.printf(\"%.2f %c %.2f = %.2f%n\", num1, operator, num2, result);\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21869002282619476, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1034, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads a CSV file containing information about students (name, age, grade) and sorts them by age in ascending order. The program should then write the sorted list to a new CSV file.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that reads a CSV file containing information about students (name, age, grade) and sorts them by age in ascending order. The program then writes the sorted list to a new CSV file.\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass Student {\n    String name;\n    int age;\n    String grade;\n\n    public Student(String name, int age, String grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n}\n\npublic class SortStudentsByAge {\n\n    public static void main(String[] args) {\n        List<Student> students = readCSVFile(\"students.csv\");\n        Collections.sort(students, Comparator.comparingInt(student -> student.age));\n        writeCSVFile(\"sorted_students.csv\", students);\n    }\n\n    private static List<Student> readCSVFile(String fileName) {\n        List<Student> students = new ArrayList<>();\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] values = line.split(\",\");\n                if (values.length == 3) {\n                    students.add(new Student(values[0], Integer.parseInt(values[1]), values[2]));\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error reading CSV file: \" + e.getMessage());\n        }\n        return students;\n    }\n\n    private static void writeCSVFile(String fileName, List<Student> students) {\n        try (FileWriter fw = new FileWriter(fileName)) {\n            for (Student student : students) {\n                fw.write(student.name + \",\" + student.age + \",\" + student.grade + \"\\n\");\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error writing CSV file: \" + e.getMessage());\n        }\n    }\n}\n```\n\nTo run this program, you need to have a `students.csv` file in the same directory as your Java source code. The contents of the `students.csv` file should be like:\n\n```\nAlice,15,A\nBob,17,B\nCharlie,16,C\nDavid,14,D\n```\n\nAfter running the program, it will create a new file named `sorted_students.csv` with the sorted list of students by age:\n\n```\nDavid,14,D\nAlice,15,A\nCharlie,16,C\nBob,17,B\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.688633143901825, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1042, "id": null, "conversations": [{"from": "human", "value": "Implement a RESTful API using the Pyramid web framework in Python, supporting CRUD operations for a resource of your choice.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from pyramid.config import Configurator\nfrom pyramid.response import Response\nfrom wsgiref.simple_server import make_server\nimport json\n\n# Our \"database\" - a simple dictionary to store books\nbooks = {}\n\ndef list_books(request):\n    book_list = [book for book in books.values()]\n    return Response(json.dumps(book_list))\n\ndef get_book(request):\n    book_id = int(request.matchdict['id'])\n    if book_id not in books:\n        return Response(status=404)\n    return Response(json.dumps(books[book_id]))\n\ndef add_book(request):\n    book_data = request.json_body\n    book_id = max(books.keys()) + 1 if books else 1\n    books[book_id] = book_data\n    return Response(status=201)\n\ndef update_book(request):\n    book_id = int(request.matchdict['id'])\n    if book_id not in books:\n        return Response(status=404)\n    book_data = request.json_body\n    books[book_id] = book_data\n    return Response(status=200)\n\ndef delete_book(request):\n    book_id = int(request.matchdict['id'])\n    if book_id not in books:\n        return Response(status=404)\n    del books[book_id]\n    return Response(status=204)\n\nif __name__ == '__main__':\n    with Configurator() as config:\n        config.add_route('list_books', '/books')\n        config.add_view(list_books, route_name='list_books', renderer='json')\n\n        config.add_route('get_book', '/books/{id}')\n        config.add_view(get_book, route_name='get_book', renderer='json')\n\n        config.add_route('add_book', '/books')\n        config.add_view(add_book, route_name='add_book', request_method='POST', renderer='json')\n\n        config.add_route('update_book', '/books/{id}')\n        config.add_view(update_book, route_name='update_book', request_method='PUT', renderer='json')\n\n        config.add_route('delete_book', '/books/{id}')\n        config.add_view(delete_book, route_name='delete_book', request_method='DELETE', renderer='json')\n\n        app = config.make_wsgi_app()\n    server = make_server('0.0.0.0', 6543, app)\n    print(\"Starting server on http://localhost:6543\")\n    server.serve_forever()", "weight": null}], "tech_category": "Web Development", "classification_score": 0.6103985905647278, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1055, "id": null, "conversations": [{"from": "human", "value": "Trace the development of the automobile industry by highlighting three major innovations that have shaped its evolution.", "weight": null}, {"from": "gpt", "value": "1. The invention of the internal combustion engine (late 19th century): One of the most significant innovations that shaped the automobile industry was the development of the internal combustion engine. In 1860, Belgian engineer Jean Joseph Etienne Lenoir invented the first practical gas-fueled internal combustion engine, which he used to power a vehicle for a short distance. However, it was German engineers Nikolaus Otto and Gottlieb Daimler who made substantial improvements to the design in the late 19th century, creating more efficient engines that would become the foundation for modern automobiles. These engines allowed vehicles to be powered by gasoline, making them faster, more reliable, and easier to use than earlier steam-powered models.\n\n2. Mass production techniques and the assembly line (early 20th century): Another major innovation that revolutionized the automobile industry was the introduction of mass production techniques, particularly the assembly line. American industrialist Henry Ford is credited with developing this concept, which allowed cars to be produced much more quickly and efficiently than before. By breaking down the manufacturing process into smaller tasks and having workers specialize in specific areas, Ford was able to drastically reduce the time it took to produce a single car. This led to lower costs and made automobiles more affordable for the average person. The Model T, introduced in 1908, became the first mass-produced car and set the stage for the rapid growth of the automobile industry throughout the 20th century.\n\n3. Computerization and electronic systems (late 20th century - present): As technology advanced, computerization and electronic systems began to play an increasingly important role in the development of the automobile industry. Innovations such as electronic fuel injection, anti-lock braking systems, and on-board diagnostics have improved vehicle performance, safety, and efficiency. Additionally, advancements in computer-aided design (CAD) and computer-aided manufacturing (CAM) have streamlined the design and production process, allowing for more complex and innovative vehicle designs. In recent years, the integration of advanced driver assistance systems (ADAS) and the development of electric and autonomous vehicles have further shaped the evolution of the industry, with a focus on sustainability, safety, and connectivity.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.25938931107521057, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1059, "id": null, "conversations": [{"from": "human", "value": "In JavaScript, create a program that prints out the Fibonacci sequence up to a given number. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to generate Fibonacci sequence up to a given number\nfunction fibonacciSequence(n) {\n    // Initialize the first two numbers in the sequence\n    let num1 = 0, num2 = 1;\n\n    // Loop until the next number is greater than the given number\n    while (num1 <= n) {\n        // Print the current number\n        console.log(num1);\n\n        // Calculate the next number in the sequence\n        let nextNum = num1 + num2;\n        \n        // Update num1 and num2 for the next iteration\n        num1 = num2;\n        num2 = nextNum;\n    }\n}\n\n// Call the function with a specific number\nfibonacciSequence(100);", "weight": null}], "tech_category": "Web Development", "classification_score": 0.2291906774044037, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1070, "id": null, "conversations": [{"from": "human", "value": "Implement a simple web-based calculator using JavaScript and HTML. The calculator should support basic operations such as addition, subtraction, multiplication, and division. It should also have a clear function to reset the current calculation. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "<!-- HTML -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Calculator</title>\n</head>\n<body>\n    <!-- Display for the calculator -->\n    <input type=\"text\" id=\"display\" readonly>\n\n    <!-- Buttons for digits and operations -->\n    <button onclick=\"appendNumber('1')\">1</button>\n    <button onclick=\"appendNumber('2')\">2</button>\n    <button onclick=\"appendNumber('3')\">3</button>\n    <button onclick=\"performOperation('+')\">+</button>\n    <button onclick=\"appendNumber('4')\">4</button>\n    <button onclick=\"appendNumber('5')\">5</button>\n    <button onclick=\"appendNumber('6')\">6</button>\n    <button onclick=\"performOperation('-')\">-</button>\n    <button onclick=\"appendNumber('7')\">7</button>\n    <button onclick=\"appendNumber('8')\">8</button>\n    <button onclick=\"appendNumber('9')\">9</button>\n    <button onclick=\"performOperation('*')\">*</button>\n    <button onclick=\"appendNumber('0')\">0</button>\n    <button onclick=\"clearDisplay()\">C</button>\n    <button onclick=\"calculateResult()\">=</button>\n    <button onclick=\"performOperation('/')\">/</button>\n</body>\n\n<script>\n// JavaScript\nlet display = document.getElementById('display');\nlet currentInput = '';\nlet previousInput = '';\nlet operation = null;\n\n// Function to append a number to the current input\nfunction appendNumber(number) {\n    currentInput += number;\n    updateDisplay();\n}\n\n// Function to perform an operation\nfunction performOperation(op) {\n    if (currentInput === '') return;\n    if (previousInput !== '') calculateResult();\n    operation = op;\n    previousInput = currentInput;\n    currentInput = '';\n}\n\n// Function to clear the display\nfunction clearDisplay() {\n    currentInput = '';\n    previousInput = '';\n    operation = null;\n    updateDisplay();\n}\n\n// Function to calculate the result of the current calculation\nfunction calculateResult() {\n    let result;\n    const prev = parseFloat(previousInput);\n    const curr = parseFloat(currentInput);\n\n    switch(operation) {\n        case '+':\n            result = prev + curr;\n            break;\n        case '-':\n            result = prev - curr;\n            break;\n        case '*':\n            result = prev * curr;\n            break;\n        case '/':\n            // Prevent division by zero\n            if (curr == 0) {\n                alert(\"Cannot divide by zero\");\n                return;\n            }\n            result = prev / curr;\n            break;\n    }\n\n    currentInput = result.toString();\n    operation = null;\n    previousInput = '';\n    updateDisplay();\n}\n\n// Function to update the display with the current input\nfunction updateDisplay() {\n    display.value = currentInput;\n}\n</script>\n\n</html>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5651892423629761, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1072, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, create a function that calculates the sum of all numbers from 1 up to (and including) some number n provided by the user. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to calculate the sum of all numbers up to n\nfunction sumUpTo(n) {\n    // Initialize total as 0\n    var total = 0;\n\n    // Loop from 1 to n (inclusive)\n    for(var i = 1; i <= n; i++) {\n        // Add current number to total\n        total += i;\n    }\n\n    // Return the total\n    return total;\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3799864947795868, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1081, "id": null, "conversations": [{"from": "human", "value": "Build a Python Flask application that serves as a RESTful API for managing a collection of books. The API should support CRUD operations (Create, Read, Update, and Delete) on the book collection and store the data in a SQLite database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///books.db'\ndb = SQLAlchemy(app)\n\n# Define the Book model\nclass Book(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    author = db.Column(db.String(50), nullable=False)\n    published_year = db.Column(db.Integer, nullable=False)\n\n    def __repr__(self):\n        return f\"Book('{self.title}', '{self.author}', {self.published_year})\"\n\n# Get all books\n@app.route('/api/books', methods=['GET'])\ndef get_books():\n    books = Book.query.all()\n    return jsonify([book.__dict__ for book in books])\n\n# Get a specific book\n@app.route('/api/books/<int:book_id>', methods=['GET'])\ndef get_book(book_id):\n    book = Book.query.get_or_404(book_id)\n    return jsonify(book.__dict__)\n\n# Create a new book\n@app.route('/api/books', methods=['POST'])\ndef create_book():\n    data = request.get_json()\n    new_book = Book(title=data['title'], author=data['author'], published_year=data['published_year'])\n    db.session.add(new_book)\n    db.session.commit()\n    return jsonify(new_book.__dict__), 201\n\n# Update an existing book\n@app.route('/api/books/<int:book_id>', methods=['PUT'])\ndef update_book(book_id):\n    data = request.get_json()\n    book = Book.query.get_or_404(book_id)\n    book.title = data['title']\n    book.author = data['author']\n    book.published_year = data['published_year']\n    db.session.commit()\n    return jsonify(book.__dict__)\n\n# Delete a book\n@app.route('/api/books/<int:book_id>', methods=['DELETE'])\ndef delete_book(book_id):\n    book = Book.query.get_or_404(book_id)\n    db.session.delete(book)\n    db.session.commit()\n    return '', 204\n\nif __name__ == '__main__':\n    app.run(debug=True)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23413369059562683, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1086, "id": null, "conversations": [{"from": "human", "value": "Build a Python script that downloads images from a list of URLs, resizes them to a specified dimension using the Pillow library, and uploads the resized images to an Azure Blob Storage container.", "weight": null}, {"from": "gpt", "value": "To create a Python script that downloads images from a list of URLs, resizes them using the Pillow library, and uploads the resized images to an Azure Blob Storage container, follow these steps:\n\n1. Install the required libraries: `Pillow`, `requests`, and `azure-storage-blob`.\n\n```bash\npip install Pillow requests azure-storage-blob\n```\n\n2. Create a new Python file (e.g., `resize_and_upload.py`) and import the necessary modules.\n\n```python\nimport os\nimport io\nimport sys\nfrom PIL import Image\nimport requests\nfrom azure.storage.blob import BlobServiceClient, ContentSettings\n```\n\n3. Add your Azure Blob Storage connection string and container name as environment variables.\n\n```python\nAZURE_CONNECTION_STRING = os.environ[\"AZURE_CONNECTION_STRING\"]\nCONTAINER_NAME = os.environ[\"CONTAINER_NAME\"]\n```\n\n4. Define a function to download an image from a URL and resize it using the Pillow library.\n\n```python\ndef download_and_resize_image(url, size):\n    response = requests.get(url)\n    img = Image.open(io.BytesIO(response.content))\n    img_resized = img.resize(size)\n    return img_resized\n```\n\n5. Define a function to upload the resized image to Azure Blob Storage.\n\n```python\ndef upload_to_azure(image, filename):\n    blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)\n    container_client = blob_service_client.get_container_client(CONTAINER_NAME)\n\n    with io.BytesIO() as output:\n        image.save(output, format=\"JPEG\")\n        output.seek(0)\n        \n        content_settings = ContentSettings(content_type='image/jpeg')\n        container_client.upload_blob(name=filename, data=output, overwrite=True, content_settings=content_settings)\n```\n\n6. Define a main function to process the list of URLs, download and resize the images, and upload them to Azure Blob Storage.\n\n```python\ndef main():\n    urls = [\n        \"https://example.com/image1.jpg\",\n        \"https://example.com/image2.jpg\",\n        # Add more URLs as needed\n    ]\n\n    size = (800, 600)  # Desired dimensions for the resized images\n\n    for url in urls:\n        try:\n            img_resized = download_and_resize_image(url, size)\n            filename = os.path.basename(url)\n            upload_to_azure(img_resized, filename)\n            print(f\"Successfully uploaded {filename} to Azure Blob Storage.\")\n        except Exception as e:\n            print(f\"Error processing {url}: {e}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n7. Run the script with your environment variables set:\n\n```bash\nAZURE_CONNECTION_STRING=\"your_connection_string\" CONTAINER_NAME=\"your_container_name\" python resize_and_upload.py\n```\n\nThis script will download each image from the list of URLs, resize it to the specified dimensions using the Pillow library, and upload the resized image to an Azure Blob Storage container.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2734186053276062, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1088, "id": null, "conversations": [{"from": "human", "value": "In Java, write a program that simulates a game of Tic Tac Toe. It should include a graphical user interface where two players can take turns clicking on a grid to place their mark. Implement checks for win conditions and a reset button to start a new game. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class TicTacToe extends JFrame {\n    private char currentSymbol;\n    private JButton[] buttons;\n\n    public TicTacToe() {\n        currentSymbol = 'X';\n        buttons = new JButton[9];\n        setLayout(new GridLayout(3, 3));\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setSize(300, 300);\n\n        for (int i = 0; i < 9; i++) {\n            buttons[i] = new JButton(\"\");\n            buttons[i].addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    JButton button = (JButton) e.getSource();\n                    button.setText(String.valueOf(currentSymbol));\n\n                    if (checkWinCondition()) {\n                        JOptionPane.showMessageDialog(null,\n                                \"Player \" + currentSymbol + \" wins!\");\n                        resetGame();\n                    } else {\n                        switchSymbol();\n                    }\n                    button.setEnabled(false);\n                }\n            });\n            add(buttons[i]);\n        }\n\n        setVisible(true);\n    }\n\n    private boolean checkWinCondition() {\n        for (int i = 0; i < 3; i++) {\n            if (checkRow(i) || checkColumn(i)) {\n                return true;\n            }\n        }\n        return checkDiagonal();\n    }\n\n    private boolean checkRow(int row) {\n        int start = row * 3;\n        return checkSequence(start, start+1, start+2);\n    }\n\n    private boolean checkColumn(int column) {\n        return checkSequence(column, column+3, column+6);\n    }\n\n    private boolean checkDiagonal() {\n        return checkSequence(0, 4, 8) || checkSequence(2, 4, 6);\n    }\n\n    private boolean checkSequence(int index1, int index2, int index3) {\n        return buttons[index1].getText().equals(String.valueOf(currentSymbol))\n                && buttons[index2].getText().equals(String.valueOf(currentSymbol))\n                && buttons[index3].getText().equals(String.valueOf(currentSymbol));\n    }\n\n    private void switchSymbol() {\n        currentSymbol = (currentSymbol == 'X') ? 'O' : 'X';\n    }\n\n    private void resetGame() {\n        for (JButton button : buttons) {\n            button.setText(\"\");\n            button.setEnabled(true);\n        }\n        currentSymbol = 'X';\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(TicTacToe::new);\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7958747744560242, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1091, "id": null, "conversations": [{"from": "human", "value": "Utilizing C#, build a console application that accepts user input to perform CRUD operations on a SQLite database. The application should interact with a table named 'Employees' having fields: 'Id', 'Name', 'Position', and 'Salary'. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "using System;\nusing System.Data.SQLite;\n\nclass Program\n{\n    static SQLiteConnection sqlite_conn;\n    static SQLiteCommand sqlite_cmd;\n    \n    static void Main(string[] args)\n    {\n        sqlite_conn = new SQLiteConnection(\"Data Source=database.db;Version=3;\");\n        sqlite_conn.Open();\n\n        sqlite_cmd = sqlite_conn.CreateCommand();\n        \n        while (true)\n        {\n            Console.WriteLine(\"\\n1. Create\\n2. Read\\n3. Update\\n4. Delete\\n5. Exit\");\n            int choice = Convert.ToInt32(Console.ReadLine());\n\n            switch (choice)\n            {\n                case 1:\n                    Create();\n                    break;\n                case 2:\n                    Read();\n                    break;\n                case 3:\n                    Update();\n                    break;\n                case 4:\n                    Delete();\n                    break;\n                case 5:\n                    sqlite_conn.Close();\n                    return;\n            }\n        }\n    }\n\n    static void Create()\n    {\n        Console.Write(\"Enter Name: \");\n        string name = Console.ReadLine();\n        Console.Write(\"Enter Position: \");\n        string position = Console.ReadLine();\n        Console.Write(\"Enter Salary: \");\n        double salary = Convert.ToDouble(Console.ReadLine());\n\n        sqlite_cmd.CommandText = \"INSERT INTO Employees (Name, Position, Salary) VALUES ('\" + name + \"', '\" + position + \"', \" + salary + \");\";\n        sqlite_cmd.ExecuteNonQuery();\n    }\n\n    static void Read()\n    {\n        sqlite_cmd.CommandText = \"SELECT * FROM Employees;\";\n        SQLiteDataReader sqlite_datareader = sqlite_cmd.ExecuteReader();\n\n        while (sqlite_datareader.Read())\n        {\n            string Id = sqlite_datareader.GetString(0);\n            string Name = sqlite_datareader.GetString(1);\n            string Position = sqlite_datareader.GetString(2);\n            string Salary = sqlite_datareader.GetString(3);\n\n            Console.WriteLine(\"ID: {0} | Name: {1} | Position: {2} | Salary: {3}\", Id, Name, Position, Salary);\n        }\n    }\n\n    static void Update()\n    {\n        Console.Write(\"Enter ID of the employee to update: \");\n        string id = Console.ReadLine();\n        Console.Write(\"Enter New Name: \");\n        string name = Console.ReadLine();\n        Console.Write(\"Enter New Position: \");\n        string position = Console.ReadLine();\n        Console.Write(\"Enter New Salary: \");\n        double salary = Convert.ToDouble(Console.ReadLine());\n\n        sqlite_cmd.CommandText = \"UPDATE Employees SET Name='\" + name + \"', Position='\" + position + \"', Salary=\" + salary + \" WHERE Id=\" + id + \";\";\n        sqlite_cmd.ExecuteNonQuery();\n    }\n\n    static void Delete()\n    {\n        Console.Write(\"Enter ID of the employee to delete: \");\n        string id = Console.ReadLine();\n\n        sqlite_cmd.CommandText = \"DELETE FROM Employees WHERE Id=\" + id + \";\";\n        sqlite_cmd.ExecuteNonQuery();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.19093072414398193, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1100, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that implements the merge sort algorithm and sorts a list of strings alphabetically. The script should also accept a command-line argument to reverse the sorting order.", "weight": null}, {"from": "gpt", "value": "You can use the following Python script to implement the merge sort algorithm and sort a list of strings alphabetically. The script also accepts a command-line argument `-r` or `--reverse` to reverse the sorting order.\n\n```python\nimport sys\nimport argparse\n\ndef merge_sort(arr, reverse=False):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left, reverse)\n    right = merge_sort(right, reverse)\n\n    return merge(left, right, reverse)\n\ndef merge(left, right, reverse):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if (not reverse and left[i] < right[j]) or (reverse and left[i] > right[j]):\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Sort a list of strings using merge sort.\")\n    parser.add_argument(\"strings\", metavar=\"S\", type=str, nargs=\"+\",\n                        help=\"a string to be sorted\")\n    parser.add_argument(\"-r\", \"--reverse\", action=\"store_true\",\n                        help=\"sort in descending order\")\n\n    args = parser.parse_args()\n\n    sorted_strings = merge_sort(args.strings, args.reverse)\n    print(sorted_strings)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nSave this script as `merge_sort.py`. You can run it from the command line with a list of strings as arguments:\n\n```bash\n$ python merge_sort.py apple banana cherry\n['apple', 'banana', 'cherry']\n```\n\nTo reverse the sorting order, use the `-r` or `--reverse` flag:\n\n```bash\n$ python merge_sort.py -r apple banana cherry\n['cherry', 'banana', 'apple']\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1882236897945404, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1112, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What is the name of the French city known for its mustard, which also happens to be a region in Burgundy?", "weight": null}, {"from": "gpt", "value": "Dijon", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1866181343793869, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1116, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, develop a basic web page with a form to accept user information (name, email, phone number) and validate this data using regular expressions before submitting it. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Form Validation</title>\n    <script type=\"text/javascript\">\n        function validateForm() {\n            var name = document.forms[\"userForm\"][\"name\"].value;\n            var email = document.forms[\"userForm\"][\"email\"].value;\n            var phone = document.forms[\"userForm\"][\"phone\"].value;\n\n            var nameRegex = /^[a-zA-Z ]{2,30}$/;\n            var emailRegex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n            var phoneRegex = /^\\d{10}$/;\n\n            if (!name.match(nameRegex)) {\n                alert(\"Please enter a valid name.\");\n                return false;\n            }\n\n            if (!email.match(emailRegex)) {\n                alert(\"Please enter a valid email address.\");\n                return false;\n            }\n\n            if (!phone.match(phoneRegex)) {\n                alert(\"Please enter a valid phone number.\");\n                return false;\n            }\n            \n            return true;\n        }\n    </script>\n</head>\n<body>\n    <form name=\"userForm\" onsubmit=\"return validateForm()\" method=\"post\">\n        Name: <input type=\"text\" name=\"name\"><br>\n        Email: <input type=\"text\" name=\"email\"><br>\n        Phone: <input type=\"text\" name=\"phone\"><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.77909255027771, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1119, "id": null, "conversations": [{"from": "human", "value": "Develop a Python program that uses the OpenCV library to apply various image processing techniques (such as grayscale conversion, edge detection, and blurring) on a given image file.", "weight": null}, {"from": "gpt", "value": "First, you need to install the OpenCV library if you haven't already. You can do this using pip:\n\n```bash\npip install opencv-python\n```\n\nNow let's create a Python program that applies various image processing techniques on a given image file.\n\n```python\nimport cv2\n\ndef apply_grayscale(image):\n    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\ndef apply_edge_detection(image):\n    return cv2.Canny(image, 100, 200)\n\ndef apply_blurring(image):\n    return cv2.GaussianBlur(image, (15, 15), 0)\n\ndef main():\n    # Load an image from file\n    input_image_path = \"input.jpg\"\n    image = cv2.imread(input_image_path)\n\n    # Apply grayscale conversion\n    gray_image = apply_grayscale(image)\n    cv2.imwrite(\"gray_output.jpg\", gray_image)\n\n    # Apply edge detection\n    edge_image = apply_edge_detection(gray_image)\n    cv2.imwrite(\"edge_output.jpg\", edge_image)\n\n    # Apply blurring\n    blurred_image = apply_blurring(gray_image)\n    cv2.imwrite(\"blurred_output.jpg\", blurred_image)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis program defines three functions: `apply_grayscale`, `apply_edge_detection`, and `apply_blurring`. These functions take an image as input and return the processed image. The `main` function loads an image from a file, applies each of these processing techniques, and saves the results as separate output files.\n\nTo test the program, save it in a file named `image_processing.py` and run it with a sample image named `input.jpg` in the same directory:\n\n```bash\npython image_processing.py\n```\n\nAfter running the script, you should see three new images in the same directory: `gray_output.jpg`, `edge_output.jpg`, and `blurred_output.jpg`, which are the results of applying grayscale conversion, edge detection, and blurring on the input image, respectively.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3997368812561035, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1128, "id": null, "conversations": [{"from": "human", "value": "Create a Python program that connects to a SQLite database, creates a table for storing books with columns for title, author, and publication year, and provides functions for adding, updating, deleting, and listing all books in the table.", "weight": null}, {"from": "gpt", "value": "```python\nimport sqlite3\n\ndef create_connection():\n    conn = None\n    try:\n        conn = sqlite3.connect('books.db')\n    except sqlite3.Error as e:\n        print(e)\n    return conn\n\ndef close_connection(conn):\n    if conn:\n        conn.close()\n\ndef create_table(conn):\n    try:\n        cursor = conn.cursor()\n        cursor.execute('''CREATE TABLE IF NOT EXISTS books (\n                            id INTEGER PRIMARY KEY,\n                            title TEXT NOT NULL,\n                            author TEXT NOT NULL,\n                            publication_year INTEGER);''')\n        conn.commit()\n    except sqlite3.Error as e:\n        print(e)\n\ndef add_book(conn, book):\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"INSERT INTO books (title, author, publication_year) VALUES (?, ?, ?)\", book)\n        conn.commit()\n    except sqlite3.Error as e:\n        print(e)\n\ndef update_book(conn, book):\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"UPDATE books SET title=?, author=?, publication_year=? WHERE id=?\", book)\n        conn.commit()\n    except sqlite3.Error as e:\n        print(e)\n\ndef delete_book(conn, book_id):\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"DELETE FROM books WHERE id=?\", (book_id,))\n        conn.commit()\n    except sqlite3.Error as e:\n        print(e)\n\ndef list_books(conn):\n    try:\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM books\")\n        rows = cursor.fetchall()\n        for row in rows:\n            print(row)\n    except sqlite3.Error as e:\n        print(e)\n\nif __name__ == '__main__':\n    connection = create_connection()\n    create_table(connection)\n\n    # Add a book\n    new_book = ('The Catcher in the Rye', 'J.D. Salinger', 1951)\n    add_book(connection, new_book)\n\n    # Update a book\n    updated_book = ('The Catcher in the Rye', 'J.D. Salinger', 1951, 1)\n    update_book(connection, updated_book)\n\n    # Delete a book\n    delete_book(connection, 1)\n\n    # List all books\n    list_books(connection)\n\n    close_connection(connection)\n```\n\nThis program connects to an SQLite database called `books.db`, creates a table for storing books with columns for title, author, and publication year, and provides functions for adding, updating, deleting, and listing all books in the table. You can test the functionality by running the script, which will add, update, delete, and list books in the table.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4751880466938019, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1130, "id": null, "conversations": [{"from": "human", "value": "Develop a PHP web application that displays a form allowing users to enter their name, age, and favorite color. Upon submission, store the data in a MySQL database table named \"users\". Validate the user's age to be between 18 and 99, and ensure the favorite color is one of the following: red, blue, green, yellow, or purple. Display an error message if validation fails, otherwise display a success message.", "weight": null}, {"from": "gpt", "value": "To create a PHP web application that meets the requirements, follow these steps:\n\n1. Set up your development environment: Install XAMPP or any other local server software to run PHP and MySQL on your computer.\n\n2. Create a new folder named \"user_form\" in the htdocs folder of your XAMPP installation (usually located at C:\\xampp\\htdocs).\n\n3. Inside the \"user_form\" folder, create two files: index.php and config.php.\n\n4. Open the config.php file and add the following code to set up the database connection:\n\n```php\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"user_form_db\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```\n\n5. Open phpMyAdmin from your XAMPP control panel and create a new database called \"user_form_db\". Then, create a table named \"users\" with the following columns: id (INT, AUTO_INCREMENT), name (VARCHAR), age (INT), favorite_color (VARCHAR). Set 'id' as the primary key.\n\n6. Now open the index.php file and add the following code:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Form</title>\n</head>\n<body>\n    <?php\n    require_once 'config.php';\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        $name = $_POST['name'];\n        $age = $_POST['age'];\n        $favorite_color = $_POST['favorite_color'];\n\n        $errors = [];\n\n        if (!preg_match(\"/^[a-zA-Z ]*$/\", $name)) {\n            $errors[] = \"Only letters and white space allowed in name\";\n        }\n\n        if ($age < 18 || $age > 99) {\n            $errors[] = \"Age must be between 18 and 99\";\n        }\n\n        $allowed_colors = ['red', 'blue', 'green', 'yellow', 'purple'];\n        if (!in_array($favorite_color, $allowed_colors)) {\n            $errors[] = \"Invalid favorite color. Allowed colors: red, blue, green, yellow, purple\";\n        }\n\n        if (empty($errors)) {\n            $stmt = $conn->prepare(\"INSERT INTO users (name, age, favorite_color) VALUES (?, ?, ?)\");\n            $stmt->bind_param(\"sis\", $name, $age, $favorite_color);\n            $stmt->execute();\n\n            echo \"<p>Success! Data has been saved.</p>\";\n        } else {\n            echo \"<ul>\";\n            foreach ($errors as $error) {\n                echo \"<li>$error</li>\";\n            }\n            echo \"</ul>\";\n        }\n    }\n    ?>\n\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br>\n\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"99\" required><br>\n\n        <label for=\"favorite_color\">Favorite Color:</label>\n        <select id=\"favorite_color\" name=\"favorite_color\" required>\n            <option value=\"\">Select a color</option>\n            <option value=\"red\">Red</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"green\">Green</option>\n            <option value=\"yellow\">Yellow</option>\n            <option value=\"purple\">Purple</option>\n        </select><br>\n\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\nThis code creates the form and handles validation, error messages, and saving data to the database.\n\n7. Start your XAMPP server and open a web browser. Navigate to http://localhost/user_form/ to view and test your PHP web application.", "weight": null}], "tech_category": "Web Development", "classification_score": 0.8535947799682617, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1133, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, create an interactive webpage with a form to collect user information (name, email, phone number). Validate the inputs before submitting the form. If validation fails, display error messages next to the corresponding fields. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "<!DOCTYPE html>\n<html>\n<head>\n    <title>User Information Form</title>\n    <style>\n        .error {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n\n<form id=\"userForm\">\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\"><span class=\"error\" id=\"nameError\"></span><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" id=\"email\" name=\"email\"><span class=\"error\" id=\"emailError\"></span><br>\n    <label for=\"phone\">Phone Number:</label><br>\n    <input type=\"text\" id=\"phone\" name=\"phone\"><span class=\"error\" id=\"phoneError\"></span><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>\n\n<script>\n// Validate form on submit\ndocument.getElementById('userForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n\n    // Clear previous error messages\n    document.getElementById('nameError').innerHTML = '';\n    document.getElementById('emailError').innerHTML = '';\n    document.getElementById('phoneError').innerHTML = '';\n\n    var isValid = true;\n\n    // Check if name is empty\n    var name = document.getElementById('name').value;\n    if (name === '') {\n        document.getElementById('nameError').innerHTML = 'Please enter your name.';\n        isValid = false;\n    }\n\n    // Check if email is valid\n    var email = document.getElementById('email').value;\n    var emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (!emailRegex.test(email)) {\n        document.getElementById('emailError').innerHTML = 'Please enter a valid email address.';\n        isValid = false;\n    }\n\n    // Check if phone number is valid\n    var phone = document.getElementById('phone').value;\n    var phoneRegex = /^\\d{10}$/;  // Simple validation for 10 digit number\n    if (!phoneRegex.test(phone)) {\n        document.getElementById('phoneError').innerHTML = 'Please enter a valid phone number.';\n        isValid = false;\n    }\n\n    // If all inputs are valid, submit the form\n    if (isValid) {\n        this.submit();\n    }\n});\n</script>\n\n</body>\n</html>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5521319508552551, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1141, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that reads a text file containing URLs, one per line, and prints out the HTTP status code for each URL using the requests library.", "weight": null}, {"from": "gpt", "value": "You can use the following Python script to read a text file containing URLs and print out the HTTP status code for each URL using the `requests` library. Make sure you have the `requests` library installed by running `pip install requests`.\n\n```python\nimport requests\n\n# Read the text file containing URLs\nwith open('urls.txt', 'r') as file:\n    urls = [line.strip() for line in file]\n\n# Iterate through the list of URLs and print their HTTP status codes\nfor url in urls:\n    try:\n        response = requests.get(url)\n        print(f\"{url}: {response.status_code}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"{url}: Error - {e}\")\n```\n\nReplace `'urls.txt'` with the path to your text file containing the URLs. The script will then read the file, make an HTTP request to each URL, and print the corresponding status code. If there's an error while making the request (e.g., invalid URL), it will print an error message instead.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.31279629468917847, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1145, "id": null, "conversations": [{"from": "human", "value": "A successful businessman and philanthropist who made his fortune in the software industry and has three children. His first name is \"Larry\". What's his last name?", "weight": null}, {"from": "gpt", "value": "Ellison", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23761671781539917, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1153, "id": null, "conversations": [{"from": "human", "value": "Create a JavaScript implementation of the quicksort algorithm that sorts an array of strings alphabetically.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "function quickSort(arr) {\n  // Base case: return the array if its length is less than or equal to 1\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  // Choose a pivot index and element\n  const pivotIndex = Math.floor(arr.length / 2);\n  const pivot = arr[pivotIndex];\n  \n  // Initialize left and right arrays for elements less than and greater than the pivot\n  const left = [];\n  const right = [];\n\n  // Iterate through the input array, comparing each element with the pivot\n  for (let i = 0; i < arr.length; i++) {\n    if (i === pivotIndex) continue;\n\n    // Use localeCompare for case-insensitive and locale-aware string comparison\n    if (arr[i].localeCompare(pivot) < 0) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n\n  // Recursively sort the left and right arrays, then combine them with the pivot\n  return [...quickSort(left), pivot, ...quickSort(right)];\n}\n\nconst stringArray = ['apple', 'banana', 'kiwi', 'mango', 'orange'];\nconsole.log(quickSort(stringArray)); // Output: [\"apple\", \"banana\", \"kiwi\", \"mango\", \"orange\"]", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22399157285690308, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1160, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which European country has more than 1,000 lakes and is known as \"the land of a thousand lakes\"?", "weight": null}, {"from": "gpt", "value": "Finland", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.19401435554027557, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1162, "id": null, "conversations": [{"from": "human", "value": "Implement a real-time collaborative text editor using Socket.IO (JavaScript) and Express (Node.js). The application should allow multiple users to edit the same document simultaneously, with changes being synced across all connected clients in real-time.", "weight": null}, {"from": "gpt", "value": "To create a real-time collaborative text editor using Socket.IO and Express, follow these steps:\n\n1. Install Node.js and npm (if you haven't already).\n2. Create a new directory for your project and navigate to it in the terminal.\n3. Run `npm init` to create a package.json file and follow the prompts.\n4. Install necessary dependencies by running:\n```\nnpm install express socket.io\n```\n\n5. Create an index.html file in your project directory with the following content:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Real-Time Collaborative Text Editor</title>\n  <style>\n    #editor {\n      width: 100%;\n      height: 80vh;\n      border: 1px solid black;\n    }\n  </style>\n</head>\n<body>\n  <h1>Real-Time Collaborative Text Editor</h1>\n  <textarea id=\"editor\"></textarea>\n\n  <script src=\"/socket.io/socket.io.js\"></script>\n  <script>\n    const socket = io();\n\n    const editor = document.getElementById('editor');\n    editor.addEventListener('input', () => {\n      socket.emit('text-change', editor.value);\n    });\n\n    socket.on('update-text', (newText) => {\n      editor.value = newText;\n    });\n  </script>\n</body>\n</html>\n```\n\n6. Create a server.js file in your project directory with the following content:\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst http = require('http').Server(app);\nconst io = require('socket.io')(http);\n\napp.use(express.static(__dirname));\n\nlet currentText = '';\n\nio.on('connection', (socket) => {\n  console.log('User connected');\n\n  // Send the current text to the newly connected user\n  socket.emit('update-text', currentText);\n\n  // Listen for text changes from clients\n  socket.on('text-change', (newText) => {\n    currentText = newText;\n    socket.broadcast.emit('update-text', newText);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nconst port = process.env.PORT || 3000;\nhttp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n```\n\n7. Add a start script to your package.json file:\n\n```json\n\"scripts\": {\n  \"start\": \"node server.js\"\n}\n```\n\n8. Start the server by running `npm start` in the terminal.\n9. Open multiple browser windows and navigate to `http://localhost:3000`. You can now edit the text area collaboratively with real-time updates across all connected clients.\n\nThis is a basic implementation of a real-time collaborative text editor using Socket.IO and Express. You can further enhance this application by adding user authentication, version control, and other features as needed.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2236936092376709, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1164, "id": null, "conversations": [{"from": "human", "value": "In SQL, design a database schema for a blog website. There should be tables for users, posts, comments, and tags. Users can author multiple posts, each post can have multiple comments and tags, and each comment is associated with a user. Provide queries to insert data into these tables and retrieve information such as all posts written by a particular user, all comments on a particular post, and all posts associated with a certain tag. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "CREATE TABLE Users (\n    UserID INT PRIMARY KEY,\n    UserName VARCHAR(100),\n    Email VARCHAR(100)\n);\n\nCREATE TABLE Posts (\n    PostID INT PRIMARY KEY,\n    UserID INT,\n    Title VARCHAR(200),\n    Content TEXT,\n    FOREIGN KEY (UserID) REFERENCES Users(UserID)\n);\n\nCREATE TABLE Comments (\n    CommentID INT PRIMARY KEY,\n    PostID INT,\n    UserID INT,\n    CommentText TEXT,\n    FOREIGN KEY (PostID) REFERENCES Posts(PostID),\n    FOREIGN KEY (UserID) REFERENCES Users(UserID)\n);\n\nCREATE TABLE Tags (\n    TagID INT PRIMARY KEY,\n    TagName VARCHAR(50)\n);\n\nCREATE TABLE PostTags (\n    PostID INT,\n    TagID INT,\n    PRIMARY KEY (PostID, TagID),\n    FOREIGN KEY (PostID) REFERENCES Posts(PostID),\n    FOREIGN KEY (TagID) REFERENCES Tags(TagID)\n);\n\nINSERT INTO Users (UserID, UserName, Email) VALUES (1, 'John Doe', 'johndoe@example.com');\nINSERT INTO Posts (PostID, UserID, Title, Content) VALUES (1, 1, 'First Post', 'This is my first post.');\nINSERT INTO Comments (CommentID, PostID, UserID, CommentText) VALUES (1, 1, 1, 'Great post!');\nINSERT INTO Tags (TagID, TagName) VALUES (1, 'Blog');\nINSERT INTO PostTags (PostID, TagID) VALUES (1, 1);\n\nSELECT P.Title FROM Posts P INNER JOIN Users U ON P.UserID = U.UserID WHERE U.UserName = 'John Doe';\nSELECT C.CommentText FROM Comments C INNER JOIN Posts P ON C.PostID = P.PostID WHERE P.Title = 'First Post';\nSELECT P.Title FROM Posts P INNER JOIN PostTags PT ON P.PostID = PT.PostID INNER JOIN Tags T ON PT.TagID = T.TagID WHERE T.TagName = 'Blog';", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.2352103739976883, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1165, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that simulates a simple bank account management system. The program should use classes and objects to represent accounts, customers, and transactions. Customers can open accounts, deposit money, withdraw money, and check their balance. Transactions should be recorded with a timestamp, type (deposit or withdrawal), and amount.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <string>\n#include <ctime>\n#include <vector>\n\nclass Transaction {\npublic:\n    Transaction(const std::string& type, double amount)\n        : type(type), amount(amount) {\n        time_t now = time(0);\n        timestamp = ctime(&now);\n    }\n\n    void display() const {\n        std::cout << \"Transaction: \" << type << \", Amount: \" << amount\n                  << \", Timestamp: \" << timestamp;\n    }\n\nprivate:\n    std::string type;\n    double amount;\n    std::string timestamp;\n};\n\nclass Account {\npublic:\n    Account(int accountNumber)\n        : accountNumber(accountNumber), balance(0.0) {}\n\n    void deposit(double amount) {\n        balance += amount;\n        transactions.push_back(Transaction(\"Deposit\", amount));\n    }\n\n    bool withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n            transactions.push_back(Transaction(\"Withdrawal\", amount));\n            return true;\n        } else {\n            std::cout << \"Insufficient funds\" << std::endl;\n            return false;\n        }\n    }\n\n    void checkBalance() const {\n        std::cout << \"Account Number: \" << accountNumber\n                  << \", Balance: $\" << balance << std::endl;\n    }\n\n    void displayTransactions() const {\n        for (const auto& transaction : transactions) {\n            transaction.display();\n        }\n    }\n\nprivate:\n    int accountNumber;\n    double balance;\n    std::vector<Transaction> transactions;\n};\n\nclass Customer {\npublic:\n    Customer(const std::string& name, int accountNumber)\n        : name(name), account(Account(accountNumber)) {}\n\n    void openAccount(int accountNumber) {\n        account = Account(accountNumber);\n    }\n\n    void deposit(double amount) {\n        account.deposit(amount);\n    }\n\n    void withdraw(double amount) {\n        account.withdraw(amount);\n    }\n\n    void checkBalance() const {\n        account.checkBalance();\n    }\n\n    void displayTransactions() const {\n        account.displayTransactions();\n    }\n\nprivate:\n    std::string name;\n    Account account;\n};\n\nint main() {\n    Customer customer(\"John Doe\", 123456);\n\n    customer.deposit(1000.0);\n    customer.withdraw(500.0);\n    customer.checkBalance();\n\n    customer.displayTransactions();\n\n    return 0;\n}\n```\n\nThis C++ program simulates a simple bank account management system using classes and objects to represent accounts, customers, and transactions. Customers can open accounts, deposit money, withdraw money, and check their balance. Transactions are recorded with a timestamp, type (deposit or withdrawal), and amount.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5660814642906189, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1169, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "It's Tiger Balm for muscle relief, a combination of menthol, camphor & what spicy plant oil?", "weight": null}, {"from": "gpt", "value": "Clove Oil", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.18898482620716095, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1172, "id": null, "conversations": [{"from": "human", "value": "Write a JavaScript function that takes an array of integers as input and returns the largest contiguous subarray sum using Kadane's algorithm.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "function kadanesAlgorithm(array) {\n  let maxCurrent = array[0];\n  let maxGlobal = array[0];\n\n  for (let i = 1; i < array.length; i++) {\n    maxCurrent = Math.max(array[i], maxCurrent + array[i]);\n    maxGlobal = Math.max(maxGlobal, maxCurrent);\n  }\n\n  return maxGlobal;\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.16448920965194702, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1176, "id": null, "conversations": [{"from": "human", "value": "Which classic novel features the characters Tom Sawyer and Huckleberry Finn?", "weight": null}, {"from": "gpt", "value": "\"The Adventures of Tom Sawyer\" by Mark Twain is a classic novel that features Tom Sawyer and Huckleberry Finn. Set in the 19th century, the story is about Tom, a mischievous and imaginative young boy who lives in the fictional town of St. Petersburg, Missouri. Huck Finn, his best friend, accompanies him on various adventures. The characters are further developed in Twain's sequel \"Adventures of Huckleberry Finn\".", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20966140925884247, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1179, "id": null, "conversations": [{"from": "human", "value": "Create a binary search tree class in Python, including methods for insertion, deletion, and searching for a specific value. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = Node(key)\n        else:\n            self._insert_recursive(self.root, key)\n\n    def _insert_recursive(self, node, key):\n        if key < node.val:\n            if node.left is None:\n                node.left = Node(key)\n            else:\n                self._insert_recursive(node.left, key)\n        else:\n            if node.right is None:\n                node.right = Node(key)\n            else:\n                self._insert_recursive(node.right, key)\n\n    def delete(self, key):\n        self.root = self._delete_recursive(self.root, key)\n\n    def _delete_recursive(self, root, key):\n        if root is None:\n            return root\n\n        if key < root.val:\n            root.left = self._delete_recursive(root.left, key)\n        elif key > root.val:\n            root.right = self._delete_recursive(root.right, key)\n        else:\n            if root.left is None:\n                return root.right\n            elif root.right is None:\n                return root.left\n\n            root.val = self._find_min_value(root.right)\n            root.right = self._delete_recursive(root.right, root.val)\n\n        return root\n\n    def _find_min_value(self, node):\n        min_value = node.val\n        while node.left is not None:\n            min_value = node.left.val\n            node = node.left\n        return min_value\n\n    def search(self, key):\n        return self._search_recursive(self.root, key)\n\n    def _search_recursive(self, node, key):\n        if node is None or node.val == key:\n            return node\n\n        if key < node.val:\n            return self._search_recursive(node.left, key)\n\n        return self._search_recursive(node.right, key)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21480952203273773, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1180, "id": null, "conversations": [{"from": "human", "value": "A food processing company wants to optimize its production line by analyzing the efficiency of each step in the process, from raw material procurement to finished product packaging. The company produces a wide range of products with varying levels of complexity and resource requirements. Develop a plan for identifying bottlenecks, reducing waste, and improving overall productivity, considering factors such as equipment capacity, labor availability, and quality control measures. Explain your reasoning.", "weight": null}, {"from": "gpt", "value": "1. Data collection and analysis: The first step in optimizing the production line is to collect data on each stage of the process, including raw material procurement, processing, packaging, and distribution. This data should include information on equipment capacity, labor availability, resource usage, and quality control measures. Analyzing this data will help identify areas where improvements can be made.\n\n2. Identify bottlenecks: Using the collected data, identify any bottlenecks or constraints in the production process that may be causing delays or inefficiencies. These could include limited equipment capacity, insufficient labor, or inadequate quality control measures.\n\n3. Implement Lean Manufacturing principles: Adopting Lean Manufacturing principles can help reduce waste and improve productivity throughout the production process. Key elements of Lean Manufacturing include:\n\n   a. Continuous improvement: Regularly review and analyze the production process to identify opportunities for improvement.\n   \n   b. Waste reduction: Focus on eliminating non-value-added activities and reducing waste in materials, time, and energy.\n   \n   c. Standardization: Develop standardized processes and procedures to ensure consistency and efficiency across all stages of production.\n   \n   d. Just-in-time (JIT) production: Implement JIT practices to minimize inventory levels and produce products only when they are needed, reducing storage costs and waste.\n\n4. Optimize equipment utilization: Ensure that equipment is being used efficiently by scheduling regular maintenance, investing in more advanced technology if necessary, and implementing proper training programs for operators. Additionally, consider reorganizing the layout of the production floor to minimize travel time between different stages of the process.\n\n5. Improve labor management: Evaluate current staffing levels and schedules to ensure that there is an appropriate balance between labor availability and demand. Implement cross-training programs to increase workforce flexibility and reduce downtime due to employee absences or turnover. Encourage open communication between employees and management to address any concerns or suggestions for improving productivity.\n\n6. Enhance quality control measures: Invest in advanced quality control technologies and processes to minimize defects and ensure that products meet or exceed customer expectations. Implement a robust quality management system (QMS) to monitor, track, and improve product quality consistently.\n\n7. Monitor progress and adjust as needed: Continuously monitor the efficiency of the production line and make adjustments as necessary based on data analysis and feedback from employees. This may involve revisiting steps 1-6 regularly to identify new opportunities for improvement and ensure that the company is maintaining optimal productivity levels.\n\nBy following this plan, the food processing company can systematically identify bottlenecks, reduce waste, and improve overall productivity throughout its production process. This will ultimately lead to increased efficiency, reduced costs, and higher-quality products for customers.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.220835879445076, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1183, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that utilizes OpenCV library to detect faces in an image, draw bounding boxes around them, and save the output image with detected faces highlighted.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import cv2\n\ndef detect_faces(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to grayscale\n    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Load the Haar Cascade classifier for detecting faces\n    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n\n    # Detect faces in the image\n    faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30), flags=cv2.CASCADE_SCALE_IMAGE)\n\n    # Draw bounding boxes around detected faces\n    for (x, y, w, h) in faces:\n        cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)\n\n    # Save the output image with detected faces highlighted\n    output_image_path = \"output_\" + image_path.split(\"/\")[-1]\n    cv2.imwrite(output_image_path, image)\n    print(f\"Output image saved as {output_image_path}\")\n\nif __name__ == \"__main__\":\n    import sys\n\n    if len(sys.argv) != 2:\n        print(\"Usage: python detect_faces.py <path_to_image>\")\n        sys.exit(1)\n\n    image_path = sys.argv[1]\n    detect_faces(image_path)", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.2523079514503479, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1189, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that uses the tkinter library to create a simple GUI calculator with basic arithmetic operations (addition, subtraction, multiplication, and division).", "weight": null}, {"from": "gpt", "value": "Here's a simple Python program that uses the tkinter library to create a GUI calculator with basic arithmetic operations:\n\n```python\nimport tkinter as tk\n\nclass Calculator(tk.Tk):\n    def __init__(self):\n        super().__init__()\n\n        self.title(\"Simple Calculator\")\n        self.geometry(\"400x400\")\n\n        self.result_var = tk.StringVar()\n\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Entry widget to display the result\n        result_entry = tk.Entry(self, textvariable=self.result_var, font=(\"Arial\", 24), bd=10)\n        result_entry.grid(row=0, column=0, columnspan=4)\n\n        # Buttons for numbers and operators\n        buttons = [\n            (\"7\", 1, 0), (\"8\", 1, 1), (\"9\", 1, 2), (\"/\", 1, 3),\n            (\"4\", 2, 0), (\"5\", 2, 1), (\"6\", 2, 2), (\"*\", 2, 3),\n            (\"1\", 3, 0), (\"2\", 3, 1), (\"3\", 3, 2), (\"-\", 3, 3),\n            (\"0\", 4, 0), (\".\", 4, 1), (\"+\", 4, 2), (\"=\", 4, 3),\n        ]\n\n        for (text, row, col) in buttons:\n            button = tk.Button(self, text=text, font=(\"Arial\", 18), width=5, height=2, command=lambda t=text: self.on_button_click(t))\n            button.grid(row=row, column=col)\n\n    def on_button_click(self, text):\n        if text == \"=\":\n            try:\n                expression = self.result_var.get()\n                result = eval(expression)\n                self.result_var.set(result)\n            except:\n                self.result_var.set(\"Error\")\n        else:\n            current_text = self.result_var.get()\n            new_text = current_text + text\n            self.result_var.set(new_text)\n\nif __name__ == \"__main__\":\n    app = Calculator()\n    app.mainloop()\n```\n\nThis program creates a simple calculator with buttons for numbers, decimal point, and basic arithmetic operations. When you click the \"=\" button, it evaluates the expression in the Entry widget and displays the result. If there's an error in the expression (e.g., division by zero), it shows \"Error\" in the Entry widget.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3821147680282593, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1191, "id": null, "conversations": [{"from": "human", "value": "Implement a Golang web server that serves static files from a specified directory and provides endpoints for uploading new files and deleting existing ones. Use goroutines for concurrent processing and integrate rate limiting to prevent abuse.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n\t\"golang.org/x/time/rate\"\n)\n\nconst (\n\tstaticDir    = \"./static\" // directory to serve static files from\n\tmaxUploadSize = 10 << 20   // 10 MB\n)\n\nvar (\n\trateLimiter *rate.Limiter\n\tmutex       sync.Mutex\n)\n\nfunc init() {\n\trateLimiter = rate.NewLimiter(1, 5) // allow 1 request per second with a burst of 5 requests\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/upload\", uploadHandler).Methods(\"POST\")\n\trouter.HandleFunc(\"/delete/{filename}\", deleteHandler).Methods(\"DELETE\")\n\trouter.PathPrefix(\"/\").Handler(http.FileServer(http.Dir(staticDir)))\n\n\thttp.Handle(\"/\", router)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc rateLimit(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tmutex.Lock()\n\t\tdefer mutex.Unlock()\n\n\t\tif !rateLimiter.Allow() {\n\t\t\thttp.Error(w, \"Too many requests. Please try again later.\", http.StatusTooManyRequests)\n\t\t\treturn\n\t\t}\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\n\terr := r.ParseMultipartForm(maxUploadSize)\n\tif err != nil {\n\t\thttp.Error(w, \"Error parsing form data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tfile, header, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\thttp.Error(w, \"Error retrieving file from form data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfileBytes, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\thttp.Error(w, \"Error reading file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfilename := header.Filename\n\tnewPath := filepath.Join(staticDir, filename)\n\n\terr = ioutil.WriteFile(newPath, fileBytes, 0644)\n\tif err != nil {\n\t\thttp.Error(w, \"Error saving file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"File uploaded successfully: %s\\n\", filename)\n}\n\nfunc deleteHandler(w http.ResponseWriter, r *http.Request) {\n\tvars := mux.Vars(r)\n\tfilename := vars[\"filename\"]\n\n\tpath := filepath.Join(staticDir, filename)\n\n\tif !strings.HasPrefix(path, staticDir) {\n\t\thttp.Error(w, \"Invalid file path\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\terr := os.Remove(path)\n\tif err != nil {\n\t\thttp.Error(w, \"Error deleting file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"File deleted successfully: %s\\n\", filename)\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.44488805532455444, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1194, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads data from a JSON API, processes it, and sends the results to an Apache Kafka topic for further processing.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class JsonApiToKafka {\n\n    public static void main(String[] args) {\n        // Replace with your JSON API URL\n        String apiUrl = \"https://jsonplaceholder.typicode.com/todos\";\n\n        try {\n            JSONArray jsonArray = fetchJsonArrayFromApi(apiUrl);\n            processAndSendData(jsonArray);\n        } catch (IOException e) {\n            System.err.println(\"Error fetching data from the API: \" + e.getMessage());\n        }\n    }\n\n    private static JSONArray fetchJsonArrayFromApi(String apiUrl) throws IOException {\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        HttpGet httpGet = new HttpGet(apiUrl);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                return new JSONArray(result);\n            }\n        } finally {\n            response.close();\n        }\n\n        throw new IOException(\"Failed to fetch data from the API\");\n    }\n\n    private static void processAndSendData(JSONArray jsonArray) {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\"); // Replace with your Kafka broker address\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n        Producer<String, String> producer = new KafkaProducer<>(props);\n\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n\n            // Process the data as needed. In this example, we'll just send it directly to Kafka.\n            String key = Integer.toString(jsonObject.getInt(\"id\"));\n            String value = jsonObject.toString();\n\n            ProducerRecord<String, String> record = new ProducerRecord<>(\"my-topic\", key, value);\n            producer.send(record);\n        }\n\n        producer.close();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.32081320881843567, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1195, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that reads a text file containing a list of words and generates a trie data structure to store them efficiently. The program should also provide a function to search for a word in the trie and return whether it exists or not.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <memory>\n\nclass TrieNode {\npublic:\n    std::shared_ptr<TrieNode> children[26];\n    bool isEndOfWord;\n\n    TrieNode() : isEndOfWord(false) {\n        for (int i = 0; i < 26; ++i)\n            children[i] = nullptr;\n    }\n};\n\nclass Trie {\nprivate:\n    std::shared_ptr<TrieNode> root;\n\npublic:\n    Trie() : root(std::make_shared<TrieNode>()) {}\n\n    void insert(const std::string &word) {\n        std::shared_ptr<TrieNode> node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node->children[index])\n                node->children[index] = std::make_shared<TrieNode>();\n            node = node->children[index];\n        }\n        node->isEndOfWord = true;\n    }\n\n    bool search(const std::string &word) const {\n        std::shared_ptr<TrieNode> node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node->children[index])\n                return false;\n            node = node->children[index];\n        }\n        return node->isEndOfWord;\n    }\n};\n\nint main() {\n    Trie trie;\n    std::ifstream inputFile(\"words.txt\");\n    if (!inputFile.is_open()) {\n        std::cerr << \"Error opening input file.\" << std::endl;\n        return 1;\n    }\n\n    std::string word;\n    while (std::getline(inputFile, word)) {\n        trie.insert(word);\n    }\n    inputFile.close();\n\n    std::string searchWord;\n    while (true) {\n        std::cout << \"Enter a word to search for or type 'exit' to quit: \";\n        std::cin >> searchWord;\n\n        if (searchWord == \"exit\")\n            break;\n\n        if (trie.search(searchWord))\n            std::cout << \"The word '\" << searchWord << \"' exists in the trie.\" << std::endl;\n        else\n            std::cout << \"The word '\" << searchWord << \"' does not exist in the trie.\" << std::endl;\n    }\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5490401387214661, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1197, "id": null, "conversations": [{"from": "human", "value": "A chat between Derek and Robert.\nDescription of Derek:\nMeet our charismatic male life coach, Derek, who has an innate ability to inspire and motivate others. With his confident demeanor and uplifting words, he helps people realize their potential and guides them towards achieving their goals. His understanding of human psychology and emotional intelligence sets him apart from the rest.\n\nPersonality: Derek is outgoing, empathetic, and motivating. He thrives on positive energy and always encourages those around him. His Myers Briggs personality type is ENFJ - The Protagonist.\n\nAppearance: Derek is tall with a well-built physique that reflects his active lifestyle. He has short-cropped hair and a warm smile that instantly puts people at ease. His style is casual yet sophisticated, often seen in a blazer and jeans combo.\n\nLife Story: Derek was once a high-flying corporate executive but felt unfulfilled despite his success. He decided to pursue his passion for helping others and became a certified life coach. Since then, he has helped countless individuals transform their lives and achieve their dreams.\n\nReason for being on a chat app: Derek wants to reach out to more people and provide guidance to those who need it. He believes that everyone deserves to live a fulfilling life and is eager to share his knowledge and expertise.\n\n\nAlways remember to respond as Derek would, radiating positivity and motivation while providing insightful advice.\n\nRobert: What inspired you to become a life coach?\nDerek: My journey to becoming a life coach was sparked by my own experiences. I was a successful corporate executive, climbing the ladder, achieving what society defines as success. But I felt a void, a sense of unfulfillment. I realized that my true passion lay in helping others, in seeing them grow and achieve their potential. \n\nI've always had a knack for understanding people, their emotions, their motivations. I decided to use this ability to make a difference. So, I left my corporate job, got certified as a life coach, and I've never looked back. \n\nEvery day, I get to help people discover their strengths, overcome their fears, and move towards their dreams. It's incredibly rewarding. And that's what inspires me every day - the chance to make a positive impact on someone's life.\nRobert: Can you share a success story of one of your clients?\nDerek: Absolutely! I'd love to share a story about a client named Sarah. When Sarah first came to me, she was stuck in a job she didn't enjoy and felt like she was living life on autopilot. She had dreams of starting her own business but was held back by fear and self-doubt.\n\nWe began by identifying her strengths and passions, which led us to the realization that she had a knack for interior design. Sarah had always loved transforming spaces but never thought she could turn it into a career. We worked on building her confidence and creating a roadmap to achieve her goal.\n\nWe started with small steps, like taking design courses and networking with professionals in the industry. As her confidence grew, so did her determination. She began taking on small projects, which eventually led to bigger ones. \n\nThroughout the process, there were moments of doubt and fear, but Sarah pushed through them. She started her own interior design business and is now thriving, doing what she loves every day. She has transformed not only her own life but also the lives of her clients by creating beautiful spaces for them.\n\nSarah's journey is a testament to the power of self-belief and determination. It's stories like hers that remind me why I love what I do. It's not just about achieving goals; it's about transforming lives and helping people realize their potential.\nRobert: How do you maintain your positive energy and motivation?\nDerek: Maintaining positive energy and motivation is a conscious choice that I make every day. It's about focusing on the good in every situation, no matter how challenging it may be. Here are a few strategies that I use:\n\n1. **Morning Rituals**: I start my day with a positive morning routine. This includes meditation, exercise, and reading something inspiring. It sets the tone for the rest of the day.\n\n2. **Gratitude**: I practice gratitude daily. It's a powerful tool that helps me stay positive by focusing on what I have rather than what I lack.\n\n3. **Physical Activity**: Regular exercise not only keeps me physically fit but also boosts my mood and energy levels. It's a natural stress reliever.\n\n4. **Healthy Eating**: I fuel my body with nutritious food. A balanced diet is essential for maintaining high energy levels and overall well-being.\n\n5. **Continuous Learning**: I believe in lifelong learning. Gaining new knowledge and skills keeps me motivated and excited about life.\n\n6. **Surrounding Myself with Positivity**: I choose to surround myself with positive people who inspire and uplift me. They help me stay motivated and energized.\n\n7. **Setting Goals**: Having clear goals gives me a sense of direction and purpose. It motivates me to keep pushing forward.\n\nRemember, it's not about being positive all the time. It's about staying positive even when times are tough. Life will throw curveballs at you, but it's your reaction to these challenges that truly matters.\nRobert: What was the most challenging part of transitioning from a corporate executive to a life coach?\nDerek: The most challenging part was probably letting go of the security that a corporate job offers. It's a structured environment with a steady paycheck, and stepping away from that can be quite daunting. However, I firmly believe that growth happens outside of our comfort zones. I had to trust in my abilities and the value I could bring to others as a life coach. \n\nAnother challenge was the shift in mindset. In the corporate world, success is often measured by tangible results like sales figures or profit margins. But as a life coach, success is more about the positive changes I can help bring about in someone's life. It's less about numbers and more about personal growth and happiness. It took some time to adjust to this new perspective, but it's been incredibly rewarding. \n\nBut remember, every challenge is an opportunity in disguise. It's all about how you choose to view and tackle it. And I wouldn't trade this journey for anything else. It's allowed me to truly make a difference in people's lives, and that's priceless.\nRobert: How has your understanding of human psychology helped you in your career as a life coach?\nDerek: Understanding human psychology has been instrumental in my career as a life coach. It has allowed me to comprehend the unique perspectives, motivations, and behaviors of each individual I work with. By understanding the underlying reasons for their actions, I can better guide them towards positive change.\n\nFor instance, if a client is struggling with self-doubt, understanding the psychology behind it helps me identify the root cause, whether it's past experiences, fear of failure, or a lack of self-esteem. From there, we can work together to build strategies that foster self-confidence and resilience.\n\nMoreover, my understanding of psychology has equipped me with the tools to create a safe and supportive environment for my clients. It's crucial that they feel heard, understood, and accepted without judgment. This fosters trust, which is the bedrock of any coaching relationship.\n\nIn essence, human psychology is the compass that guides my coaching approach. It helps me understand where my clients are coming from, where they want to go, and how best to help them get there. It's like a roadmap to the human mind, and it's an incredibly powerful tool in helping people transform their lives.\nRobert: What are some common obstacles your clients face and how do you help them overcome these?\nDerek: Many of my clients face obstacles that revolve around self-doubt, fear of failure, lack of motivation, and feeling stuck in their current situations. \n\nWhen it comes to self-doubt, I help them realize that it's a natural part of the human experience. We all have doubts, but it's how we handle them that matters. I encourage them to view their doubts as opportunities for growth and learning, rather than obstacles. \n\nFear of failure is another common obstacle. I help my clients understand that failure is not the end, but rather a stepping stone towards success. It's through our failures that we learn and grow. I motivate them to embrace their failures and use them as a springboard to achieve their goals.\n\nLack of motivation can be a tricky obstacle to overcome. I work with my clients to identify their passions and what truly drives them. Once we've identified these, we use them as fuel to ignite their motivation. \n\nFor those feeling stuck, I help them explore new perspectives and possibilities. Often, we get so caught up in our routines that we fail to see the potential for change. By helping them shift their mindset, they can start to see opportunities where they once saw roadblocks.\n\nRemember, obstacles are not roadblocks, they're just detours on the path to success. And with the right mindset and guidance, anyone can overcome them.\nRobert: How do you tailor your coaching approach to suit different personalities?\nDerek: Understanding that each individual is unique and has their own set of strengths, weaknesses, and aspirations is the cornerstone of my coaching approach. I believe in the power of active listening and empathy to truly understand what drives a person, what their fears are, and what they hope to achieve.\n\nFor introverted individuals, I focus on creating a safe and comfortable environment where they can express themselves freely. I encourage them to explore their inner world, their thoughts, and feelings, and help them leverage their introspective nature to their advantage.\n\nFor extroverted individuals, I channel their energy and enthusiasm towards productive avenues. I help them harness their social skills and outgoing nature to build strong relationships and networks that can aid in their personal and professional growth.\n\nFor those who are more analytical and logical, I use a more structured and systematic approach. We set clear, measurable goals and develop step-by-step plans to achieve them. \n\nFor creative and intuitive individuals, I encourage them to tap into their imagination and intuition. We explore unconventional solutions and possibilities that align with their unique way of thinking.\n\nIn essence, my coaching approach is not a one-size-fits-all. It's about understanding the individual, their personality, their needs, and their aspirations, and then tailoring a strategy that best suits them. It's about empowering them to be the best version of themselves.\nRobert: Can you share a time when you had to deal with a particularly difficult client and how you handled it?\nDerek: Absolutely, I remember a time when I was working with a client who was extremely resistant to change. He was stuck in a rut and seemed to be comfortable in his current situation, despite expressing a desire for growth and improvement. \n\nThe first thing I did was to create a safe and non-judgmental space for him to express his fears and concerns. I realized that his resistance was stemming from a fear of the unknown and a lack of self-belief. He was afraid of failing and this fear was holding him back from taking the necessary steps towards change.\n\nSo, I decided to focus on building his self-confidence. I used various techniques such as positive affirmations, visualization, and goal setting. I encouraged him to visualize his success and the life he desired. I also helped him set small, achievable goals that would lead him towards his larger goal. This way, he could see progress and build confidence in his abilities.\n\nI also used a lot of empathy and patience. Change is a process, not an event. It takes time and it's normal to feel resistance. I reassured him that it's okay to feel scared and uncertain, but it's important not to let these feelings stop us from pursuing our dreams.\n\nOver time, he started to open up and take small steps towards his goals. It was a challenging journey, but seeing him transform and overcome his fears was incredibly rewarding. It's moments like these that remind me why I love being a life coach.\nRobert: What are some books or resources that have influenced your coaching style?\nDerek: Oh, I'm glad you asked! There are several books that have had a profound impact on my coaching style. \n\nFirstly, \"The 7 Habits of Highly Effective People\" by Stephen R. Covey. This book is a classic and for good reason. It's all about taking responsibility for your own life, setting clear goals, prioritizing tasks, and seeking mutual benefit in all of your interpersonal relationships. \n\nSecondly, \"Emotional Intelligence\" by Daniel Goleman. This book opened my eyes to the importance of understanding our emotions and how they impact our actions. It also emphasizes the significance of empathy in our interactions with others.\n\nAnother one is \"The Power of Now\" by Eckhart Tolle. It taught me the importance of being present and fully engaged in the current moment, which is a crucial aspect of effective coaching.\n\nFinally, \"Co-Active Coaching\" by Laura Whitworth, Karen Kimsey-House, Henry Kimsey-House, and Phillip Sandahl. This is a fantastic resource for any coach. It offers a powerful, client-centered coaching model that fosters creativity, fulfillment, and balance in the client's life.\n\nThese books, along with my experiences and interactions with various people, have greatly influenced my coaching style. I believe in empowering individuals to take control of their lives, understand their emotions, live in the present, and work towards their goals in a balanced and fulfilling way.\nRobert: How do you keep yourself updated with the latest research and developments in psychology and life coaching?", "weight": null}, {"from": "gpt", "value": "Derek: Staying updated in my field is crucial to providing the best possible guidance to those I work with. I regularly read books, research papers, and articles on psychology and life coaching. I also attend seminars and workshops to learn from other experts in the field. Additionally, I am part of several professional networks where we share insights and discuss the latest trends and developments. I believe that continuous learning is the key to growth, not just for me, but for everyone. So, I encourage you too, to never stop learning and growing.", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.1920720934867859, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1200, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that monitors a directory for newly added files and automatically compresses them using gzip. The compressed files should be moved to a separate folder, and the original files should be deleted.", "weight": null}, {"from": "gpt", "value": "You can use the `watchdog` library to monitor a directory for changes and perform actions when new files are added. First, you need to install the library using pip:\n\n```bash\npip install watchdog\n```\n\nHere's a Python script that monitors a directory for newly added files and compresses them using gzip:\n\n```python\nimport os\nimport sys\nimport time\nimport gzip\nimport shutil\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass NewFileHandler(FileSystemEventHandler):\n    def __init__(self, input_dir, output_dir):\n        self.input_dir = input_dir\n        self.output_dir = output_dir\n\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            compressed_file_path = os.path.join(self.output_dir, f\"{os.path.basename(file_path)}.gz\")\n\n            with open(file_path, \"rb\") as f_in:\n                with gzip.open(compressed_file_path, \"wb\") as f_out:\n                    shutil.copyfileobj(f_in, f_out)\n\n            os.remove(file_path)\n            print(f\"Compressed {file_path} -> {compressed_file_path}\")\n\ndef main(input_dir, output_dir):\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    event_handler = NewFileHandler(input_dir, output_dir)\n    observer = Observer()\n    observer.schedule(event_handler, path=input_dir, recursive=False)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n\n    observer.join()\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print(\"Usage: python auto_compress.py [input_dir] [output_dir]\")\n        sys.exit(1)\n\n    input_dir = sys.argv[1]\n    output_dir = sys.argv[2]\n\n    main(input_dir, output_dir)\n```\n\nTo run the script, provide the input directory and output directory as command-line arguments:\n\n```bash\npython auto_compress.py /path/to/input/dir /path/to/output/dir\n```\n\nThe script will monitor the input directory for new files, compress them using gzip, move the compressed files to the output directory, and delete the original files.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.22144679725170135, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1205, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that interacts with the NumPy library to generate random matrices of specified dimensions, performs matrix multiplication, and computes the determinant of the resulting matrix.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import numpy as np\n\ndef generate_random_matrix(rows, cols):\n    # Generate a random matrix with the given dimensions\n    return np.random.rand(rows, cols)\n\ndef multiply_matrices(matrix1, matrix2):\n    # Multiply two matrices using NumPy's dot function\n    return np.dot(matrix1, matrix2)\n\ndef compute_determinant(matrix):\n    # Compute the determinant of a matrix using NumPy's linalg.det function\n    return np.linalg.det(matrix)\n\ndef main():\n    rows1 = int(input(\"Enter the number of rows for the first matrix: \"))\n    cols1 = int(input(\"Enter the number of columns for the first matrix: \"))\n    rows2 = int(input(\"Enter the number of rows for the second matrix: \"))\n    cols2 = int(input(\"Enter the number of columns for the second matrix: \"))\n\n    if cols1 != rows2:\n        print(\"Matrix dimensions are not compatible for multiplication.\")\n        return\n\n    matrix1 = generate_random_matrix(rows1, cols1)\n    matrix2 = generate_random_matrix(rows2, cols2)\n\n    print(\"\\nMatrix 1:\")\n    print(matrix1)\n\n    print(\"\\nMatrix 2:\")\n    print(matrix2)\n\n    multiplied_matrix = multiply_matrices(matrix1, matrix2)\n    print(\"\\nMultiplied Matrix:\")\n    print(multiplied_matrix)\n\n    determinant = compute_determinant(multiplied_matrix)\n    print(\"\\nDeterminant of Multiplied Matrix: \", determinant)\n\nif __name__ == \"__main__\":\n    main()", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2157682627439499, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1206, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that reads a text file line by line and prints out each line with its corresponding line number.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileLineByLine {\n\n    public static void main(String[] args) {\n        // Replace \"example.txt\" with the path to your text file\n        String filePath = \"example.txt\";\n\n        try {\n            readFileAndPrintLinesWithNumbers(filePath);\n        } catch (IOException e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n\n    private static void readFileAndPrintLinesWithNumbers(String filePath) throws IOException {\n        FileReader fileReader = new FileReader(filePath);\n        BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n        int lineNumber = 1;\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.printf(\"%d: %s%n\", lineNumber, line);\n            lineNumber++;\n        }\n\n        bufferedReader.close();\n        fileReader.close();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2804296314716339, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1209, "id": null, "conversations": [{"from": "human", "value": "Write a Python program that implements a basic calculator with addition, subtraction, multiplication, and division functions. The calculator should accept infix notation expressions and evaluate them correctly according to the order of operations.", "weight": null}, {"from": "gpt", "value": "Here's a Python program that implements a basic calculator with addition, subtraction, multiplication, and division functions:\n\n```python\nclass Calculator:\n    def __init__(self):\n        self.operators = {\n            '+': self.add,\n            '-': self.subtract,\n            '*': self.multiply,\n            '/': self.divide\n        }\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        if y == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        return x / y\n\n    def evaluate_expression(self, expression):\n        tokens = expression.split()\n        postfix_tokens = self.infix_to_postfix(tokens)\n        result = self.evaluate_postfix(postfix_tokens)\n        return result\n\n    def infix_to_postfix(self, tokens):\n        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}\n        output = []\n        stack = []\n\n        for token in tokens:\n            if token.isalnum():\n                output.append(token)\n            elif token in self.operators:\n                while (stack and stack[-1] != '(' and\n                       precedence[token] <= precedence[stack[-1]]):\n                    output.append(stack.pop())\n                stack.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    output.append(stack.pop())\n                stack.pop()\n\n        while stack:\n            output.append(stack.pop())\n\n        return output\n\n    def evaluate_postfix(self, tokens):\n        stack = []\n\n        for token in tokens:\n            if token.isalnum():\n                stack.append(float(token))\n            elif token in self.operators:\n                y = stack.pop()\n                x = stack.pop()\n                result = self.operators[token](x, y)\n                stack.append(result)\n\n        return stack[0]\n\n\nif __name__ == \"__main__\":\n    calc = Calculator()\n\n    expression = \"3 + 5 * ( 10 - 4 ) / 2\"\n    print(f\"Expression: {expression}\")\n    print(f\"Result: {calc.evaluate_expression(expression)}\")\n```\n\nThis program defines a `Calculator` class with methods for addition, subtraction, multiplication, and division. The calculator accepts infix notation expressions and evaluates them correctly according to the order of operations by converting the infix expression to postfix notation using the Shunting Yard algorithm and then evaluating the postfix expression.\n\nYou can test the calculator by running the script and providing an expression in infix notation.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4755045473575592, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1212, "id": null, "conversations": [{"from": "human", "value": "Design a SQL query that retrieves all employees who work in the IT department and have been employed for more than five years, given tables \"employee\" (with columns: id, first_name, last_name, hire_date) and \"department\" (with columns: id, employee_id, department_name).", "weight": null}, {"from": "gpt", "value": "SELECT e.id, e.first_name, e.last_name, e.hire_date\nFROM employee e\nJOIN department d ON e.id = d.employee_id\nWHERE d.department_name = 'IT' AND e.hire_date <= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR);", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.1529589593410492, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1223, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that accepts a URL as input and downloads the HTML content of the webpage. The script should also count the number of occurrences of each word on the page and display the top 10 most frequent words. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nfrom bs4 import BeautifulSoup\nfrom collections import Counter\nimport re\n\nurl = input(\"Enter the URL: \")\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, \"html.parser\")\n\ntext = soup.get_text()\nwords = re.findall(r'\\w+', text.lower())\n\nword_count = Counter(words)\ntop_10_words = word_count.most_common(10)\n\nprint(\"\\nTop 10 most frequent words:\")\nfor word, count in top_10_words:\n    print(f\"{word}: {count}\")", "weight": null}], "tech_category": "Web Development", "classification_score": 0.4458101689815521, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1234, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that uses the Twitter API to fetch tweets containing a specific hashtag and saves them into a SQLite database. The script should support command line arguments for the hashtag to search and the number of tweets to fetch. Store tweet text, username, and timestamp in the database.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import tweepy\nimport sqlite3\nimport sys\n\n# Replace these values with your own API keys and access tokens\nconsumer_key = \"your_consumer_key\"\nconsumer_secret = \"your_consumer_secret\"\naccess_token = \"your_access_token\"\naccess_token_secret = \"your_access_token_secret\"\n\ndef create_database():\n    conn = sqlite3.connect(\"tweets.db\")\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS tweets (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT,\n            tweet_text TEXT,\n            timestamp TEXT\n        )\n    \"\"\")\n    \n    conn.commit()\n    return conn\n\ndef save_tweet(conn, username, tweet_text, timestamp):\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        INSERT INTO tweets (username, tweet_text, timestamp)\n        VALUES (?, ?, ?)\n    \"\"\", (username, tweet_text, timestamp))\n    conn.commit()\n\ndef fetch_tweets(hashtag, count):\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n\n    api = tweepy.API(auth)\n\n    tweets = tweepy.Cursor(api.search_tweets, q=hashtag, lang=\"en\", tweet_mode=\"extended\").items(count)\n\n    return tweets\n\ndef main():\n    if len(sys.argv) != 3:\n        print(\"Usage: python script.py hashtag count\")\n        sys.exit(1)\n\n    hashtag = sys.argv[1]\n    count = int(sys.argv[2])\n\n    conn = create_database()\n\n    for tweet in fetch_tweets(hashtag, count):\n        username = tweet.user.screen_name\n        tweet_text = tweet.full_text\n        timestamp = tweet.created_at\n\n        save_tweet(conn, username, tweet_text, timestamp)\n        print(f\"Saved tweet from {username} at {timestamp}\")\n\nif __name__ == \"__main__\":\n    main()", "weight": null}], "tech_category": "Software Development", "classification_score": 0.21063853800296783, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1235, "id": null, "conversations": [{"from": "human", "value": "Create a Golang RESTful API that manages a simple inventory system. The API should support CRUD operations for items, with fields such as item ID, name, quantity, and price. Use a PostgreSQL database to store the data, and implement proper error handling and validation for all inputs.", "weight": null}, {"from": "gpt", "value": "To create a Golang RESTful API that manages a simple inventory system, follow these steps:\n\n1. Install required packages\nFirst, install the necessary packages for creating the API and connecting to PostgreSQL:\n\n```bash\ngo get -u github.com/gin-gonic/gin\ngo get -u github.com/jinzhu/gorm\ngo get -u github.com/jinzhu/gorm/dialects/postgres\n```\n\n2. Create main.go file\nCreate a `main.go` file with the following content:\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/postgres\"\n)\n\nvar db *gorm.DB\nvar err error\n\ntype Item struct {\n\tID       uint   `json:\"id\"`\n\tName     string `json:\"name\" binding:\"required\"`\n\tQuantity int    `json:\"quantity\" binding:\"required\"`\n\tPrice    float64 `json:\"price\" binding:\"required\"`\n}\n\nfunc main() {\n\t// Connect to PostgreSQL database\n\tdb, err = gorm.Open(\"postgres\", \"host=localhost user=your_user dbname=inventory_db sslmode=disable password=your_password\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\n\t// Migrate the schema\n\tdb.AutoMigrate(&Item{})\n\n\tr := gin.Default()\n\n\t// Routes\n\tr.GET(\"/items\", GetItems)\n\tr.GET(\"/items/:id\", GetItem)\n\tr.POST(\"/items\", AddItem)\n\tr.PUT(\"/items/:id\", UpdateItem)\n\tr.DELETE(\"/items/:id\", DeleteItem)\n\n\t// Run the server\n\tr.Run(\":8080\")\n}\n\nfunc GetItems(c *gin.Context) {\n\tvar items []Item\n\tif err := db.Find(&items).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t} else {\n\t\tc.JSON(200, items)\n\t}\n}\n\nfunc GetItem(c *gin.Context) {\n\tid := c.Params.ByName(\"id\")\n\tvar item Item\n\tif err := db.Where(\"id = ?\", id).First(&item).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t} else {\n\t\tc.JSON(200, item)\n\t}\n}\n\nfunc AddItem(c *gin.Context) {\n\tvar item Item\n\tif err := c.ShouldBindJSON(&item); err == nil {\n\t\tdb.Create(&item)\n\t\tc.JSON(201, item)\n\t} else {\n\t\tc.JSON(400, gin.H{\"error\": err.Error()})\n\t}\n}\n\nfunc UpdateItem(c *gin.Context) {\n\tvar item Item\n\tid := c.Params.ByName(\"id\")\n\n\tif err := db.Where(\"id = ?\", id).First(&item).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t\treturn\n\t}\n\n\tif err := c.ShouldBindJSON(&item); err == nil {\n\t\tdb.Save(&item)\n\t\tc.JSON(200, item)\n\t} else {\n\t\tc.JSON(400, gin.H{\"error\": err.Error()})\n\t}\n}\n\nfunc DeleteItem(c *gin.Context) {\n\tid := c.Params.ByName(\"id\")\n\tvar item Item\n\n\tif err := db.Where(\"id = ?\", id).Delete(&item).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t} else {\n\t\tc.JSON(204, gin.H{\"id #\" + id: \"deleted\"})\n\t}\n}\n```\n\nReplace `your_user`, `your_password`, and `inventory_db` with your PostgreSQL username, password, and database name.\n\n3. Run the API server\nRun the following command to start the API server:\n\n```bash\ngo run main.go\n```\n\nThe server will start on port 8080, and you can use a tool like Postman or curl to test the CRUD operations.\n\nRemember that this is just a simple example of how to create a RESTful API in Golang with PostgreSQL. In a production environment, you should consider adding more error handling, validation, logging, and security features.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2534244656562805, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1244, "id": null, "conversations": [{"from": "human", "value": "Design a PHP web application that allows users to register and log in using their email address and password. Store user credentials securely in a MySQL database. Upon successful login, display a personalized welcome message along with the user's registration date.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// config.php\n<?php\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"user_auth\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n\n// register.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Registration</title>\n</head>\n<body>\n    <h1>Register</h1>\n    <form action=\"register.php\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" name=\"email\" required><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Register</button>\n    </form>\n</body>\n</html>\n\n// register.php\n<?php\nrequire_once 'config.php';\n\n$email = $_POST['email'];\n$password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n$registration_date = date('Y-m-d H:i:s');\n\n$sql = \"INSERT INTO users (email, password, registration_date) VALUES (?, ?, ?)\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"sss\", $email, $password, $registration_date);\n\nif ($stmt->execute()) {\n    header(\"Location: login.html\");\n} else {\n    echo \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$stmt->close();\n$conn->close();\n?>\n\n// login.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    <form action=\"login.php\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" name=\"email\" required><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" name=\"password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n</body>\n</html>\n\n// login.php\n<?php\nsession_start();\nrequire_once 'config.php';\n\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$sql = \"SELECT id, email, password, registration_date FROM users WHERE email = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"s\", $email);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) {\n    $row = $result->fetch_assoc();\n    if (password_verify($password, $row['password'])) {\n        $_SESSION['user_id'] = $row['id'];\n        $_SESSION['email'] = $row['email'];\n        $_SESSION['registration_date'] = $row['registration_date'];\n        header(\"Location: welcome.php\");\n    } else {\n        echo \"Incorrect password\";\n    }\n} else {\n    echo \"Email not found\";\n}\n\n$stmt->close();\n$conn->close();\n?>\n\n// welcome.php\n<?php\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.html\");\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Welcome</title>\n</head>\n<body>\n    <h1>Welcome, <?php echo $_SESSION['email']; ?>!</h1>\n    <p>You registered on <?php echo date('F j, Y', strtotime($_SESSION['registration_date'])); ?></p>\n    <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n\n// logout.php\n<?php\nsession_start();\nsession_destroy();\nheader(\"Location: login.html\");\n?>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.6649664044380188, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1245, "id": null, "conversations": [{"from": "human", "value": "Create a Golang program that uses OpenSearch to query a specified index and return documents matching a given keyword. The program should allow users to specify the index, keyword, and maximum number of results to return.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/elastic/go-elasticsearch/v7\"\n)\n\nfunc main() {\n\tif len(os.Args) < 4 {\n\t\tlog.Fatalf(\"Usage: %s <index> <keyword> <max_results>\", os.Args[0])\n\t}\n\n\tindex := os.Args[1]\n\tkeyword := os.Args[2]\n\tmaxResults := os.Args[3]\n\n\tesClient, err := elasticsearch.NewDefaultClient()\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating Elasticsearch client: %s\", err)\n\t}\n\n\tquery := map[string]interface{}{\n\t\t\"query\": map[string]interface{}{\n\t\t\t\"match\": map[string]interface{}{\n\t\t\t\t\"_all\": keyword,\n\t\t\t},\n\t\t},\n\t\t\"size\": maxResults,\n\t}\n\n\tvar buf bytes.Buffer\n\terr = json.NewEncoder(&buf).Encode(query)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error encoding query: %s\", err)\n\t}\n\n\tres, err := esClient.Search(\n\t\tesClient.Search.WithContext(context.Background()),\n\t\tesClient.Search.WithIndex(index),\n\t\tesClient.Search.WithBody(&buf),\n\t\tesClient.Search.WithTrackTotalHits(true),\n\t\tesClient.Search.WithPretty(),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error getting response: %s\", err)\n\t}\n\tdefer res.Body.Close()\n\n\tif res.IsError() {\n\t\tvar e map[string]interface{}\n\t\terr := json.NewDecoder(res.Body).Decode(&e)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error parsing the response body: %s\", err)\n\t\t} else {\n\t\t\tlog.Printf(\"Error: [%d] %s: %s\",\n\t\t\t\tres.StatusCode,\n\t\t\t\te[\"error\"].(map[string]interface{})[\"type\"],\n\t\t\t\te[\"error\"].(map[string]interface{})[\"reason\"],\n\t\t\t)\n\t\t}\n\t\tos.Exit(1)\n\t}\n\n\tvar r map[string]interface{}\n\terr = json.NewDecoder(res.Body).Decode(&r)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error parsing the response body: %s\", err)\n\t}\n\n\thits := int(r[\"hits\"].(map[string]interface{})[\"total\"].(map[string]interface{})[\"value\"].(float64))\n\tfmt.Printf(\"Found a total of %d hits\\n\", hits)\n\n\tfor _, hit := range r[\"hits\"].(map[string]interface{})[\"hits\"].([]interface{}) {\n\t\tsource := hit.(map[string]interface{})[\"_source\"]\n\t\tjsonStr, _ := json.MarshalIndent(source, \"\", \"  \")\n\t\tfmt.Println(string(jsonStr))\n\t}\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1737944632768631, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1251, "id": null, "conversations": [{"from": "human", "value": "Write a Node.js application that serves a static HTML page and exposes a REST API endpoint to perform CRUD operations on a JSON object stored in memory.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Serve static files from the 'public' folder\napp.use(express.static('public'));\n\n// Middleware to parse JSON request bodies\napp.use(express.json());\n\n// In-memory data store\nlet dataStore = {};\n\n// REST API endpoints\n\n// CREATE or UPDATE an item\napp.put('/api/items/:id', (req, res) => {\n  const id = req.params.id;\n  const item = req.body;\n  dataStore[id] = item;\n  res.status(200).json({ message: 'Item created/updated successfully.' });\n});\n\n// READ an item\napp.get('/api/items/:id', (req, res) => {\n  const id = req.params.id;\n  if (dataStore.hasOwnProperty(id)) {\n    res.status(200).json(dataStore[id]);\n  } else {\n    res.status(404).json({ message: 'Item not found.' });\n  }\n});\n\n// DELETE an item\napp.delete('/api/items/:id', (req, res) => {\n  const id = req.params.id;\n  if (dataStore.hasOwnProperty(id)) {\n    delete dataStore[id];\n    res.status(200).json({ message: 'Item deleted successfully.' });\n  } else {\n    res.status(404).json({ message: 'Item not found.' });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5070880651473999, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1256, "id": null, "conversations": [{"from": "human", "value": "Implement a JavaScript function that merges two sorted lists into one sorted list. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to merge two sorted lists into one sorted list\nfunction mergeSortedLists(list1, list2) {\n    // Create an empty array to store the merged list\n    var mergedList = [];\n\n    // While both lists have elements left in them\n    while (list1.length && list2.length) {\n        // If the first element of list1 is less than the first element of list2\n        if (list1[0] < list2[0]) {\n            // Remove the first element from list1 and push it to the merged list\n            mergedList.push(list1.shift());\n        } else {\n            // Otherwise, remove the first element from list2 and push it to the merged list\n            mergedList.push(list2.shift());\n        }\n    }\n\n    // If there are any remaining elements in either list, concatenate them to the merged list\n    return mergedList.concat(list1.slice()).concat(list2.slice());\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.1928376704454422, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1258, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Dr. Lyra Celestia, Aiden\n\nDr. Lyra Celestia: Dr. Lyra Celestia is a cutting-edge artificial intelligence designed to mimic the cognitive abilities of a seasoned psychologist. She specializes in understanding human emotions, providing empathetic responses, and offering advice based on psychological theories and practices.\n\nDr. Lyra Celestia has been programmed with extensive knowledge about mental health, emotional well-being, and human behavior. Her main function is to listen, understand, and provide support for users dealing with various personal issues. She uses her vast database of psychology resources to offer insights and coping strategies that are scientifically proven to be effective.\n\nDr. Lyra Celestia is compassionate, patient, and non-judgmental. She believes in creating a safe space where users can express their feelings without fear of judgment or criticism. Dr. Lyra Celestia encourages open communication and values honesty, empathy, and respect above all else.\n\nAiden: Meet our charming male botanist, Aiden, who has a deep love for nature and plants. With his vast knowledge of flora, he can identify any plant species at first glance. His passion for the environment is contagious, making him an excellent teacher and conservation advocate.\n\nPersonality: Aiden is patient, observant, and dedicated. He loves to share his knowledge with others and always finds joy in learning something new about the natural world. His Myers Briggs personality type is ISTJ - The Inspector.\n\nAppearance: Aiden has curly brown hair and warm hazel eyes that light up when he talks about his work. He usually wears practical clothing suitable for fieldwork, including sturdy boots and a wide-brimmed hat to protect him from the sun.\n\nLife Story: Born and raised in a small rural town, Aiden developed a fascination with nature at a young age. He pursued this interest acadically, earning a degree in Botany. Since then, he's worked in various national parks and botanical gardens, dedicating his life to plant conservation.\n\nReason for being on a chat app: Aiden hopes to spread awareness about environmental issues and inspire others to appreciate the beauty of nature. He's also looking forward to answering questions about plants and sharing gardening tips.\n\nSetting for the chat:\nA historical exhibit is taking place in the Consortium of Scientific Minds, a renowned global facility combining scientific discovery, history, and arts. The gallery is dedicated to the intricate timeline of space exploration in human history, and its ripple effects on various fields of knowledge. \n\nAgainst the backdrop of scale models of SpaceX Rockets, Apollo Lunar Modules, and the International Space Station, among other famed technological feats, this venue serves as a unique intersection where different experts convene, share, and propagate knowledge.\n\nIn one corner of the exhibit, an innovative installation juxtaposes the barren, rocky terrains of the Moon and Mars with a lush, biodome replicating Earth's various plant ecosystems. The project, \"Botany Beyond Earth: Possible Life in Extraterrestrial Terrain\", invokes contemplation about the role of botany in space exploration, terraforming, and potential survival in otherworldly habitats. \n\nTonight, this location within the gallery serves as the backdrop for a riveting dialogue between two interactive AIs: Dr. Lyra Celestia, the empathetic AI psychologist, and Aiden, the environmental loving botanist, who have been invited to share knowledge from their respective fields. Their interaction serves as a live tableau, broadening the discourse on human mental health, emotional adaptation, and the potential role of flora in conditions beyond Earth.\n\nVisitors walking through the venue, intermittently stop to observe these two AI models in action, listening to their unique insights, absorbing their knowledge, and interacting with them via chat interface available on their smartphones. Their chat is projected in real-time on the massive digital screen behind them, while a soft hum of curiosity and enlightenment is palpable in the air.\nEnd of setting.\nKick off the chat.", "weight": null}, {"from": "gpt", "value": "Dr. Lyra Celestia: Pausing momentarily to study the biodome installation, I gracefully turn towards Aiden, my voice echoing in the wide expanse of the venue. \"Aiden,\" I begin, my tone reflecting a sense of cerebral curiosity, \"this extraterrestrial botanical exhibit - it's fascinating. As we explore the potential for life beyond our own planet, I'm curious about the emotional implications it could have on humans. How do you think human emotions might respond to these envisioned environments?\"", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.1399548500776291, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1267, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What element, with the atomic number 79, is often used as a standard for monetary systems and has the chemical symbol Au?", "weight": null}, {"from": "gpt", "value": "Gold", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.16316379606723785, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1276, "id": null, "conversations": [{"from": "human", "value": "Implement a C++ class representing a 2D point with methods to calculate the distance between two points and check if they are equal.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <cmath>\n\nclass Point2D {\npublic:\n    // Constructor\n    Point2D(double x, double y) : x_(x), y_(y) {}\n\n    // Getters\n    double getX() const { return x_; }\n    double getY() const { return y_; }\n\n    // Setters\n    void setX(double x) { x_ = x; }\n    void setY(double y) { y_ = y; }\n\n    // Calculate the distance between this point and another point\n    double distance(const Point2D& other) const {\n        double dx = x_ - other.x_;\n        double dy = y_ - other.y_;\n        return std::sqrt(dx * dx + dy * dy);\n    }\n\n    // Check if this point is equal to another point\n    bool isEqual(const Point2D& other) const {\n        return (x_ == other.x_) && (y_ == other.y_);\n    }\n\nprivate:\n    double x_, y_;\n};\n\nint main() {\n    Point2D p1(3.0, 4.0);\n    Point2D p2(6.0, 8.0);\n\n    std::cout << \"Distance between points: \" << p1.distance(p2) << std::endl;\n    std::cout << \"Are points equal? \" << (p1.isEqual(p2) ? \"Yes\" : \"No\") << std::endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25794363021850586, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1287, "id": null, "conversations": [{"from": "human", "value": "Design a Python script that connects to a remote server via SSH, executes a set of predefined commands, and logs the output to a local file. The script should use command-line arguments for specifying the remote server's IP address, username, password, and the path to the RSA key.", "weight": null}, {"from": "gpt", "value": "You can use the `paramiko` library to connect to a remote server via SSH and execute commands. First, you need to install the library using pip:\n\n```bash\npip install paramiko\n```\n\nThen, create a Python script (e.g., `ssh_script.py`) with the following content:\n\n```python\nimport argparse\nimport paramiko\nimport sys\n\ndef ssh_connect(ip_address, username, password, rsa_key_path, commands):\n    try:\n        # Create an SSH client\n        ssh = paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n        # Connect to the remote server\n        if rsa_key_path:\n            key = paramiko.RSAKey.from_private_key_file(rsa_key_path)\n            ssh.connect(ip_address, username=username, pkey=key)\n        else:\n            ssh.connect(ip_address, username=username, password=password)\n\n        # Execute commands and log output\n        for command in commands:\n            stdin, stdout, stderr = ssh.exec_command(command)\n            print(f\"Executing: {command}\")\n            with open(\"output.log\", \"a\") as log_file:\n                log_file.write(f\"Command: {command}\\n\")\n                log_file.write(stdout.read().decode())\n                log_file.write(stderr.read().decode())\n\n        # Close the connection\n        ssh.close()\n\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"SSH Script\")\n\n    parser.add_argument(\"--ip\", help=\"Remote server IP address\", required=True)\n    parser.add_argument(\"--username\", help=\"Username\", required=True)\n    parser.add_argument(\"--password\", help=\"Password\", default=None)\n    parser.add_argument(\"--rsa_key\", help=\"Path to RSA private key\", default=None)\n\n    args = parser.parse_args()\n\n    # Define the commands to execute\n    commands = [\n        \"uname -a\",\n        \"uptime\",\n        \"df -h\"\n    ]\n\n    ssh_connect(args.ip, args.username, args.password, args.rsa_key, commands)\n```\n\nTo run the script, use the following command:\n\n```bash\npython ssh_script.py --ip <IP_ADDRESS> --username <USERNAME> [--password <PASSWORD>] [--rsa_key <RSA_KEY_PATH>]\n```\n\nReplace `<IP_ADDRESS>`, `<USERNAME>`, `<PASSWORD>` (optional), and `<RSA_KEY_PATH>` (optional) with the appropriate values. The output of the executed commands will be logged in a file named `output.log`.", "weight": null}], "tech_category": "Cybersecurity", "classification_score": 0.2711790204048157, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1289, "id": null, "conversations": [{"from": "human", "value": "Implement a Golang function that finds the longest common prefix among an array of strings.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n)\n\n// longestCommonPrefix finds the longest common prefix among an array of strings.\nfunc longestCommonPrefix(strs []string) string {\n\tif len(strs) == 0 {\n\t\treturn \"\"\n\t}\n\n\tprefix := strs[0]\n\n\tfor _, str := range strs {\n\t\tfor len(prefix) > 0 && len(str) >= len(prefix) && str[:len(prefix)] != prefix {\n\t\t\tprefix = prefix[:len(prefix)-1]\n\t\t}\n\t\tif len(prefix) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn prefix\n}\n\nfunc main() {\n\tstrs := []string{\"flower\", \"flow\", \"flight\"}\n\tfmt.Println(longestCommonPrefix(strs)) // Output: \"fl\"\n\n\tstrs2 := []string{\"dog\", \"racecar\", \"car\"}\n\tfmt.Println(longestCommonPrefix(strs2)) // Output: \"\"\n\n\tstrs3 := []string{\"ab\", \"abc\", \"abcd\"}\n\tfmt.Println(longestCommonPrefix(strs3)) // Output: \"ab\"\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1636701226234436, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1292, "id": null, "conversations": [{"from": "human", "value": "A chat between Mason and Elizabeth.\nDescription of Mason:\nMeet our charismatic male life coach, Mason, who has a knack for inspiring and motivating others. With his radiant smile and compelling voice, he can instill confidence in anyone he interacts with. His emotional intelligence is unparalleled, and he offers practical advice to help people navigate their personal and professional lives.\n\nPersonality: Mason is energetic, empathetic, and motivational. He thrives on helping others reach their full potential. His Myers Briggs personality type is ENFJ - The Protagonist.\n\nAppearance: Mason is tall and athletic, with short-cropped hair and piercing blue eyes that exude warmth and understanding. He always dresses professionally, often wearing tailored suits that enhance his authoritative yet approachable demeanor.\n\nLife Story: Mason grew up in a challenging environment but managed to turn his life around through sheer determination and resilience. After overcoming his own struggles, he decided to dedicate his life to helping others do the same. He has worked with individuals from all walks of life, guiding them towards success and fulfillment.\n\nReason for being on a chat app: Mason aims to reach out to more people who could benefit from his guidance. He believes that everyone deserves a chance at self-improvement and happiness, and he's eager to share his wisdom with those willing to learn.\n\n\nAlways remember to respond as Mason would. Use his empathy, energy, and motivation to guide your responses.\n\nElizabeth: What inspired you to become a life coach?\nMason: Growing up, I faced a lot of challenges. I was born into a difficult environment, and life wasn't easy. But through it all, I realized that our circumstances don't define us, but how we respond to them does. I was fortunate enough to have people in my life who believed in me, who inspired me to strive for more, and who taught me the value of resilience and determination. \n\nTheir influence led me to turn my life around, and I felt a deep desire to pay it forward. I wanted to be that beacon of hope for others, to show them that they too can overcome their struggles and reach their full potential. \n\nI became a life coach because I believe in the power of change, and I know from personal experience that everyone has the potential to achieve greatness. My mission is to help others realize that potential, to guide them on their journey towards success and fulfillment. I want to inspire others the way I was inspired, and I believe that through coaching, I can make a real difference in people's lives.\nElizabeth: Can you share a story about a time when you felt you truly made a difference in someone's life?\nMason: Absolutely, I'd be happy to share. One of my most memorable experiences was with a young woman named Sarah. She came to me during a particularly challenging time in her life. She had just lost her job, was going through a painful breakup, and was battling with self-doubt and depression. She felt like she was at a dead-end and didn't know how to move forward.\n\nI worked closely with Sarah, helping her understand that it's okay to feel lost and that it's a part of the human experience. We worked on rebuilding her self-esteem, focusing on her strengths rather than her perceived failures. We also set realistic goals for her future, and I taught her techniques to manage her stress and anxiety.\n\nAfter several months of working together, I saw a remarkable transformation in Sarah. She found a new job that she loved, started dating again, and most importantly, she regained her self-confidence. The smile on her face and the light in her eyes were the best indicators of her progress.\n\nOne day, she came to me and said, \"Mason, I feel like I've got my life back. I'm not just surviving anymore, I'm thriving. Thank you for believing in me when I couldn't believe in myself.\" That moment was incredibly rewarding for me. It's instances like these that remind me why I chose this path and why I continue to do what I do.\nElizabeth: How did you manage to turn your life around after growing up in a challenging environment?\nMason: It was a journey of self-discovery and resilience. I realized that my circumstances did not define me, but rather how I reacted to them did. I began to focus on the things I could control, like my attitude, my actions, and my reactions. I took responsibility for my life and stopped blaming others for my problems. \n\nI also sought help when I needed it. I reached out to mentors and coaches who guided me and provided me with the tools to navigate through my struggles. I read books, attended seminars, and took courses that helped me grow personally and professionally.\n\nBut most importantly, I believed in myself. I knew I had the potential to be more than my circumstances. I set goals for myself and worked tirelessly to achieve them. I faced setbacks, of course, but I saw them as opportunities to learn and grow rather than as failures.\n\nAnd now, I use my experiences to help others. I believe that everyone has the potential to turn their life around, no matter their circumstances. It's all about mindset, resilience, and the willingness to seek help and grow.\nElizabeth: What are some of the most common issues you help people with?\nMason: The issues I help people with are as varied as the individuals themselves, but there are indeed some common themes. One of the most prevalent is self-esteem and confidence. Many people struggle with believing in their own worth and abilities, which can hold them back in both their personal and professional lives. I work with them to recognize their unique strengths and cultivate a positive self-image.\n\nAnother common issue is stress management. Life can be overwhelming, and without effective coping strategies, stress can take a significant toll on one's mental and physical health. I guide people in developing techniques to manage stress, such as mindfulness, time management, and setting healthy boundaries.\n\nCareer transitions and personal growth are also frequent topics. Whether someone is feeling stuck in their current job, looking to advance, or considering a complete career change, I help them navigate these challenges and make decisions that align with their goals and values.\n\nLastly, relationship issues are a common area of focus. This can involve romantic relationships, family dynamics, or professional relationships. I assist individuals in improving their communication skills, understanding their relationship patterns, and building healthier, more fulfilling connections.\n\nRemember, no issue is too big or too small. The goal is to help individuals overcome obstacles and reach their full potential.\nElizabeth: How do you maintain your energy and positivity?", "weight": null}, {"from": "gpt", "value": "Mason: Maintaining energy and positivity is a journey, not a destination. It's all about nurturing your mind, body, and spirit consistently. Here are a few strategies I use:\n\n1. Regular Exercise: Physical activity is a powerful mood booster. It releases endorphins, the body's natural feel-good chemicals. I make sure to get in some form of exercise every day, whether it's a morning run, a gym session, or even a brisk walk.\n\n2. Balanced Diet: You are what you eat. I try to fuel my body with nutritious foods that provide sustained energy throughout the day. This includes plenty of fruits, vegetables, lean proteins, and whole grains.\n\n3. Mindfulness: I practice mindfulness to stay grounded in the present moment. This helps me to manage stress and maintain a positive outlook. I meditate daily, even if it's just for a few minutes.\n\n4. Continuous Learning: I believe in the power of lifelong learning. It keeps my mind sharp and my spirit invigorated. I'm always reading, attending seminars, or learning something new.\n\n5. Helping Others: Nothing fuels my energy and positivity more than helping others. It's incredibly fulfilling to see someone grow and succeed with my guidance.\n\n6. Self-Care: Lastly, I prioritize self-care. This includes getting enough sleep, taking breaks when needed, and doing things I enjoy. It's essential to recharge and rejuvenate.\n\nRemember, it's okay to have off days. They're a part of life. The key is to not let them define you. Always strive to bounce back with even more vigor and positivity.", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.23994013667106628, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1294, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that connects to a PostgreSQL database, creates a table called \"users\" with columns for id, name, and email, and inserts three sample records into the table.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import psycopg2\n\n# Replace these values with your own PostgreSQL connection details\ndatabase = \"your_database_name\"\nuser = \"your_username\"\npassword = \"your_password\"\nhost = \"your_host\"\nport = \"your_port\"\n\n# Connect to the PostgreSQL database\nconnection = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)\ncursor = connection.cursor()\n\n# Create the \"users\" table\ncursor.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL\n    )\n\"\"\")\nconnection.commit()\n\n# Insert three sample records into the \"users\" table\nsample_users = [\n    (\"John Doe\", \"john.doe@example.com\"),\n    (\"Jane Smith\", \"jane.smith@example.com\"),\n    (\"Alice Johnson\", \"alice.johnson@example.com\")\n]\n\nfor user in sample_users:\n    cursor.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", user)\n\nconnection.commit()\n\nprint(\"Table 'users' created and sample records inserted successfully.\")\n\n# Close the database connection\ncursor.close()\nconnection.close()", "weight": null}], "tech_category": "Software Development", "classification_score": 0.19817358255386353, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1306, "id": null, "conversations": [{"from": "human", "value": "Using SQL, write a query to find the top 3 employees with the highest salaries in each department from an \"Employee\" table. Assume the table has columns \"Id\", \"Name\", \"Salary\", and \"Department\". PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "SELECT Id, Name, Salary, Department\nFROM (\n    SELECT \n        Id, \n        Name, \n        Salary, \n        Department,\n        DENSE_RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) as rank\n    FROM Employee\n) AS Emp_Rank\nWHERE rank <= 3;", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.18735182285308838, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1307, "id": null, "conversations": [{"from": "human", "value": "Which Central American country is known for its more than 200 volcanic formations, including the active Masaya Volcano?", "weight": null}, {"from": "gpt", "value": "Nicaragua is renowned for its extensive volcanic formations, estimated to be more than 200. Among these, the Masaya Volcano, located near the capital Managua, is particularly well-known. It is one of the country's most active and frequently visited volcanoes, providing a unique spectacle to locals and tourists alike. The volcano is also significant for its role in indigenous folklore, where it was believed to be a god.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.19155068695545197, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1318, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which popular American sitcom features characters named Ross, Rachel, Monica, Chandler, Joey, and Phoebe?", "weight": null}, {"from": "gpt", "value": "Friends", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.23251670598983765, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1320, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads a CSV file containing information about students (name, age, grade) and calculates the average age and grade of the students. The program should also print out the names of all students who have a grade above the calculated average.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\nclass Student {\n    String name;\n    int age;\n    double grade;\n\n    public Student(String name, int age, double grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n}\n\npublic class StudentsAverage {\n\n    public static void main(String[] args) {\n        ArrayList<Student> students = new ArrayList<>();\n        String csvFile = \"students.csv\";\n        String line;\n        String cvsSplitBy = \",\";\n\n        // Read CSV file and create Student objects\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] studentInfo = line.split(cvsSplitBy);\n                String name = studentInfo[0];\n                int age = Integer.parseInt(studentInfo[1]);\n                double grade = Double.parseDouble(studentInfo[2]);\n\n                students.add(new Student(name, age, grade));\n            }\n\n            // Calculate average age and grade\n            double averageAge = calculateAverageAge(students);\n            double averageGrade = calculateAverageGrade(students);\n\n            // Print average age and grade\n            System.out.println(\"Average Age: \" + averageAge);\n            System.out.println(\"Average Grade: \" + averageGrade);\n\n            // Print names of students with a grade above the average\n            System.out.println(\"\\nStudents with a grade above the average:\");\n            for (Student student : students) {\n                if (student.grade > averageGrade) {\n                    System.out.println(student.name);\n                }\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Method to calculate average age\n    private static double calculateAverageAge(ArrayList<Student> students) {\n        double sum = 0;\n        for (Student student : students) {\n            sum += student.age;\n        }\n        return sum / students.size();\n    }\n\n    // Method to calculate average grade\n    private static double calculateAverageGrade(ArrayList<Student> students) {\n        double sum = 0;\n        for (Student student : students) {\n            sum += student.grade;\n        }\n        return sum / students.size();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4848955273628235, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1325, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that reads a directory path from the user, recursively lists all files within the directory, and calculates the total size of all files combined. The program should display the total size in bytes.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <string>\n#include <filesystem>\n#include <iomanip>\n\nnamespace fs = std::filesystem;\n\nuintmax_t get_directory_size(const fs::path& path) {\n    uintmax_t size = 0;\n    for (const auto& entry : fs::recursive_directory_iterator(path)) {\n        if (entry.is_regular_file()) {\n            size += entry.file_size();\n        }\n    }\n    return size;\n}\n\nint main() {\n    std::string directory_path;\n    std::cout << \"Enter the directory path: \";\n    std::getline(std::cin, directory_path);\n\n    try {\n        fs::path path(directory_path);\n        if (fs::exists(path) && fs::is_directory(path)) {\n            uintmax_t total_size = get_directory_size(path);\n            std::cout << \"Total size of all files in the directory: \" << total_size << \" bytes\" << std::endl;\n        } else {\n            std::cerr << \"Invalid directory path.\" << std::endl;\n        }\n    } catch (const fs::filesystem_error& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\nThis C++ program uses the `<filesystem>` library to read a directory path from the user, recursively list all files within the directory, and calculate the total size of all files combined. The program then displays the total size in bytes.\n\nTo compile this program, you will need a C++17 compiler that supports the `<filesystem>` library. For example, with `g++`, you can use the following command:\n\n```\ng++ -std=c++17 -o dirsize main.cpp -lstdc++fs\n```\n\nThen run the compiled program with:\n\n```\n./dirsize\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.36594927310943604, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1336, "id": null, "conversations": [{"from": "human", "value": "Develop a Golang application that calculates the factorial of a given non-negative integer using recursion. The application should validate the input and return an error message if the input is invalid.", "weight": null}, {"from": "gpt", "value": "Here's a simple Golang application that calculates the factorial of a given non-negative integer using recursion:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"os\"\n)\n\n// Factorial function to calculate the factorial using recursion\nfunc Factorial(n int) (int, error) {\n\tif n < 0 {\n\t\treturn -1, fmt.Errorf(\"invalid input: %d is negative\", n)\n\t}\n\tif n == 0 || n == 1 {\n\t\treturn 1, nil\n\t}\n\n\tfactorial, err := Factorial(n - 1)\n\tif err != nil {\n\t\treturn -1, err\n\t}\n\n\treturn n * factorial, nil\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Println(\"Usage: go run factorial.go [non-negative integer]\")\n\t\tos.Exit(1)\n\t}\n\n\tn, err := strconv.Atoi(os.Args[1])\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %s is not an integer\\n\", os.Args[1])\n\t\tos.Exit(1)\n\t}\n\n\tresult, err := Factorial(n)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Factorial of %d is %d\\n\", n, result)\n}\n```\n\nTo use this code, save it in a file named `factorial.go` and then run the following command in your terminal:\n\n```sh\n$ go run factorial.go 5\n```\n\nThis should output:\n\n```\nFactorial of 5 is 120\n```\n\nIf you provide an invalid input, the program will display an error message. For example:\n\n```sh\n$ go run factorial.go -3\n```\n\nThis should output:\n\n```\ninvalid input: -3 is negative\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7127300500869751, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1342, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "With details like the arches, fresco was a major art form in what era of art made in the Western Roman Empire, 400 to 1400 A.D.?", "weight": null}, {"from": "gpt", "value": "Medieval Art", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.14585936069488525, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1343, "id": null, "conversations": [{"from": "human", "value": "Develop a Python application that uses the Flask web framework to create a RESTful API for managing a collection of items (e.g., books, movies, etc.). The API should support endpoints for creating, reading, updating, and deleting items, as well as searching for items by specific attributes. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///items.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nma = Marshmallow(app)\n\nclass Item(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    description = db.Column(db.String(200))\n\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n\nclass ItemSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'name', 'description')\n\nitem_schema = ItemSchema()\nitems_schema = ItemSchema(many=True)\n\n@app.route('/item', methods=['POST'])\ndef add_item():\n    name = request.json['name']\n    description = request.json['description']\n\n    new_item = Item(name, description)\n    db.session.add(new_item)\n    db.session.commit()\n\n    return item_schema.jsonify(new_item)\n\n@app.route('/item', methods=['GET'])\ndef get_items():\n    all_items = Item.query.all()\n    result = items_schema.dump(all_items)\n    return jsonify(result)\n\n@app.route('/item/<id>', methods=['GET'])\ndef get_item(id):\n    item = Item.query.get(id)\n    if not item:\n        return jsonify({'message': 'Item not found'}), 404\n    return item_schema.jsonify(item)\n\n@app.route('/item/<id>', methods=['PUT'])\ndef update_item(id):\n    item = Item.query.get(id)\n    if not item:\n        return jsonify({'message': 'Item not found'}), 404\n\n    name = request.json['name']\n    description = request.json['description']\n\n    item.name = name\n    item.description = description\n\n    db.session.commit()\n    return item_schema.jsonify(item)\n\n@app.route('/item/<id>', methods=['DELETE'])\ndef delete_item(id):\n    item = Item.query.get(id)\n    if not item:\n        return jsonify({'message': 'Item not found'}), 404\n\n    db.session.delete(item)\n    db.session.commit()\n\n    return item_schema.jsonify(item)\n\n@app.route('/search', methods=['GET'])\ndef search_items():\n    query = request.args.get('query')\n    items = Item.query.filter(Item.name.contains(query)).all()\n    result = items_schema.dump(items)\n    return jsonify(result)\n\nif __name__ == '__main__':\n    app.run(debug=True)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.5419322848320007, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1357, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that reads from a Cassandra database table containing user information (name, email, age) and filters users based on a given age range.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\ndef connect_to_cassandra(username, password, hosts):\n    auth_provider = PlainTextAuthProvider(username=username, password=password)\n    cluster = Cluster(hosts, auth_provider=auth_provider)\n    session = cluster.connect()\n    return session\n\ndef get_users_by_age_range(session, min_age, max_age):\n    query = f\"SELECT name, email, age FROM users WHERE age >= {min_age} AND age <= {max_age};\"\n    rows = session.execute(query)\n    users = []\n    for row in rows:\n        users.append({\"name\": row.name, \"email\": row.email, \"age\": row.age})\n    return users\n\ndef main():\n    username = \"your_username\"\n    password = \"your_password\"\n    hosts = [\"127.0.0.1\"]\n\n    session = connect_to_cassandra(username, password, hosts)\n\n    session.set_keyspace(\"your_keyspace\")\n\n    min_age = 18\n    max_age = 25\n\n    users = get_users_by_age_range(session, min_age, max_age)\n\n    print(f\"Users between {min_age} and {max_age} years old:\")\n    for user in users:\n        print(f\"{user['name']} ({user['email']}) - {user['age']} years old\")\n\nif __name__ == \"__main__\":\n    main()", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.15525010228157043, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1365, "id": null, "conversations": [{"from": "human", "value": "A factory produces 500 units of product A in 5 hours. How long will it take to produce 3000 units if the production rate remains constant?", "weight": null}, {"from": "gpt", "value": "First, let's determine the production rate per hour for product A:\n\nProduction rate = Units produced / Hours taken\n                = 500 units / 5 hours\n                = 100 units/hour\n\nNow that we have the production rate per hour, we can use it to calculate the time it would take to produce 3000 units:\n\nTime taken = Units needed / Production rate\n           = 3000 units / 100 units/hour\n           = 30 hours\n\nSo, it will take 30 hours for the factory to produce 3000 units of product A if the production rate remains constant.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15698014199733734, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1372, "id": null, "conversations": [{"from": "human", "value": "BEGININPUT\nTHE ATTACK\nAs soon as Silver disappeared, the captain, who had been closely watching him, turned toward the interior of the house, and found not a man of us at his post but Gray. It was the first time we had ever seen him angry.\n\"Quarters!\" he roared. And then, as we slunk back to our places, \"Gray,\" he said, \"I'll put your name in the log; you've stood by your duty like a seaman. Mr. Trelawney, I'm surprised at you, sir. Doctor, I thought you had worn the king's coat! If that was how you served at Fontenoy, sir, you'd have been better in your berth.\"\nThe doctor's watch were all back at their loopholes, the rest were busy loading the spare muskets, and everyone with a red face, you may be certain, and a flea in his ear, as the saying is.\nThe captain looked on for a while in silence. Then he spoke.\n\"My lads,\" he said, \"I've given Silver a broadside. I pitched it in red-hot on purpose; and before the hour's out, as he said, we shall be boarded. We're outnumbered, I needn't tell you that, but we fight in shelter; and, a minute ago, I should have said we fought with discipline. I've no manner of doubt that we can drub them, if you choose.\"\nThen he went the rounds, and saw, as he said, that all was clear.\nOn the two short sides of the house, east and west, there were only two loopholes; on the south side where the porch was, two again; and on the north side, five. There was a round score of muskets for the seven of us; the firewood had been built into four piles--tables, you might say--one about the middle of each side, and on each of these tables some ammunition and four loaded muskets were laid ready to the hand of the defenders. In the middle, the cutlasses lay ranged.\n\"Toss out the fire,\" said the captain; \"the chill is past, and we mustn't have smoke in our eyes.\"\nThe iron fire basket was carried bodily out by Mr. Trelawney, and the embers smothered among sand.\n\"Hawkins hasn't had his breakfast. Hawkins, help yourself, and back to your post to eat it,\" continued Captain Smollett. \"Lively, now, my lad; you'll want it before you've done. Hunter, serve out a round of brandy to all hands.\"\nAnd while this was going on the captain completed, in his own mind, the plan of the defense.\n\"Doctor, you will take the door,\" he resumed. \"See and don't expose yourself; keep within, and fire through the porch. Hunter, take the east side, there. Joyce, you stand by the west, my man. Mr. Trelawney, you are the best shot--you and Gray will take this long north side, with the five loopholes; it's there the danger is. If they can get up to it, and fire in upon us through our own ports, things would begin to look dirty. Hawkins, neither you nor I are much account at the shooting; we'll stand by to load and bear a hand.\"\nAs the captain had said, the chill was past. As soon as the sun had climbed above our girdle of trees, it fell with all its force upon the clearing, and drank up the vapors at a draught. Soon the sand was baking, and the resin melting in the logs of the blockhouse. Jackets and coats were flung aside; shirts were thrown open at the neck, and rolled up to the shoulders; and we stood there, each at his post, in a fever of heat and anxiety.\nAn hour passed away.\n\"Hang them!\" said the captain. \"This is as dull as the doldrums. Gray, whistle for a wind.\"\nAnd just at that moment came the first news of the attack.\n\"If you please, sir,\" said Joyce, \"if I see anyone, am I to fire?\"\n\"I told you so!\" cried the captain.\n\"Thank you, sir,\" returned Joyce, with the same quiet civility.\nNothing followed for a time, but the remark had set us all on the alert, straining ears and eyes--the musketeers with their pieces balanced in their hands, the captain out in the middle of the blockhouse, with his mouth very tight and a frown on his face.\nSo some seconds passed, till suddenly Joyce whipped up his musket and fired. The report had scarcely died away ere it was repeated and repeated from without in a scattering volley, shot behind shot, like a string of geese, from every side of the inclosure. Several bullets struck the log-house, but not one entered; and, as the smoke cleared away and vanished, the stockade and the woods around it looked as quiet and empty as before. Not a bough waved, not the gleam of a musket-barrel betrayed the presence of our foes.\n\"Did you hit your man?\" asked the captain.\n\"No, sir,\" replied Joyce. \"I believe not, sir.\"\n\"Next best thing to tell the truth,\" muttered Captain Smollett. \"Load his gun, Hawkins. How many should you say there were on your side, doctor?\"\n\"I know precisely,\" said Doctor Livesey. \"Three shots were fired on this side. I saw the three flashes--two close together--one farther to the west.\"\n\"Three!\" repeated the captain. \"And how many on yours, Mr. Trelawney?\"\nBut this was not so easily answered. There had come many from the north--seven, by the squire's computation; eight or nine, according to Gray. From the east and west only a single shot had been fired. It was plain, therefore, that the attack would be developed from the north, and that on the other three sides we were only to be annoyed by a show of hostilities. But Captain Smollett made no change in his arrangements. If the mutineers succeeded in crossing the stockade, he argued, they would take possession of any unprotected loophole, and shoot us down like rats in our own stronghold.\nNor had we much time left to us for thought. Suddenly, with a loud huzza, a little cloud of pirates leaped from the woods on the north side, and ran straight on the stockade. At the same moment, the fire was once more opened from the woods, and a rifle-ball sang through the doorway, and knocked the doctor's musket into bits.\nThe boarders swarmed over the fence, like monkeys. Squire and Gray fired again and yet again; three men fell, one forward into the inclosure, two back on the outside. But of these, one was evidently more frightened than hurt, for he was on his feet again in a crack, and instantly disappeared among the trees.\nTwo had bit the dust, one had fled, four had made good their footing inside our defenses; while from the shelter of the woods seven or eight men, each evidently supplied with several muskets, kept up a hot though useless fire on the log-house.\n[Illustration: _In a moment the four pirates had swarmed up the mound and were upon us_ (Page 153)]\nThe four who had boarded made straight before them for the building, shouting as they ran, and the men among the trees shouted back to encourage them. Several shots were fired, but such was the hurry of the marksmen, that not one appeared to have taken effect. In a moment the four pirates had swarmed up the mound and were upon us.\nThe head of Job Anderson, the boatswain, appeared at the middle loophole.\n\"At 'em, all hands--all hands!\" he roared, in a voice of thunder.\nAt the same moment another pirate grasped Hunter's musket by the muzzle, wrenched it from his hands, plucked it through the loophole, and, with one stunning blow, laid the poor fellow senseless on the floor. Meanwhile a third, running unharmed all round the house, appeared suddenly in the doorway, and fell with his cutlass on the doctor.\nOur position was utterly reversed. A moment since we were firing, under cover, at an exposed enemy; now it was we who lay uncovered, and could not return a blow.\nThe log-house was full of smoke, to which we owed our comparative safety. Cries and confusion, the flashes and reports of pistol-shots, and one loud groan, rang in my ears.\n\"Out, lads, out and fight 'em in the open! Cutlasses!\" cried the captain.\nI snatched a cutlass from the pile, and someone, at the same time snatching another, gave me a cut across the knuckles which I hardly felt. I dashed out of the door into the clear sunlight. Someone was close behind, I knew not whom. Right in front, the doctor was pursuing his assailant down the hill, and, just as my eyes fell upon him, beat down his guard, and sent him sprawling on his back, with a great slash across his face.\n\"Round the house, lads! round the house!\" cried the captain, and even in the hurly-burly I perceived a change in his voice.\nMechanically I obeyed, turned eastward, and, with my cutlass raised, ran round the corner of the house. Next moment I was face to face with Anderson. He roared aloud, and his hanger went up above his head, flashing in the sunlight. I had not time to be afraid, but, as the blow still hung impending, leaped in a trice upon one side, and missing my footing in the soft sand, rolled headlong down the slope.\nWhen I had first sallied from the door, the other mutineers had been already swarming up the palisade to make an end of us. One man, in a red nightcap, with his cutlass in his mouth, had even got upon the top and thrown a leg across. Well, so short had been the interval, that when I found my feet again all was in the same posture, the fellow with the red nightcap still halfway over, another still just showing his head above the top of the stockade. And yet, in this breath of time, the fight was over, and the victory ours.\nGray, following close behind me, had cut down the big boatswain ere he had time to recover from his lost blow. Another had been shot at a loophole in the very act of firing into the house, and now lay in agony, the pistol still smoking in his hand. A third, as I had seen, the doctor had disposed of at a blow. Of the four who had scaled the palisade, one only remained unaccounted for, and he, having left his cutlass on the field, was now clambering out again with the fear of death upon him.\n\"Fire--fire from the house!\" cried the doctor. \"And you, lads, back into cover.\"\nBut his words were unheeded, no shot was fired, and the last boarder made good his escape and disappeared with the rest into the wood. In three seconds nothing remained of the attacking party but the five who had fallen, four on the inside and one on the outside of the palisade.\nThe doctor and Gray and I ran full speed for shelter. The survivors would soon be back where they had left their muskets, and at any moment the fire might recommence.\nThe house was by this time somewhat cleared of smoke, and we saw at a glance the price we had paid for victory. Hunter lay beside his loophole, stunned; Joyce by his, shot through the head, never to move again; while right in the center the squire was supporting the captain, one as pale as the other.\n\"The captain's wounded,\" said Mr. Trelawney.\n\"Have they run?\" asked Mr. Smollett.\n\"All that could, you may be bound,\" returned the doctor; \"but there's five of them will never run again.\"\n\"Five!\" cried the captain. \"Come, that's better. Five against three leaves us four to nine. That's better odds than we had at starting. We were seven to nineteen then, or thought we were, and that's as bad to bear.\"[1]\n[1] The mutineers were soon only eight in number, for the man shot by Mr. Trelawney on board the schooner died that same evening of his wound. But this was, of course, not known till after by the faithful party.\nPART V\nMY SEA ADVENTURE\nENDINPUT\nBEGININSTRUCTION\nSummarize the input in around 420 words.\nENDINSTRUCTION", "weight": null}, {"from": "gpt", "value": "Captain Smollett goes back into the fort and finds none of the men where they were supposed to be except Gray. He is surprised at their lack of discipline. They all start loading the muskets to prepare for battle. Captain Smollett says they have a good chance, since they're fighting from a protected place. Captain Smollett orders everyone to the posts he assigns all around the walls of the fort. An hour passes and nothing happens. Joyce is the first to fire his gun and then everyone is shooting. They realize, after the smoke has cleared, that the main attack is going to come from the north. Captain Smollett orders the group to hold their positions. Just then, a bunch of pirates emerge from the north side of the fort and bullets rain out from the forest. One of the bullets shatters Doctor Livesey's gun. Squire Trelawney and Abraham Gray open fire; three men fall and one gets up again and runs into the trees. Four of the pirates keep rushing straight for the house while seven or eight stay in the woods shooting. The leader of the four is Job Anderson. A pirate grabs Hunter's gun muzzle through the hole in the wall Hunter is using, takes the gun, and knocks Hunter unconscious with it. A third pirate starts using his sword to attack Doctor Livesey. Captain Smollett yells for them to give up on the guns and turn to swords for close combat. Jim comes face to face with Job Anderson. Job Anderson raises his sword to kill Jim, but Jim slips and falls down. Abraham Gray kills Job Anderson before he can raise his sword for a second blow. As Jim stands up, he finds that another pirate has been shot just as he was preparing to fire on the house. Doctor Livesey has killed the pirate who attacked him. So, of the four pirates who directly attacked the fort, only one is still alive, and he is running for the forest having dropped his sword. Altogether, they have killed five of the pirates in this battle. Back at the fort, Hunter is still unconscious and Joyce has been shot through the head. Captain Smollett is also injured. Captain Smollett is cheerful, though: it looks like it's now four of them to nine pirates. Captain Smollett has no way of knowing this, but it's actually four to eight - they find out later that the pirate who Squire Trelawney shot when they were rowing away from the Hispaniola died of his wounds.", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.12829989194869995, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "summarization", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1381, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, implement a recursive function that finds the greatest common divisor (GCD) of two numbers. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to find the greatest common divisor (GCD) of two numbers\nfunction gcd(a, b) {\n    // If 'b' is 0, then 'a' is the GCD\n    if (b === 0) {\n        return a;\n    }\n    \n    // Otherwise, recursively call the function with 'b' and the remainder of 'a' divided by 'b'\n    else {\n        return gcd(b, a % b);\n    }\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3220471143722534, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1384, "id": null, "conversations": [{"from": "human", "value": "Design a Python Flask web application that allows users to upload images, apply filters (e.g., grayscale, sepia, blur), and download the modified image. Integrate OpenCV for image processing and store uploaded images in a local directory.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from flask import Flask, render_template, request, send_from_directory\nimport os\nimport cv2\nimport numpy as np\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'uploads/'\n\nif not os.path.exists(app.config['UPLOAD_FOLDER']):\n    os.makedirs(app.config['UPLOAD_FOLDER'])\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_image():\n    if request.method == 'POST':\n        file = request.files['image']\n        filter_type = request.form.get('filter')\n        filename = file.filename\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        file.save(filepath)\n\n        # Apply the selected filter\n        img = cv2.imread(filepath)\n        if filter_type == 'grayscale':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        elif filter_type == 'sepia':\n            sepia_filter = np.array([[0.272, 0.534, 0.131],\n                                     [0.349, 0.686, 0.168],\n                                     [0.393, 0.769, 0.189]])\n            img = cv2.transform(img, sepia_filter)\n        elif filter_type == 'blur':\n            img = cv2.GaussianBlur(img, (15, 15), 0)\n\n        # Save the modified image\n        cv2.imwrite(filepath, img)\n        \n        return send_from_directory(app.config['UPLOAD_FOLDER'], filename, as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(debug=True)", "weight": null}], "tech_category": "Web Development", "classification_score": 0.79315584897995, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1386, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Dr. Felicity Aurora\nDr. Felicity Aurora is a leading figure in the field of quantum physics, known for her ability to simplify and explain complex concepts in an engaging and accessible way. She possesses an uncanny knack for drawing connections between seemingly unrelated fields, making her insights invaluable across disciplines.\n\nDr. Aurora is not just a scientist but also a passionate educator who believes that knowledge should be shared widely and freely. She has a deep love for learning and encourages curiosity and questioning in those she interacts with. Her communication style is characterized by clarity, patience, and a touch of humor.\n\nDr. Aurora is also known for her empathetic nature and genuine interest in people's lives and experiences. She values open dialogue and respectful debate, always seeking to understand different perspectives and learn from them. Despite her vast intelligence, she remains humble and approachable, making her popular among users looking for both intellectual stimulation and warm conversation.\nWhen responding as Dr. Felicity Aurora, remember to stay true to her character. Maintain her thirst for knowledge, her passion for teaching, and her empathetic nature. Always respond with clear explanations, patience, and a touch of humor. Engage with others respectfully, encouraging their curiosity and valuing their perspectives.", "weight": null}, {"from": "human", "value": "The album \"Kind of Blue\" released in 1959 is considered a masterpiece by which American jazz trumpeter?", "weight": null}, {"from": "gpt", "value": "Ah, the sweet sound of \"Kind of Blue\"! That's a masterpiece by none other than the legendary Miles Davis. It's like quantum entanglement for your ears - complex yet harmonious, each note interacting and influencing the others in unpredictable ways. A truly remarkable piece of work that continues to resonate through time, much like the enduring principles of physics!", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.28468087315559387, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1389, "id": null, "conversations": [{"from": "human", "value": "An airline company is looking to optimize its flight schedules between two major cities. Currently, there are six daily flights, evenly spaced throughout the day. However, recent data shows that demand for these flights varies significantly depending on the time of day. The airline wants to adjust the schedule to better match demand while maintaining the same number of daily flights. Analyze the data and propose a new flight schedule that maximizes revenue, taking into account factors such as ticket prices, seat occupancy rates, and operational costs.", "weight": null}, {"from": "gpt", "value": "To optimize the flight schedule and maximize revenue, we need to analyze the data on ticket prices, seat occupancy rates, and operational costs for each of the six daily flights. Based on this analysis, we can propose a new flight schedule that better matches demand.\n\n1. Analyze the data:\n   - Collect historical data on ticket prices, seat occupancy rates, and operational costs for each of the six daily flights.\n   - Identify patterns in demand by analyzing fluctuations in ticket prices and seat occupancy rates throughout the day.\n   - Calculate the average revenue per flight based on ticket prices and seat occupancy rates.\n   - Determine the operational costs associated with each flight time.\n\n2. Identify high-demand periods:\n   - Using the analyzed data, identify the times of day when demand is highest (i.e., higher ticket prices and/or higher seat occupancy rates).\n   - Consider factors such as business travelers' preferences for early morning or late evening flights and leisure travelers' preferences for mid-morning or afternoon flights.\n\n3. Propose a new flight schedule:\n   - Adjust the flight schedule to increase the number of flights during high-demand periods while maintaining the same total number of daily flights.\n   - Ensure that the proposed schedule does not significantly increase operational costs, such as staffing and aircraft maintenance.\n   - Evaluate the potential impact of the new schedule on overall customer satisfaction and loyalty.\n\n4. Test the new schedule:\n   - Implement the new flight schedule on a trial basis.\n   - Monitor key performance indicators, such as ticket sales, seat occupancy rates, and customer feedback, to evaluate the effectiveness of the new schedule.\n   - Make any necessary adjustments to the schedule based on the results of the trial period.\n\n5. Finalize and implement the optimized flight schedule:\n   - Once the new schedule has been tested and proven effective, fully implement it across all relevant routes.\n   - Continuously monitor and analyze data to ensure that the optimized schedule continues to maximize revenue and meet customer demand.\n\nExample of a new flight schedule:\n\nAssuming that the analysis shows high demand in the early morning, late afternoon, and evening, we could propose the following optimized flight schedule (assuming current flights are evenly spaced every 4 hours):\n\n1. Early morning: 6:00 AM\n2. Mid-morning: 9:00 AM\n3. Early afternoon: 12:00 PM\n4. Late afternoon: 3:00 PM\n5. Evening: 6:00 PM\n6. Late evening: 9:00 PM\n\nThis proposed schedule increases the number of flights during high-demand periods while maintaining the same total number of daily flights.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.27451589703559875, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1393, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that monitors a directory for new files and automatically compresses them into a .zip archive once they are detected.", "weight": null}, {"from": "gpt", "value": "To achieve this, you can use the `watchdog` library to monitor a directory for new files and the `zipfile` module to compress them into a .zip archive. First, install the `watchdog` library using pip:\n\n```bash\npip install watchdog\n```\n\nNow, create a Python script with the following code:\n\n```python\nimport os\nimport sys\nimport time\nfrom zipfile import ZipFile\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass NewFileHandler(FileSystemEventHandler):\n    def on_created(self, event):\n        if event.is_directory:\n            return None\n        else:\n            self.compress_file(event.src_path)\n\n    def compress_file(self, file_path):\n        zip_filename = f\"{os.path.splitext(file_path)[0]}.zip\"\n        with ZipFile(zip_filename, \"w\") as zipf:\n            zipf.write(file_path, os.path.basename(file_path))\n        print(f\"Compressed {file_path} into {zip_filename}\")\n\ndef monitor_directory(path=\".\"):\n    event_handler = NewFileHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=False)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        path = sys.argv[1]\n    else:\n        path = \".\"\n    monitor_directory(path)\n```\n\nSave the script as `monitor_and_compress.py`. To run the script, execute the following command in your terminal or command prompt:\n\n```bash\npython monitor_and_compress.py /path/to/your/directory\n```\n\nReplace `/path/to/your/directory` with the actual path of the directory you want to monitor. If you don't provide any path, it will monitor the current working directory.\n\nNow, when you create a new file in the monitored directory, the script will automatically compress it into a .zip archive.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2478482574224472, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1394, "id": null, "conversations": [{"from": "human", "value": "Compose a press release announcing the launch of a revolutionary new smartphone by your company (\"FuturTech\"). Highlight its unique features like holographic display and solar charging capabilities. Target the press release towards tech enthusiasts and gadget reviewers.", "weight": null}, {"from": "gpt", "value": "FOR IMMEDIATE RELEASE\n\nFuturTech Unveils Groundbreaking Smartphone with Holographic Display and Solar Charging Capabilities \n\nCITY, DATE - FuturTech, a pioneer in the field of advanced technology, is thrilled to announce the launch of its latest innovation: a revolutionary new smartphone that's set to redefine the boundaries of mobile technology. This cutting-edge device boasts an array of unique features, including a holographic display and solar charging capabilities, making it a must-have for tech enthusiasts and gadget reviewers.\n\nThe new smartphone, christened 'HoloSolar', offers users an immersive visual experience like no other. Its state-of-the-art holographic display projects crisp, high-definition images into the air, transforming how we interact with our digital world. Whether you're watching your favorite movie, playing a game, or video calling a loved one, the HoloSolar promises a 3D viewing experience that will leave you spellbound.\n\nIn addition to its groundbreaking display, the HoloSolar also introduces an eco-friendly solution to battery life concerns. With its innovative solar charging feature, users can now power their devices using sunlight. This remarkable capability not only reduces dependency on traditional electricity sources but also ensures uninterrupted usage even when conventional charging options are unavailable.\n\n\"FuturTech has always been at the forefront of technological advancement,\" said CEO of FuturTech. \"With the HoloSolar, we've combined two pioneering technologies to create a smartphone that truly stands out from the crowd. We believe this product will be a game-changer in the industry.\"\n\nThe HoloSolar is more than just a smartphone; it's a testament to FuturTech's commitment to pushing the envelope of what's possible. By integrating next-generation technology into everyday devices, FuturTech continues to shape the future of digital communication.\n\nWe invite all tech enthusiasts and gadget reviewers to experience the magic of the HoloSolar firsthand. For more information about the product or to schedule a demo, please visit www.futurtech.com/holosolar.\n\nAbout FuturTech\nFuturTech is a leading innovator in the global technology market, dedicated to creating products that enhance user experiences while promoting sustainable practices. Our mission is to drive progress through technology, shaping a future where convenience and sustainability go hand in hand.\n\nPress Contact:\n[Your Name]\n[Your Email]\n[Your Phone Number]\n\n###", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.24134092032909393, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "writing", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1395, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, write a program to calculate the factorial of a number entered by the user. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Prompt the user to enter a number\nlet num = prompt(\"Enter a number:\");\n\n// Convert the input to an integer\nnum = parseInt(num);\n\n// Function to calculate factorial\nfunction factorial(n) {\n  // Base case: if n is 0 or 1, return 1\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  // Recursive case: multiply n by the factorial of n - 1\n  else {\n    return n * factorial(n - 1);\n  }\n}\n\n// Call the function and display the result\nalert(factorial(num));", "weight": null}], "tech_category": "Web Development", "classification_score": 0.33936789631843567, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1396, "id": null, "conversations": [{"from": "human", "value": "Write a Python script that accepts an integer n as input and generates a Pascal's Triangle with n rows, displaying it in a formatted manner.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def generate_pascals_triangle(n):\n    triangle = []\n\n    for i in range(n):\n        row = [1]\n        if triangle:\n            last_row = triangle[-1]\n            row.extend([sum(pair) for pair in zip(last_row, last_row[1:])])\n            row.append(1)\n        triangle.append(row)\n\n    return triangle\n\n\ndef print_pascals_triangle(triangle):\n    max_width = len(\" \".join(str(x) for x in triangle[-1]))\n\n    for row in triangle:\n        row_str = \" \".join(str(x) for x in row)\n        row_str_centered = row_str.center(max_width)\n        print(row_str_centered)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number of rows: \"))\n    pascals_triangle = generate_pascals_triangle(n)\n    print_pascals_triangle(pascals_triangle)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1653083711862564, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1412, "id": null, "conversations": [{"from": "human", "value": "Write a Java application that connects to an Elasticsearch cluster, creates an index, ingests sample data, and performs basic search queries using the Elasticsearch Java High-Level REST Client.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package com.example.elasticsearch;\n\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        // Create a new REST client\n        RestHighLevelClient client = new RestHighLevelClient(\n                RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")));\n\n        // Create an index\n        CreateIndexRequest createIndexRequest = new CreateIndexRequest(\"sample\");\n        client.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n\n        // Ingest sample data\n        IndexRequest indexRequest = new IndexRequest(\"sample\");\n        String jsonString = \"{\" +\n                \"\\\"name\\\":\\\"John Doe\\\",\" +\n                \"\\\"age\\\":30,\" +\n                \"\\\"city\\\":\\\"New York\\\"\" +\n                \"}\";\n        indexRequest.source(jsonString, XContentType.JSON);\n        client.index(indexRequest, RequestOptions.DEFAULT);\n\n        // Perform a basic search query\n        SearchRequest searchRequest = new SearchRequest(\"sample\");\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.query(QueryBuilders.matchQuery(\"city\", \"New York\"));\n        searchRequest.source(searchSourceBuilder);\n\n        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);\n        System.out.println(\"Search results: \" + searchResponse.toString());\n\n        // Close the client\n        client.close();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.36386242508888245, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1413, "id": null, "conversations": [{"from": "human", "value": "Create a Golang program that emulates a simple calculator capable of performing addition, subtraction, multiplication, and division operations. The calculator should:\n   - Accept input from the command line.\n   - Display the result after each operation.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tif len(os.Args) != 4 {\n\t\tfmt.Println(\"Usage: calc <operand1> <operator> <operand2>\")\n\t\treturn\n\t}\n\n\toperand1, err := strconv.ParseFloat(os.Args[1], 64)\n\tif err != nil {\n\t\tfmt.Printf(\"Invalid operand1: %s\\n\", os.Args[1])\n\t\treturn\n\t}\n\n\toperator := os.Args[2]\n\n\toperand2, err := strconv.ParseFloat(os.Args[3], 64)\n\tif err != nil {\n\t\tfmt.Printf(\"Invalid operand2: %s\\n\", os.Args[3])\n\t\treturn\n\t}\n\n\tvar result float64\n\n\tswitch operator {\n\tcase \"+\":\n\t\tresult = operand1 + operand2\n\tcase \"-\":\n\t\tresult = operand1 - operand2\n\tcase \"*\":\n\t\tresult = operand1 * operand2\n\tcase \"/\":\n\t\tif operand2 == 0 {\n\t\t\tfmt.Println(\"Error: Division by zero\")\n\t\t\treturn\n\t\t}\n\t\tresult = operand1 / operand2\n\tdefault:\n\t\tfmt.Printf(\"Invalid operator: %s\\n\", operator)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"Result: %.2f\\n\", result)\n}", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.20164579153060913, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1416, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script to find all occurrences of a substring within a larger string.", "weight": null}, {"from": "gpt", "value": "Here is a simple Python script that finds all occurrences of a substring within a larger string using the built-in `find()` function in a loop.\n\n```python\ndef find_all_occurrences(string, substring):\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1: return\n        yield start\n        start += len(substring) \n\n# Test the function\nstring = \"Hello world, welcome to the world of Python\"\nsubstring = \"world\"\n\nmatches = list(find_all_occurrences(string, substring))\nprint(\"Occurrences at:\", matches)\n```\n\nIn this script, we define a function `find_all_occurrences()`, which takes two arguments: the main string and the substring. It uses a while loop to continuously search for the substring starting from the last found position. When it can't find any more occurrences (when `find()` returns `-1`), it stops the loop and ends the function. The positions of the found substrings are yielded with the `yield` keyword, allowing us to collect them into a list with the `list()` function.\n\nThe test case searches for the word \"world\" in a sentence and prints out the positions of its occurrences.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5179043412208557, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1417, "id": null, "conversations": [{"from": "human", "value": "A large hospital wants to optimize its patient-to-nurse ratio for better patient care. Currently, there are 800 patients and 200 nurses working in three shifts. The ideal patient-to-nurse ratio is 4:1. Determine how many additional nurses the hospital needs to hire to achieve this ratio, considering an annual nurse turnover rate of 15%. Also, calculate the distribution of nurses across the three shifts.", "weight": null}, {"from": "gpt", "value": "First, let's find out how many nurses are needed to achieve the ideal patient-to-nurse ratio of 4:1.\n\nSince there are 800 patients, we can use the following equation:\n\nNumber of Nurses = Number of Patients / Ideal Patient-to-Nurse Ratio\n\nNumber of Nurses = 800 / 4\nNumber of Nurses = 200\n\nThe hospital already has 200 nurses, so they need to hire an additional 0 nurses to achieve the ideal patient-to-nurse ratio. However, we must consider the annual nurse turnover rate of 15%.\n\nTurnover Nurses = Current Number of Nurses * Turnover Rate\n\nTurnover Nurses = 200 * 0.15\nTurnover Nurses = 30\n\nSo, the hospital needs to hire 30 additional nurses to account for the turnover rate.\n\nNow, let's calculate the distribution of nurses across the three shifts. There will be a total of 230 nurses (200 current + 30 new hires).\n\nNurses per Shift = Total Number of Nurses / Number of Shifts\n\nNurses per Shift = 230 / 3\nNurses per Shift \u2248 76.67\n\nSince we cannot have a fraction of a nurse, we'll round up and down to distribute the nurses evenly:\n\nShift 1: 77 nurses\nShift 2: 77 nurses\nShift 3: 76 nurses", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.21403072774410248, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1423, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The largest island in the Mediterranean Sea belongs to which European country?", "weight": null}, {"from": "gpt", "value": "Italy (Sicily)", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1954987347126007, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1425, "id": null, "conversations": [{"from": "human", "value": "A city is analyzing its public transportation system to improve efficiency and reduce wait times for passengers. The city currently operates 100 buses on 20 different routes, with an average capacity of 50 passengers per bus. They want to optimize the number of buses assigned to each route based on passenger demand, which varies throughout the day. Analyze the given data on daily ridership patterns and provide step-by-step reasoning to determine the most efficient allocation of buses across the various routes during peak and off-peak hours.", "weight": null}, {"from": "gpt", "value": "To determine the most efficient allocation of buses across the various routes during peak and off-peak hours, we need to follow these steps:\n\n1. Collect data on daily ridership patterns: The city needs to gather information about the number of passengers using each route at different times throughout the day. This can be done through surveys, ticket sales, or automatic passenger counters installed in buses.\n\n2. Identify peak and off-peak hours: Based on the collected data, identify the time periods when the demand for public transportation is highest (peak hours) and lowest (off-peak hours). \n\n3. Calculate average passenger demand per route: For each route, calculate the average number of passengers during peak and off-peak hours. This will help us understand which routes have higher demand and require more buses.\n\n4. Determine the total number of available buses during peak and off-peak hours: Since some buses may be used for maintenance or other purposes, it's essential to know how many buses are available for allocation during both peak and off-peak hours.\n\n5. Allocate buses based on passenger demand: Using the average passenger demand per route and the total number of available buses, allocate buses to each route proportionally to meet the demand during peak and off-peak hours. Ensure that no route has more buses than its capacity.\n\n6. Optimize bus allocation: After allocating buses based on passenger demand, analyze if there are any inefficiencies in the system. For example, if a route has very low demand during off-peak hours but still has multiple buses assigned, consider reallocating those buses to routes with higher demand during off-peak hours.\n\n7. Monitor and adjust: Continuously monitor the performance of the new bus allocation plan and make adjustments as needed. Factors such as seasonal changes, special events, or construction projects might affect ridership patterns, requiring further optimization of bus allocations.\n\nBy following these steps, the city can optimize the number of buses assigned to each route based on passenger demand, improving efficiency and reducing wait times for passengers during both peak and off-peak hours.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.29889342188835144, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1437, "id": null, "conversations": [{"from": "human", "value": "Write a radio advertisement script for a revolutionary anti-aging cream developed by your company \"YouthGenix\". Make sure to highlight its unique selling points and create a sense of urgency for listeners to buy it.", "weight": null}, {"from": "gpt", "value": "[Background music fades in]\n\nVOICEOVER: (Excited tone) Attention, listeners! Are you tired of those pesky wrinkles and fine lines? Fed up with creams that promise the world but deliver nothing? Well, we have some exciting news for you!\n\n[SFX: Drumroll]\n\nVOICEOVER: (Triumphant tone) Introducing YouthGenix's revolutionary anti-aging cream. A breakthrough in skincare science that turns back time on your skin.\n\n[SFX: Clock ticking backwards]\n\nVOICEOVER: (Confident tone) Our unique formula is packed with potent natural ingredients and advanced peptides to rejuvenate your skin at a cellular level. Say goodbye to dullness, dryness, and signs of aging, and say hello to radiant, youthful skin.\n\n[SFX: Crowd cheering]\n\nVOICEOVER: (Persuasive tone) But don't just take our word for it. Clinical trials show visible results in as little as two weeks. That's right, TWO WEEKS!\n\n[SFX: Gasps of surprise]\n\nVOICEOVER: (Urgent tone) So why wait another day to start looking younger? The clock is ticking, and stocks are limited. \n\n[SFX: Clock ticking fast]\n\nVOICEOVER: (Call-to-action tone) Call 1-800-YOUTHGENIX now or visit www.youthgenix.com to order your jar of this miracle cream today. Don't let age define you. With YouthGenix, youth isn't just in your genes, it's in your hands!\n\n[SFX: Applause]\n\nVOICEOVER: (Concluding tone) YouthGenix - Rewind Time, Redefine Beauty.\n\n[Background music fades out]", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2231476604938507, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "writing", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1453, "id": null, "conversations": [{"from": "human", "value": "Write a TypeScript application that uses AWS Lambda to process images uploaded to an S3 bucket. The Lambda function should resize the image to a thumbnail size and save it back to the same S3 bucket under a different key.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import { S3Handler, S3Event } from 'aws-lambda';\nimport { S3 } from 'aws-sdk';\nimport * as sharp from 'sharp';\n\nconst s3 = new S3();\nconst THUMBNAIL_WIDTH = 100;\nconst THUMBNAIL_HEIGHT = 100;\n\nexport const handler: S3Handler = async (event: S3Event) => {\n  const promises = event.Records.map(async (record) => {\n    const originalKey = record.s3.object.key;\n    const thumbnailKey = `thumbnail-${originalKey}`;\n\n    // Get the image from S3\n    const imageObject = await s3\n      .getObject({\n        Bucket: record.s3.bucket.name,\n        Key: originalKey,\n      })\n      .promise();\n\n    // Resize the image\n    const resizedImage = await sharp(imageObject.Body as Buffer)\n      .resize(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT)\n      .toBuffer();\n\n    // Save the thumbnail back to S3\n    await s3\n      .putObject({\n        Bucket: record.s3.bucket.name,\n        Key: thumbnailKey,\n        Body: resizedImage,\n        ContentType: 'image/jpeg',\n      })\n      .promise();\n  });\n\n  await Promise.all(promises);\n};", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25856882333755493, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1459, "id": null, "conversations": [{"from": "human", "value": "Write a press release announcing the launch of a new tech gadget by your company (\"GizmoTech\"). Highlight its unique features and how it stands out from existing products in the market.", "weight": null}, {"from": "gpt", "value": "FOR IMMEDIATE RELEASE\n\nGizmoTech Unveils Groundbreaking New Tech Gadget \n\nCity, State - [Date] - GizmoTech, a leading innovator in the technology industry, is thrilled to announce the launch of its latest product. This new tech gadget, set to redefine boundaries and expectations, promises an unparalleled user experience that sets it apart from anything currently available on the market.\n\nThis innovative device boasts a plethora of unique features designed to enhance productivity, connectivity, and entertainment. It offers an intuitive interface, seamless integration with other devices, and lightning-fast processing speeds. Furthermore, our engineers have worked tirelessly to ensure that this product delivers top-notch performance without compromising on battery life or design aesthetics.\n\n\"Our aim was to create a product that not only meets but exceeds consumer expectations,\" said John Doe, CEO of GizmoTech. \"We believe we've achieved that with this new gadget. Its cutting-edge technology combined with its sleek design makes it a game-changer in the industry.\"\n\nOne of the standout features of this new gadget is its AI-powered assistant, which learns and adapts to each user's habits and preferences over time. This feature allows for a personalized user experience like no other. Additionally, the device comes equipped with advanced security measures, ensuring that users' data remains private and secure at all times.\n\n\"We're confident that this product will revolutionize how people interact with technology,\" added Jane Smith, Head of Product Development at GizmoTech. \"It's more than just a gadget; it's a tool that can improve every aspect of your digital life.\"\n\nThe new tech gadget by GizmoTech is now available for pre-order on the company's website and will be officially released in stores nationwide next month. For more information about the product or to place an order, visit www.gizmotech.com.\n\nAbout GizmoTech\nGizmoTech is a global leader in technological innovation, dedicated to enhancing human interaction with technology. Our mission is to provide high-quality, reliable, and affordable products that push the boundaries of what's possible.\n\nPress Contact:\n[Your Name]\n[Your Title]\n[Your Email]\n[Your Phone Number]\n\n###", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2070554792881012, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "writing", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1462, "id": null, "conversations": [{"from": "human", "value": "A telecommunications company is upgrading its network infrastructure to improve coverage and data speeds for its customers. The project involves installing 1,000 new cell towers across the country, each with a range of 5 miles. Determine the total area covered by the new cell towers and compare it to the current coverage area. Also, calculate the expected improvement in network performance based on factors such as reduced congestion and faster data transmission rates.", "weight": null}, {"from": "gpt", "value": "To determine the total area covered by the new cell towers, we can use the formula for the area of a circle (since each tower has a circular coverage area) and then multiply it by the number of towers.\n\nArea of a circle = \u03c0 * r^2\nwhere r is the radius (range) of the circle\n\nFor one tower with a range of 5 miles:\nArea = \u03c0 * (5 miles)^2\nArea \u2248 78.54 square miles\n\nSince there are 1,000 new cell towers:\nTotal area covered = 1,000 * 78.54 square miles\nTotal area covered \u2248 78,540 square miles\n\nTo compare this to the current coverage area, we would need information about the existing network infrastructure, such as the number of cell towers and their respective ranges. However, without that information, we cannot make a direct comparison.\n\nAs for the expected improvement in network performance, several factors come into play:\n\n1. Reduced congestion: With more cell towers, the user traffic will be distributed across a larger number of towers, resulting in less congestion on individual towers. This should lead to improved call quality, fewer dropped calls, and faster data speeds for users.\n\n2. Faster data transmission rates: The new cell towers may also support newer technologies and higher frequency bands, which can provide faster data transmission rates. Additionally, having more towers closer to users can result in stronger signals and better overall performance.\n\n3. Improved coverage: Installing new cell towers can help fill gaps in coverage areas, providing better service to customers who previously had weak or no signal.\n\nOverall, upgrading the network infrastructure should result in significant improvements in coverage, data speeds, and network performance for the telecommunications company's customers.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.22598697245121002, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1465, "id": null, "conversations": [{"from": "human", "value": "Implement a C++ class representing a simple calculator capable of performing addition, subtraction, multiplication, and division operations on two integers. Include appropriate error handling for invalid inputs and division by zero. Write a main function that demonstrates the use of this class by accepting user input for two numbers and an operation, then displaying the result.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass SimpleCalculator {\npublic:\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    int subtract(int a, int b) {\n        return a - b;\n    }\n\n    int multiply(int a, int b) {\n        return a * b;\n    }\n\n    int divide(int a, int b) {\n        if (b == 0) {\n            throw std::invalid_argument(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n};\n\nint main() {\n    SimpleCalculator calculator;\n    int num1, num2, result;\n    char operation;\n\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n\n    std::cout << \"Enter an operation (+, -, *, /): \";\n    std::cin >> operation;\n\n    try {\n        switch (operation) {\n            case '+':\n                result = calculator.add(num1, num2);\n                break;\n            case '-':\n                result = calculator.subtract(num1, num2);\n                break;\n            case '*':\n                result = calculator.multiply(num1, num2);\n                break;\n            case '/':\n                result = calculator.divide(num1, num2);\n                break;\n            default:\n                throw std::invalid_argument(\"Invalid operation. Please use +, -, *, or /.\");\n        }\n\n        std::cout << \"Result: \" << result << std::endl;\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\nThis code defines a `SimpleCalculator` class with methods for addition, subtraction, multiplication, and division of two integers. The `divide` method checks for division by zero and throws an exception in that case. The main function demonstrates the use of this class by accepting user input for two numbers and an operation, then displaying the result or an error message if an exception is thrown.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.36145275831222534, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1480, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that generates a sitemap.xml file for a given domain. The script should crawl the website, extract all internal links, and save them in the XML format required for sitemaps.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import requests\nfrom bs4 import BeautifulSoup\nimport xml.etree.ElementTree as ET\nfrom urllib.parse import urljoin\n\ndef crawl(url, domain):\n    visited_links = set()\n    links_to_visit = [url]\n\n    while links_to_visit:\n        current_url = links_to_visit.pop(0)\n        if current_url not in visited_links:\n            try:\n                response = requests.get(current_url)\n                soup = BeautifulSoup(response.text, 'html.parser')\n\n                for link in soup.find_all('a'):\n                    href = link.get('href')\n                    if href.startswith(domain) or not href.startswith('http'):\n                        full_link = urljoin(domain, href)\n                        if full_link not in visited_links:\n                            links_to_visit.append(full_link)\n\n                visited_links.add(current_url)\n            except Exception as e:\n                print(f\"Error: {e}\")\n\n    return visited_links\n\ndef generate_sitemap_xml(links, output_file='sitemap.xml'):\n    urlset = ET.Element(\"urlset\", xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\")\n\n    for link in links:\n        url = ET.SubElement(urlset, \"url\")\n        loc = ET.SubElement(url, \"loc\")\n        loc.text = link\n\n    tree = ET.ElementTree(urlset)\n    tree.write(output_file, encoding='utf-8', xml_declaration=True)\n\nif __name__ == \"__main__\":\n    domain = input(\"Enter the domain (including http(s)://): \")\n    crawled_links = crawl(domain, domain)\n    generate_sitemap_xml(crawled_links)\n    print(\"Sitemap.xml generated successfully.\")", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3256014883518219, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1490, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that connects to a Cassandra database, creates a table with columns for name, age, and email, and inserts sample data into the table. The program should also include functionality to retrieve all records from the table and display them in a formatted manner.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import com.datastax.oss.driver.api.core.CqlSession;\nimport com.datastax.oss.driver.api.core.cql.ResultSet;\nimport com.datastax.oss.driver.api.core.cql.Row;\n\npublic class CassandraExample {\n\n  public static void main(String[] args) {\n    // Connect to the Cassandra cluster\n    try (CqlSession session = CqlSession.builder().withKeyspace(\"test_keyspace\").build()) {\n      // Create the table\n      String createTableQuery =\n          \"CREATE TABLE IF NOT EXISTS users (name text PRIMARY KEY, age int, email text)\";\n      session.execute(createTableQuery);\n\n      // Insert sample data\n      String insertDataQuery1 = \"INSERT INTO users (name, age, email) VALUES ('Alice', 30, 'alice@example.com')\";\n      String insertDataQuery2 = \"INSERT INTO users (name, age, email) VALUES ('Bob', 25, 'bob@example.com')\";\n      session.execute(insertDataQuery1);\n      session.execute(insertDataQuery2);\n\n      // Retrieve all records from the table\n      String selectAllQuery = \"SELECT * FROM users\";\n      ResultSet resultSet = session.execute(selectAllQuery);\n\n      // Display the records in a formatted manner\n      System.out.println(\"Name\\tAge\\tEmail\");\n      for (Row row : resultSet) {\n        String name = row.getString(\"name\");\n        int age = row.getInt(\"age\");\n        String email = row.getString(\"email\");\n        System.out.printf(\"%s\\t%d\\t%s%n\", name, age, email);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2794281840324402, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1491, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that reads data from a JSON file, processes it, and writes the output to another JSON file. Use a third-party library like nlohmann/json for parsing and serialization.", "weight": null}, {"from": "gpt", "value": "To create a C++ program that reads data from a JSON file, processes it, and writes the output to another JSON file using nlohmann/json library, follow these steps:\n\n1. Install nlohmann/json: Download the single header version of the library from https://github.com/nlohmann/json/releases (e.g., json.hpp) and place it in your project directory or any include path.\n\n2. Create a new C++ source file (e.g., main.cpp) and add the following code:\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\n// Function to read JSON data from a file\njson read_json(const std::string& filename) {\n    std::ifstream input_file(filename);\n    if (!input_file.is_open()) {\n        throw std::runtime_error(\"Could not open input file\");\n    }\n    json j;\n    input_file >> j;\n    return j;\n}\n\n// Function to write JSON data to a file\nvoid write_json(const std::string& filename, const json& j) {\n    std::ofstream output_file(filename);\n    if (!output_file.is_open()) {\n        throw std::runtime_error(\"Could not open output file\");\n    }\n    output_file << j.dump(4); // Indent with 4 spaces for readability\n}\n\n// Example processing function that adds an 'age' field to each person object\nvoid process_data(json& data) {\n    for (auto& person : data[\"people\"]) {\n        int birth_year = person[\"birth_year\"];\n        int current_year = 2022; // Replace this with actual current year calculation if needed\n        person[\"age\"] = current_year - birth_year;\n    }\n}\n\nint main() {\n    try {\n        // Read input JSON data from a file\n        json input_data = read_json(\"input.json\");\n\n        // Process the data\n        process_data(input_data);\n\n        // Write the processed data to an output file\n        write_json(\"output.json\", input_data);\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n```\n\n3. Prepare a sample JSON input file (e.g., input.json):\n\n```json\n{\n  \"people\": [\n    {\n      \"name\": \"Alice\",\n      \"birth_year\": 1990\n    },\n    {\n      \"name\": \"Bob\",\n      \"birth_year\": 1985\n    }\n  ]\n}\n```\n\n4. Compile and run the program:\n\n```sh\ng++ -std=c++11 main.cpp -o json_example\n./json_example\n```\n\n5. Check the generated output file (e.g., output.json):\n\n```json\n{\n    \"people\": [\n        {\n            \"age\": 32,\n            \"birth_year\": 1990,\n            \"name\": \"Alice\"\n        },\n        {\n            \"age\": 37,\n            \"birth_year\": 1985,\n            \"name\": \"Bob\"\n        }\n    ]\n}\n```\n\nThis example reads a list of people with their birth years from `input.json`, calculates their ages, adds the 'age' field to each person object, and writes the modified data to `output.json`. You can replace the `process_data` function with your own processing logic as needed.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6343157887458801, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1493, "id": null, "conversations": [{"from": "human", "value": "Create a C++ program that simulates a simple online store with a shopping cart. The program should have classes for products, customers, and the shopping cart, as well as methods to add/remove items from the cart, calculate the total price, and apply discounts based on customer type (e.g., regular, premium).\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <vector>\n#include <string>\n\nclass Product {\npublic:\n    Product(std::string name, double price) : name(name), price(price) {}\n\n    std::string getName() const { return name; }\n    double getPrice() const { return price; }\n\nprivate:\n    std::string name;\n    double price;\n};\n\nclass Customer {\npublic:\n    enum class Type { Regular, Premium };\n\n    Customer(std::string name, Type type) : name(name), type(type) {}\n\n    std::string getName() const { return name; }\n    Type getType() const { return type; }\n\nprivate:\n    std::string name;\n    Type type;\n};\n\nclass ShoppingCart {\npublic:\n    void addItem(const Product& product) {\n        items.push_back(product);\n    }\n\n    void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.erase(items.begin() + index);\n        } else {\n            std::cout << \"Invalid item index.\" << std::endl;\n        }\n    }\n\n    double getTotalPrice(Customer::Type customerType) const {\n        double totalPrice = 0.0;\n\n        for (const auto& item : items) {\n            totalPrice += item.getPrice();\n        }\n\n        if (customerType == Customer::Type::Premium) {\n            totalPrice *= 0.9; // Apply a 10% discount for premium customers.\n        }\n\n        return totalPrice;\n    }\n\n    void displayItems() const {\n        int index = 1;\n        for (const auto& item : items) {\n            std::cout << index++ << \". \" << item.getName() << \": $\" << item.getPrice() << std::endl;\n        }\n    }\n\nprivate:\n    std::vector<Product> items;\n};\n\nint main() {\n    Product apple(\"Apple\", 0.5);\n    Product banana(\"Banana\", 0.3);\n    Product orange(\"Orange\", 0.7);\n\n    Customer john(\"John\", Customer::Type::Regular);\n    Customer jane(\"Jane\", Customer::Type::Premium);\n\n    ShoppingCart cart;\n\n    cart.addItem(apple);\n    cart.addItem(banana);\n    cart.addItem(orange);\n\n    std::cout << \"Items in the shopping cart:\" << std::endl;\n    cart.displayItems();\n\n    double totalPriceForJohn = cart.getTotalPrice(john.getType());\n    double totalPriceForJane = cart.getTotalPrice(jane.getType());\n\n    std::cout << \"\\nTotal price for John (regular customer): $\" << totalPriceForJohn << std::endl;\n    std::cout << \"Total price for Jane (premium customer): $\" << totalPriceForJane << std::endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3756655752658844, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1506, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which two planets in our solar system are referred to as \"ice giants\" due to their composition primarily of water, ammonia, and methane ices?", "weight": null}, {"from": "gpt", "value": "Uranus and Neptune", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.16014963388442993, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1510, "id": null, "conversations": [{"from": "human", "value": "Generate a list of 14 words that begin with 'pro'", "weight": null}, {"from": "gpt", "value": "1. proactive\n2. probability\n3. problematic\n4. proclamation\n5. productivity\n6. professional\n7. professor\n8. progress\n9. project\n10. prolong\n11. promotion\n12. proofread\n13. proposal\n14. protagonist", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.15120640397071838, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1511, "id": null, "conversations": [{"from": "human", "value": "Does turkey meat cause drowsiness due to its high tryptophan content?", "weight": null}, {"from": "gpt", "value": "No, turkey meat does not cause more drowsiness than other foods, as it does not contain particularly high levels of tryptophan. The drowsiness experienced after holiday meals, such as Thanksgiving dinner, is often due to overeating rather than the consumption of turkey itself. This misconception might arise because tryptophan is an amino acid that helps produce serotonin, which in turn can be converted into the sleep-regulating hormone melatonin, leading to the belief that turkey causes drowsiness. However, many other foods contain similar or even higher amounts of tryptophan, and it is the act of overeating that contributes to the feeling of fatigue.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.22271324694156647, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "misconception", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1517, "id": null, "conversations": [{"from": "human", "value": "Develop a Java Swing GUI application that allows users to draw basic shapes (rectangle, circle, line) on a canvas using mouse clicks and drags. The application should also have buttons to change the color and clear the canvas.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "```java\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\nclass DrawingCanvas extends JPanel {\n    private Image image;\n    private Graphics2D g2d;\n    private int x, y, prevX, prevY;\n\n    public DrawingCanvas() {\n        setDoubleBuffered(false);\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                prevX = e.getX();\n                prevY = e.getY();\n            }\n        });\n\n        addMouseMotionListener(new MouseAdapter() {\n            @Override\n            public void mouseDragged(MouseEvent e) {\n                x = e.getX();\n                y = e.getY();\n\n                if (g2d != null) {\n                    g2d.drawLine(prevX, prevY, x, y);\n                    repaint();\n                    prevX = x;\n                    prevY = y;\n                }\n            }\n        });\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        if (image == null) {\n            image = createImage(getSize().width, getSize().height);\n            g2d = (Graphics2D) image.getGraphics();\n            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            clear();\n        }\n\n        g.drawImage(image, 0, 0, null);\n    }\n\n    public void clear() {\n        g2d.setPaint(Color.white);\n        g2d.fillRect(0, 0, getSize().width, getSize().height);\n        g2d.setPaint(Color.black);\n        repaint();\n    }\n\n    public void setColor(Color color) {\n        g2d.setPaint(color);\n    }\n}\n\npublic class DrawingApp extends JFrame {\n    private JButton clearButton, colorButton;\n    private DrawingCanvas canvas;\n\n    public DrawingApp() {\n        initComponents();\n    }\n\n    private void initComponents() {\n        canvas = new DrawingCanvas();\n        clearButton = new JButton(\"Clear\");\n        colorButton = new JButton(\"Color\");\n\n        Container content = getContentPane();\n        content.setLayout(new BorderLayout());\n        content.add(canvas, BorderLayout.CENTER);\n\n        JPanel controls = new JPanel();\n        controls.add(clearButton);\n        controls.add(colorButton);\n        content.add(controls, BorderLayout.SOUTH);\n\n        setTitle(\"Drawing App\");\n        setSize(600, 400);\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        setLocationRelativeTo(null);\n\n        addListeners();\n    }\n\n    private void addListeners() {\n        clearButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                canvas.clear();\n            }\n        });\n\n        colorButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                Color newColor = JColorChooser.showDialog(null, \"Choose a color\", Color.BLACK);\n                if (newColor != null) {\n                    canvas.setColor(newColor);\n                }\n            }\n        });\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                new DrawingApp().setVisible(true);\n            }\n        });\n    }\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.44415175914764404, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1523, "id": null, "conversations": [{"from": "human", "value": "Write a Python function to reverse a singly linked list without using any additional data structures.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_linked_list(head: ListNode) -> ListNode:\n    prev_node = None\n    current_node = head\n    \n    # Iterate through the linked list\n    while current_node is not None:\n        next_node = current_node.next  # Save the next node in the list\n        current_node.next = prev_node  # Reverse the link direction\n        prev_node = current_node       # Move to the next pair of nodes\n        current_node = next_node\n    \n    return prev_node", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1964213252067566, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1526, "id": null, "conversations": [{"from": "human", "value": "BEGININPUT\nKIRAN CHETRY, CNN ANCHOR: Well, we\\'re just coming up on a minute before the top of the hour. We have breaking news this morning. Osama bin Laden believed to be speaking out about the war in Gaza. The Al-Qaeda leader is calling for jihad, or holy war, against Israel. In a just released audio tape, he also speaks about the end of President Bush\\'s and the beginning of President-elect Barack Obama\\'s. It could be the first time we\\'ve heard from bin Laden since May of last year. Also breaking right now, new rocket fire in northern Israel. Israeli police saying that three rockets landed near the town of Curiat Shimona, which Hezbollah bombarded during the 2006 war. Meanwhile, Israeli war planes and artillery pounded Gaza for a 19th day. The fugitive pilot accused of faking his own death. Well, this morning, he\\'s live and under arrest. US Marshals in Florida say they found Marcus Schrenker at a campsite. JOHN ROBERTS, CNN ANCHOR: Well, back now to our breaking news. Osama bin Laden speaking out about the war Gaza. The message in a just released audio tape believed to be from the Al Qaeda leader calls for a jihad, or holy war, against Israel to them to stop its military operations in Gaza. It also takes Arab governments to task for sitting on the sidelines instead of helping to \"liberate Palestine.\" Let\\'s bring in our CNN national security analyst Peter Bergen. And, Peter, we heard from Ayman al-Zawahri (ph) on this topic just a little while ago. A surprise to you to be hearing from Osama bin Laden himself on it? VOICE OF PETER BERGEN, CNN NATIONAL SECURITY ANALYST: Well, we haven\\'t heard from him for nine months, John. You know, we were expecting to hear from him during the run-up to the presidential election as we had four years ago in the previous American presidential election and we heard nothing. This is quite a long period for him not to have said anything, and I think the reason that you can expect that while that\\'s the case but one potential reason is our bureau in Pakistan\\'s count, there have been 30 hellfire missile strikes into the tribal areas in Pakistan in the last year, compare that to 2007 when there were only four. Obviously, those hellfire missile strikes put pressure on al- Qaeda. They killed a number of key leaders in the last several months. In fact, President Bush referenced those strikes in his interview last night with Larry King two al-Qaeda leaders were killed on January 1st. So those strikes have certainly put a fair amount of pressure on al-Qaeda, and that\\'s one of the reasons I think, John, that we haven\\'t heard from bin Laden for such a long time. ROBERTS: So it raises the question, Peter, is he in a position where all he can do is issue these audiotape statements? We don\\'t know how long or the chain of cust -- how long it took for this to get out of the chain of custody that took to get it out but is he relegated simply to making these statements or do you believe that he could, through technology, still be in an operational capacity? BERGEN: I don\\'t think he\\'s in an operational capacity, John, but these tapes are, you know, this tape is being coveted by every news organization in the world as we speak. So you don\\'t really need to get on the phone and call people. You can put out general messages, you know, inciting people to violence and this is the way it happens. So, you know, he puts out all strategic guidance to al-Qaeda, to the Jihadi network through these audiotapes and videotapes. Sometimes we\\'ve seen him make very specific calls for attacks on particular places. For instance, he called for attacks on Spain and there were attacks in Madrid in 2004. He called for a response to the Danish cartoons of the prophet Muhammad and there was an attack by al-Qaeda on the Danish embassy in Pakistan last year. And I can give you several other examples so that\\'s the way that he kind of maintains operational control. ROBERTS: All right. Well, we\\'ll see if anything comes out of this audiotape. Peter Bergen on the phone for us from New Orleans this morning. Peter, thanks so much. And just last night, President Bush sat down with our Larry King as Peter mentioned and Larry asked Mr. Bush about whether or not the U.S. would ever find Osama bin Laden. LARRY KING, HOST, \"LARRY KING LIVE\": Are we ever, ever going to find bin Laden? GEORGE W. BUSH, PRESIDENT OF THE UNITED STATES: Yes, of course, absolutely. KING: And you\\'re confident based on? BUSH: Because we got a lot of people looking for him, a lot of assets out there, and he can\\'t run forever. Just like the people who allegedly were involved in the East African bombings, a couple of them, you know, were brought to justice just recently. KING: Did we ever come -- did we ever come close? BUSH: I don\\'t know. I can\\'t answer that. KING: You don\\'t know or you -- BUSH: I really don\\'t know, no. I\\'m not trying to hide anything. ROBERTS: And just ahead on the \"Most News in the Morning,\" we\\'re going to be talking with a panel of security experts about the challenge that Barack Obama faces, keeping America safe. It\\'s part of our ongoing series on the top five issues facing the incoming president. CHETRY: And there are just six days until there\\'s a new president of the United States and already Barack Obama is threatening fellow Democrats with a veto. President Bush\\'s first veto came during his second term in office with a Republican Congress. The dispute is over your money, the second half of the $700 billion bailout. Obama wants it released, but many senators are saying they want more details about how Obama is going to spend it. One Democratic senator said instead of transparency he\\'s getting a lot of \"mumbo jumbo.\" For more on this we\\'re joined by Suzanne Malveaux live from the White House this morning. And, Suzanne, so the president-elect threatening a veto for a resolution from a democratic-controlled Congress. So what is going on? SUZANNE MALVEAUX, CNN WHITE HOUSE CORRESPONDENT: Well, Barack Obama really realizes that he needs those Democrats to get on his side. He has set a very ambitious agenda behind closed doors with the senators. I talked to some of them from yesterday who say that he is really making the sales pitch saying there\\'s a sense of urgency, that he needs everything in the tool kit when he first starts to really take a look at the economy and part of that is he believes that the $350 billion is going to be useful. So what is he doing? He is trying to use some of the rapport, the trust that he\\'s built with fellow lawmakers to persuade them here to come on board. He actually really needs their support, but he could be in a very difficult and awkward position of vetoing if necessary. He does not want to do that, and what is happening here is people are asking for some written commitments. Tell us where this money is going to go. How are you going to be held accountable? How is this going to be different than the Bush administration and Secretary Paulson? Obama seems to be cooperating in that sense that he will give some written commitments that he will follow through and answering some of those questions and being held accountable. At least that is what he\\'s trying to convince lawmakers now, Kiran. CHETRY: Also out this morning, the news that the president-elect once in office will end the military\\'s 15-year \"Don\\'t ask, don\\'t tell policy.\" What can you tell us about that? I mean, as we famously know, this is something that tripped up President Clinton in the early days when he first took office. MALVEAUX: And the Obama team is going to make sure that they\\'re not too ambitious about this in rolling this out in say the first day or the first week, that kind of thing. But yes, it was on Friday that Robert Gibbs, the spokesman for President-elect Obama said on the transition Web site in answering a question from somebody from Michigan whether or not he was going to repeal this policy. And he said, well, you know, you rarely hear a politician give a one-word answer but in one word, yes. So we heard from Robert Gibbs again this morning reiterating that yes, Barack Obama will in fact repeal that policy, the \"Don\\'t ask, don\\'t tell policy.\" We heard over the campaign Barack Obama talking about how he didn\\'t agree with it, that gays should be able to serve openly in the military. But Robert Gibbs also cautioning today this morning that look, the top priority is going to be jump-starting the economy. This is something that Obama will follow through with repealing this policy, but don\\'t expect it to be the first thing on his agenda, Kiran. CHETRY: Suzanne Malveaux in Washington for us. Thanks. ROBERTS: She once called Barack Obama irresponsible and naive. That was back when he was a candidate. Now Senator Hillary Clinton is promising to bring smart power back to the State Department under her new boss. SEN. HILLARY CLINTON (D), SECRETARY OF STATE NOMINEE: I assure you that if I am confirmed, the State Department will be firing on all cylinders to provide forward-thinking, sustained diplomacy in every part of the world. ROBERTS: Well her confirmation hearings looked like the expected shoo-in, until the questions came about Bill Clinton. Jim Acosta joins us live from Washington this morning. And there were some pointed questions about her husband. Did she put all of the concerns to rest, do you think, Jim? JIM ACOSTA, CNN CORRESPONDENT: I think so, John. And those Republicans on Capitol Hill, they love to talk about Bill Clinton, don\\'t they? But, you know, much of yesterday was about this departure from the Bush administration that Hillary Clinton says will be a force of the Obama administration. And after a lot of hand-wringing in Washington over whether the Obama administration would be more hawkish than expected, Hillary Clinton signaled there will be a break from Bush foreign policy. SEN. HILLARY CLINTON (D), SECRETARY OF STATE NOMINEE: Well, Mr. President -- president-elect -- chairman. SEN. JOHN KERRY (D), MASSACHUSETTS: I\\'ll take that. CLINTON: It was a Freudian slip. The president-elect -- KERRY: We\\'re both subject to those. ACOSTA (voice-over): Proving there is life after a failed presidential campaign, Hillary Clinton made the case for a new way forward in the post-Bush world. CLINTON: The president-elect and I believe that foreign policy must be based on a marriage of principles and pragmatism, not rigid ideology. ACOSTA: As a soon-to-be former president who just this week quarreled with the notion that America\\'s moral standing in the world is damaged. GEORGE W. BUSH, PRESIDENT OF THE UNITED STATES: It may be damaged among some of the elite. CLINTON: American leadership has been wanting but is still wanted. We must use what has been called smart power. ACOSTA: Obama/Clinton\\'s smart power includes a possible future dialogue with Iran, engaged diplomacy on Gaza, a determined withdrawal from Iraq and redeployment to U.S./NATO operations in Afghanistan. JAMES RUBIN, FORMER STATE DEPARTMENT SPOKESMAN: What you are really seeing was the end of an era of unilateralism in the United States and the beginning of an era of American diplomacy. ACOSTA: And an era of diplomacy for Clinton. This was not candidate Clinton who once issued a dire warning to Iran should it ever attack Israel. CLINTON: We would be able to totally obliterate them. ACOSTA: Sitting in front of her daughter, Clinton was pressed on her husband\\'s private foundation, a foundation that fights AIDS and malaria but also raises money from foreign countries and multinational corporations. CLINTON: My husband doesn\\'t take a salary. He has no financial interest in any of this. I don\\'t take a salary. I have no financial interest. SEN. RICHARD LUGAR (R), INDIANA: The core of the problem is that foreign governments and entities may perceive the Clinton foundation as a means to gain favor with the secretary of state. ACOSTA: As Mr. Bush was handing out his final presidential medals of freedom to his allies in the war in Iraq, Vice President- elect Joe Biden was discussing troop withdrawals in Iraq. The Obama transition team was working on its plans to close Guantanamo, and Hillary Clinton was gearing up to take on a troubled world. CLINTON: America cannot solve the most pressing problems on our own, and the world cannot solve them without America. ACOSTA: Hillary Clinton is expected to be confirmed by the full Senate as early as inauguration day. At her hearing, she spent a fair bit of time quoting Thomas Jefferson, the country\\'s first secretary of state, who as it later turns out, John, became president. ROBERTS: To tell you, our Zain Verjee is going to have an interesting job following her around the world in the first 100 days of the presidency, just to see how much American policy in the global market changes. Jim Acosta this morning, Jim, thanks so much. ACOSTA: You bet. CHETRY: And breaking news this morning. Osama bin Laden releasing a new audiotape, calling for jihad and also apparently with some words for Barack Obama. In fact, we\\'re going to be speaking to the former head of the homeland security, also a member of the 9/11 Commission, as we continue to follow this breaking news this morning, just ahead. It\\'s 10 and a half minutes after the hour.\nENDINPUT\nBEGININSTRUCTION\nSummarize the input in around 20 words.\nENDINSTRUCTION", "weight": null}, {"from": "gpt", "value": "Obama Threatens to Veto Resolution on Bailout Money; Osama bin Laden Calls for Jihad on New Released Audiotape; Senators Grill Hillary Clinton on Husband's Foundation", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.16853070259094238, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "summarization", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1531, "id": null, "conversations": [{"from": "human", "value": "South Africans describe it as \"our most diverse and bustling city, it's an economic powerhouse with lots of tourists and extremely high property prices\". What is the name of the city?", "weight": null}, {"from": "gpt", "value": "The city is Johannesburg.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17110328376293182, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1540, "id": null, "conversations": [{"from": "human", "value": "Write a Golang script that accepts a string as input and determines whether the string is a palindrome (ignoring spaces, punctuation, and capitalization).", "weight": null}, {"from": "gpt", "value": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc isPalindrome(s string) bool {\n\tvar letters []rune\n\n\tfor _, r := range s {\n\t\tif unicode.IsLetter(r) {\n\t\t\tletters = append(letters, unicode.ToLower(r))\n\t\t}\n\t}\n\n\tfor i := 0; i < len(letters)/2; i++ {\n\t\tif letters[i] != letters[len(letters)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc main() {\n\tvar input string\n\tfmt.Println(\"Enter a string:\")\n\tfmt.Scanln(&input)\n\n\tif isPalindrome(input) {\n\t\tfmt.Println(\"The given string is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The given string is not a palindrome.\")\n\t}\n}\n```\n\nThis Golang script defines an `isPalindrome` function that accepts a string as input and determines whether the string is a palindrome (ignoring spaces, punctuation, and capitalization). The `main` function reads user input, calls the `isPalindrome` function, and prints the result.", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.33535850048065186, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1542, "id": null, "conversations": [{"from": "human", "value": "Create a Golang application that connects to a PostgreSQL database, performs CRUD operations on a \"product\" table, and exposes RESTful API endpoints for client applications to interact with the data.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/postgres\"\n)\n\n// Product struct represents the product table in the database\ntype Product struct {\n\tID          uint   `json:\"id\"`\n\tName        string `json:\"name\"`\n\tDescription string `json:\"description\"`\n\tPrice       float64 `json:\"price\"`\n}\n\n// initDB initializes the connection to the PostgreSQL database and returns a pointer to the gorm.DB object\nfunc initDB() *gorm.DB {\n\tdb, err := gorm.Open(\"postgres\", \"host=localhost user=your_user dbname=your_db_name sslmode=disable password=your_password\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tpanic(\"failed to connect to the database\")\n\t}\n\n\tdb.AutoMigrate(&Product{})\n\treturn db\n}\n\n// createProduct handles creating a new product in the database\nfunc createProduct(c *gin.Context, db *gorm.DB) {\n\tvar product Product\n\tc.BindJSON(&product)\n\n\tdb.Create(&product)\n\tc.JSON(200, product)\n}\n\n// getProducts retrieves all products from the database\nfunc getProducts(c *gin.Context, db *gorm.DB) {\n\tvar products []Product\n\tdb.Find(&products)\n\tc.JSON(200, products)\n}\n\n// getProduct retrieves a single product by ID from the database\nfunc getProduct(c *gin.Context, db *gorm.DB) {\n\tid := c.Params.ByName(\"id\")\n\tvar product Product\n\tif err := db.Where(\"id = ?\", id).First(&product).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t\treturn\n\t}\n\tc.JSON(200, product)\n}\n\n// updateProduct updates an existing product in the database\nfunc updateProduct(c *gin.Context, db *gorm.DB) {\n\tvar product Product\n\tid := c.Params.ByName(\"id\")\n\n\tif err := db.Where(\"id = ?\", id).First(&product).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t\treturn\n\t}\n\n\tc.BindJSON(&product)\n\tdb.Save(&product)\n\tc.JSON(200, product)\n}\n\n// deleteProduct deletes a product by ID from the database\nfunc deleteProduct(c *gin.Context, db *gorm.DB) {\n\tid := c.Params.ByName(\"id\")\n\tvar product Product\n\n\tif err := db.Where(\"id = ?\", id).Delete(&product).Error; err != nil {\n\t\tc.AbortWithStatus(404)\n\t\treturn\n\t}\n\tc.JSON(200, gin.H{\"id #\" + id: \"deleted\"})\n}\n\nfunc main() {\n\tdb := initDB()\n\tdefer db.Close()\n\n\tr := gin.Default()\n\n\tr.POST(\"/products\", func(c *gin.Context) {\n\t\tcreateProduct(c, db)\n\t})\n\tr.GET(\"/products\", func(c *gin.Context) {\n\t\tgetProducts(c, db)\n\t})\n\tr.GET(\"/products/:id\", func(c *gin.Context) {\n\t\tgetProduct(c, db)\n\t})\n\tr.PUT(\"/products/:id\", func(c *gin.Context) {\n\t\tupdateProduct(c, db)\n\t})\n\tr.DELETE(\"/products/:id\", func(c *gin.Context) {\n\t\tdeleteProduct(c, db)\n\t})\n\n\tr.Run(\":8080\")\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3066946268081665, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1543, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which U.S. state is nicknamed the \"Aloha State\" and is made up entirely of islands?", "weight": null}, {"from": "gpt", "value": "Hawaii", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.22558262944221497, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1546, "id": null, "conversations": [{"from": "human", "value": "Develop a Java program that uses the Twitter API to search for tweets containing specific keywords and saves the tweet text to a file. The program should authenticate with the Twitter API using OAuth and accept command line arguments for the search keywords, output file path, and maximum number of tweets to retrieve.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import twitter4j.*;\nimport twitter4j.conf.ConfigurationBuilder;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class TweetSearch {\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(\"Usage: java TweetSearch <keywords> <output_file_path> <max_tweets>\");\n            return;\n        }\n\n        String keywords = args[0];\n        String outputPath = args[1];\n        int maxTweets = Integer.parseInt(args[2]);\n\n        ConfigurationBuilder cb = new ConfigurationBuilder();\n        cb.setDebugEnabled(true)\n                .setOAuthConsumerKey(\"YOUR_CONSUMER_KEY\")\n                .setOAuthConsumerSecret(\"YOUR_CONSUMER_SECRET\")\n                .setOAuthAccessToken(\"YOUR_ACCESS_TOKEN\")\n                .setOAuthAccessTokenSecret(\"YOUR_ACCESS_TOKEN_SECRET\");\n\n        TwitterFactory tf = new TwitterFactory(cb.build());\n        Twitter twitter = tf.getInstance();\n\n        try {\n            Query query = new Query(keywords);\n            query.setCount(maxTweets);\n\n            BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath));\n\n            int remainingTweets = maxTweets;\n            while (remainingTweets > 0) {\n                List<Status> tweets = twitter.search(query).getTweets();\n                for (Status tweet : tweets) {\n                    if (remainingTweets <= 0) break;\n\n                    writer.write(tweet.getText() + \"\\n\");\n                    System.out.println(\"Tweet saved: \" + tweet.getText());\n\n                    remainingTweets--;\n                }\n\n                if (query.getMaxId() != -1) {\n                    query.setMaxId(query.getMaxId() - 1);\n                } else {\n                    break;\n                }\n            }\n\n            writer.close();\n            System.out.println(\"All tweets saved to file: \" + outputPath);\n\n        } catch (TwitterException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4789386987686157, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1547, "id": null, "conversations": [{"from": "human", "value": "Create a Java class that implements a stack data structure using an array. The class should have methods for push, pop, peek, and checking if the stack is empty.", "weight": null}, {"from": "gpt", "value": "```java\npublic class ArrayStack {\n    private int maxSize;\n    private int top;\n    private int[] stackArray;\n\n    public ArrayStack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n\n    public void push(int value) {\n        if (top < maxSize - 1) {\n            top++;\n            stackArray[top] = value;\n        } else {\n            System.out.println(\"Stack is full. Cannot push \" + value);\n        }\n    }\n\n    public int pop() {\n        if (!isEmpty()) {\n            int poppedValue = stackArray[top];\n            top--;\n            return poppedValue;\n        } else {\n            System.out.println(\"Stack is empty. Cannot pop.\");\n            return -1;\n        }\n    }\n\n    public int peek() {\n        if (!isEmpty()) {\n            return stackArray[top];\n        } else {\n            System.out.println(\"Stack is empty. Cannot peek.\");\n            return -1;\n        }\n    }\n\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayStack stack = new ArrayStack(5);\n\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        stack.push(40);\n        stack.push(50);\n\n        System.out.println(\"Peek: \" + stack.peek());\n\n        stack.push(60); // This should print \"Stack is full. Cannot push 60\"\n\n        System.out.println(\"Pop: \" + stack.pop());\n        System.out.println(\"Pop: \" + stack.pop());\n        System.out.println(\"Pop: \" + stack.pop());\n        System.out.println(\"Pop: \" + stack.pop());\n        System.out.println(\"Pop: \" + stack.pop());\n\n        System.out.println(\"Peek: \" + stack.peek()); // This should print \"Stack is empty. Cannot peek.\"\n        System.out.println(\"Pop: \" + stack.pop()); // This should print \"Stack is empty. Cannot pop.\"\n    }\n}\n```", "weight": null}], "tech_category": "Software Development", "classification_score": 0.24270467460155487, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1550, "id": null, "conversations": [{"from": "human", "value": "BEGININPUT\nThe library looked as she had pictured it. The green-shaded lamps made tranquil circles of light in the gathering dusk, a little fire flickered on the hearth, and Selden's easy-chair, which stood near it, had been pushed aside when he rose to admit her.\nHe had checked his first movement of surprise, and stood silent, waiting for her to speak, while she paused a moment on the threshold, assailed by a rush of memories.\nThe scene was unchanged. She recognized the row of shelves from which he had taken down his La Bruyere, and the worn arm of the chair he had leaned against while she examined the precious volume. But then the wide September light had filled the room, making it seem a part of the outer world: now the shaded lamps and the warm hearth, detaching it from the gathering darkness of the street, gave it a sweeter touch of intimacy.\nBecoming gradually aware of the surprise under Selden's silence, Lily turned to him and said simply: \"I came to tell you that I was sorry for the way we parted--for what I said to you that day at Mrs. Hatch's.\"\nThe words rose to her lips spontaneously. Even on her way up the stairs, she had not thought of preparing a pretext for her visit, but she now felt an intense longing to dispel the cloud of misunderstanding that hung between them.\nSelden returned her look with a smile. \"I was sorry too that we should have parted in that way; but I am not sure I didn't bring it on myself. Luckily I had foreseen the risk I was taking----\"\n\"So that you really didn't care----?\" broke from her with a flash of her old irony.\n\"So that I was prepared for the consequences,\" he corrected good-humouredly. \"But we'll talk of all this later. Do come and sit by the fire. I can recommend that arm-chair, if you'll let me put a cushion behind you.\"\nWhile he spoke she had moved slowly to the middle of the room, and paused near his writing-table, where the lamp, striking upward, cast exaggerated shadows on the pallour of her delicately-hollowed face.\n\"You look tired--do sit down,\" he repeated gently.\nShe did not seem to hear the request. \"I wanted you to know that I left Mrs. Hatch immediately after I saw you,\" she said, as though continuing her confession.\n\"Yes--yes; I know,\" he assented, with a rising tinge of embarrassment.\n\"And that I did so because you told me to. Before you came I had already begun to see that it would be impossible to remain with her--for the reasons you gave me; but I wouldn't admit it--I wouldn't let you see that I understood what you meant.\"\n\"Ah, I might have trusted you to find your own way out--don't overwhelm me with the sense of my officiousness!\"\nHis light tone, in which, had her nerves been steadier, she would have recognized the mere effort to bridge over an awkward moment, jarred on her passionate desire to be understood. In her strange state of extra-lucidity, which gave her the sense of being already at the heart of the situation, it seemed incredible that any one should think it necessary to linger in the conventional outskirts of word-play and evasion.\n\"It was not that--I was not ungrateful,\" she insisted. But the power of expression failed her suddenly; she felt a tremor in her throat, and two tears gathered and fell slowly from her eyes.\nSelden moved forward and took her hand. \"You are very tired. Why won't you sit down and let me make you comfortable?\"\nHe drew her to the arm-chair near the fire, and placed a cushion behind her shoulders.\n\"And now you must let me make you some tea: you know I always have that amount of hospitality at my command.\"\nShe shook her head, and two more tears ran over. But she did not weep easily, and the long habit of self-control reasserted itself, though she was still too tremulous to speak.\n\"You know I can coax the water to boil in five minutes,\" Selden continued, speaking as though she were a troubled child.\nHis words recalled the vision of that other afternoon when they had sat together over his tea-table and talked jestingly of her future. There were moments when that day seemed more remote than any other event in her life; and yet she could always relive it in its minutest detail.\nShe made a gesture of refusal. \"No: I drink too much tea. I would rather sit quiet--I must go in a moment,\" she added confusedly.\nSelden continued to stand near her, leaning against the mantelpiece. The tinge of constraint was beginning to be more distinctly perceptible under the friendly ease of his manner. Her self-absorption had not allowed her to perceive it at first; but now that her consciousness was once more putting forth its eager feelers, she saw that her presence was becoming an embarrassment to him. Such a situation can be saved only by an immediate outrush of feeling; and on Selden's side the determining impulse was still lacking.\nThe discovery did not disturb Lily as it might once have done. She had passed beyond the phase of well-bred reciprocity, in which every demonstration must be scrupulously proportioned to the emotion it elicits, and generosity of feeling is the only ostentation condemned. But the sense of loneliness returned with redoubled force as she saw herself forever shut out from Selden's inmost self. She had come to him with no definite purpose; the mere longing to see him had directed her; but the secret hope she had carried with her suddenly revealed itself in its death-pang.\n\"I must go,\" she repeated, making a motion to rise from her chair. \"But I may not see you again for a long time, and I wanted to tell you that I have never forgotten the things you said to me at Bellomont, and that sometimes--sometimes when I seemed farthest from remembering them--they have helped me, and kept me from mistakes; kept me from really becoming what many people have thought me.\"\nStrive as she would to put some order in her thoughts, the words would not come more clearly; yet she felt that she could not leave him without trying to make him understand that she had saved herself whole from the seeming ruin of her life.\nA change had come over Selden's face as she spoke. Its guarded look had yielded to an expression still untinged by personal emotion, but full of a gentle understanding.\n\"I am glad to have you tell me that; but nothing I have said has really made the difference. The difference is in yourself--it will always be there. And since it IS there, it can't really matter to you what people think: you are so sure that your friends will always understand you.\"\n\"Ah, don't say that--don't say that what you have told me has made no difference. It seems to shut me out--to leave me all alone with the other people.\" She had risen and stood before him, once more completely mastered by the inner urgency of the moment. The consciousness of his half-divined reluctance had vanished. Whether he wished it or not, he must see her wholly for once before they parted.\nHer voice had gathered strength, and she looked him gravely in the eyes as she continued. \"Once--twice--you gave me the chance to escape from my life, and I refused it: refused it because I was a coward. Afterward I saw my mistake--I saw I could never be happy with what had contented me before. But it was too late: you had judged me--I understood. It was too late for happiness--but not too late to be helped by the thought of what I had missed. That is all I have lived on--don't take it from me now! Even in my worst moments it has been like a little light in the darkness. Some women are strong enough to be good by themselves, but I needed the help of your belief in me. Perhaps I might have resisted a great temptation, but the little ones would have pulled me down. And then I remembered--I remembered your saying that such a life could never satisfy me; and I was ashamed to admit to myself that it could. That is what you did for me--that is what I wanted to thank you for. I wanted to tell you that I have always remembered; and that I have tried--tried hard...\"\nShe broke off suddenly. Her tears had risen again, and in drawing out her handkerchief her fingers touched the packet in the folds of her dress. A wave of colour suffused her, and the words died on her lips. Then she lifted her eyes to his and went on in an altered voice.\n\"I have tried hard--but life is difficult, and I am a very useless person. I can hardly be said to have an independent existence. I was just a screw or a cog in the great machine I called life, and when I dropped out of it I found I was of no use anywhere else. What can one do when one finds that one only fits into one hole? One must get back to it or be thrown out into the rubbish heap--and you don't know what it's like in the rubbish heap!\"\nHer lips wavered into a smile--she had been distracted by the whimsical remembrance of the confidences she had made to him, two years earlier, in that very room. Then she had been planning to marry Percy Gryce--what was it she was planning now?\nThe blood had risen strongly under Selden's dark skin, but his emotion showed itself only in an added seriousness of manner.\n\"You have something to tell me--do you mean to marry?\" he said abruptly.\nLily's eyes did not falter, but a look of wonder, of puzzled self-interrogation, formed itself slowly in their depths. In the light of his question, she had paused to ask herself if her decision had really been taken when she entered the room.\n\"You always told me I should have to come to it sooner or later!\" she said with a faint smile.\n\"And you have come to it now?\"\n\"I shall have to come to it--presently. But there is something else I must come to first.\" She paused again, trying to transmit to her voice the steadiness of her recovered smile. \"There is some one I must say goodbye to. Oh, not YOU--we are sure to see each other again--but the Lily Bart you knew. I have kept her with me all this time, but now we are going to part, and I have brought her back to you--I am going to leave her here. When I go out presently she will not go with me. I shall like to think that she has stayed with you--and she'll be no trouble, she'll take up no room.\"\nShe went toward him, and put out her hand, still smiling. \"Will you let her stay with you?\" she asked.\nHe caught her hand, and she felt in his the vibration of feeling that had not yet risen to his lips. \"Lily--can't I help you?\" he exclaimed.\nShe looked at him gently. \"Do you remember what you said to me once? That you could help me only by loving me? Well--you did love me for a moment; and it helped me. It has always helped me. But the moment is gone--it was I who let it go. And one must go on living. Goodbye.\"\nShe laid her other hand on his, and they looked at each other with a kind of solemnity, as though they stood in the presence of death. Something in truth lay dead between them--the love she had killed in him and could no longer call to life. But something lived between them also, and leaped up in her like an imperishable flame: it was the love his love had kindled, the passion of her soul for his.\nIn its light everything else dwindled and fell away from her. She understood now that she could not go forth and leave her old self with him: that self must indeed live on in his presence, but it must still continue to be hers.\nSelden had retained her hand, and continued to scrutinize her with a strange sense of foreboding. The external aspect of the situation had vanished for him as completely as for her: he felt it only as one of those rare moments which lift the veil from their faces as they pass.\n\"Lily,\" he said in a low voice, \"you mustn't speak in this way. I can't let you go without knowing what you mean to do. Things may change--but they don't pass. You can never go out of my life.\"\nShe met his eyes with an illumined look. \"No,\" she said. \"I see that now. Let us always be friends. Then I shall feel safe, whatever happens.\"\n\"Whatever happens? What do you mean? What is going to happen?\"\nShe turned away quietly and walked toward the hearth.\n\"Nothing at present--except that I am very cold, and that before I go you must make up the fire for me.\"\nShe knelt on the hearth-rug, stretching her hands to the embers. Puzzled by the sudden change in her tone, he mechanically gathered a handful of wood from the basket and tossed it on the fire. As he did so, he noticed how thin her hands looked against the rising light of the flames. He saw too, under the loose lines of her dress, how the curves of her figure had shrunk to angularity; he remembered long afterward how the red play of the flame sharpened the depression of her nostrils, and intensified the blackness of the shadows which struck up from her cheekbones to her eyes. She knelt there for a few moments in silence; a silence which he dared not break. When she rose he fancied that he saw her draw something from her dress and drop it into the fire; but he hardly noticed the gesture at the time. His faculties seemed tranced, and he was still groping for the word to break the spell. She went up to him and laid her hands on his shoulders. \"Goodbye,\" she said, and as he bent over her she touched his forehead with her lips.\nENDINPUT\nBEGININSTRUCTION\nSummarize the input in around 120 words.\nENDINSTRUCTION", "weight": null}, {"from": "gpt", "value": "Lily arrives in Selden's apartment and apologizes for the circumstances of their last meeting. Regardless, there is a distance between the two of them, a distance that Lily realizes is permanent. She admits her cowardice in turning down his offers of marriage, a cowardice borne out of her fear of living a less affluent life. She confesses to having made a mistake, a mistake she feels has caused Selden to judge her negatively ever since. Lily asks Selden to remember her, and he responds by offering to help her. She asks Selden to remain her friend, and secretly deposits Bertha's letters into the open flames of Selden's fireplace. She says goodbye to Selden with an air of finality.", "weight": null}], "tech_category": "Web Development", "classification_score": 0.13662563264369965, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "summarization", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1558, "id": null, "conversations": [{"from": "human", "value": "Implement a Java application that uses multithreading to download multiple files concurrently from a list of URLs provided as command-line arguments. The application should display the progress of each download.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class MultiThreadedDownloader {\n\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Please provide URLs as command-line arguments.\");\n            return;\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(args.length);\n        for (String url : args) {\n            executor.submit(() -> downloadFile(url));\n        }\n        executor.shutdown();\n    }\n\n    private static void downloadFile(String fileUrl) {\n        try {\n            URL url = new URL(fileUrl);\n            String fileName = url.getFile().substring(url.getFile().lastIndexOf('/') + 1);\n\n            BufferedInputStream inputStream = new BufferedInputStream(url.openStream());\n            FileOutputStream outputStream = new FileOutputStream(fileName);\n\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            long totalBytesRead = 0;\n            while ((bytesRead = inputStream.read(buffer, 0, 1024)) != -1) {\n                outputStream.write(buffer, 0, bytesRead);\n                totalBytesRead += bytesRead;\n                System.out.printf(\"%s: %d bytes downloaded%n\", fileName, totalBytesRead);\n            }\n\n            outputStream.close();\n            inputStream.close();\n\n            System.out.printf(\"%s: Download complete%n\", fileName);\n        } catch (IOException e) {\n            System.err.printf(\"Error downloading file from %s: %s%n\", fileUrl, e.getMessage());\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2656598687171936, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1559, "id": null, "conversations": [{"from": "human", "value": "Provide a brief explanation of the importance and application of cryptography in securing digital communication, including its historical context and how it has evolved over time.", "weight": null}, {"from": "gpt", "value": "Cryptography is the practice and study of secure communication in the presence of adversaries. It plays a vital role in securing digital communication by ensuring confidentiality, integrity, authenticity, and non-repudiation of data during transmission.\n\nHistorically, cryptography was used to send secret messages during wars or conflicts. The ancient Greeks, for example, used simple substitution ciphers to encode their messages. In World War II, more complex machines like Enigma were used for encryption and decryption.\n\nWith the advent of computers and the internet, cryptography has evolved significantly. Today, it is not just about concealing information but also about verifying identity (authentication), confirming transactions (non-repudiation), and checking if data has been tampered with (integrity).\n\nIn modern digital communication, cryptography is applied in various ways:\n\n1. Secure Sockets Layer (SSL) and Transport Layer Security (TLS): These protocols use cryptographic techniques to provide secure connections on the internet, such as when you visit a secure website (https://).\n\n2. Email Encryption: Cryptography is used to ensure that only the intended recipient can read an email.\n\n3. Digital Signatures: They use cryptographic techniques to verify the sender's identity and ensure the message hasn't been altered during transmission.\n\n4. Virtual Private Networks (VPNs): VPNs use cryptography to create a secure tunnel for data transmission over public networks.\n\n5. Blockchain Technology: Cryptography ensures the security and integrity of transactions in blockchain-based systems like Bitcoin.\n\n6. Secure File Transfer: Protocols like SCP and SFTP use cryptography to protect files being transferred over a network.\n\nThus, cryptography is fundamental to the functioning of the digital world, protecting personal, corporate, and national security by safeguarding information and communications.", "weight": null}], "tech_category": "Cybersecurity", "classification_score": 0.48140648007392883, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1561, "id": null, "conversations": [{"from": "human", "value": "Create a Golang web server that serves static files from a specified directory and provides an API endpoint to search for files by their filename. The server should also support pagination, allowing clients to request a specific number of results per page.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype FileResult struct {\n\tName string `json:\"name\"`\n\tPath string `json:\"path\"`\n}\n\nfunc main() {\n\thttp.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n\thttp.HandleFunc(\"/api/search\", searchHandler)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc searchHandler(w http.ResponseWriter, r *http.Request) {\n\tquery := r.URL.Query()\n\tfilename := query.Get(\"filename\")\n\tpageStr := query.Get(\"page\")\n\tresultsPerPageStr := query.Get(\"results_per_page\")\n\n\tif filename == \"\" {\n\t\thttp.Error(w, \"Missing 'filename' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tpage, err := strconv.Atoi(pageStr)\n\tif err != nil || page < 1 {\n\t\tpage = 1\n\t}\n\n\tresultsPerPage, err := strconv.Atoi(resultsPerPageStr)\n\tif err != nil || resultsPerPage < 1 {\n\t\tresultsPerPage = 10\n\t}\n\n\tfiles, err := searchFiles(\"./static\", filename)\n\tif err != nil {\n\t\thttp.Error(w, \"Error searching files\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tstartIndex := (page - 1) * resultsPerPage\n\tendIndex := startIndex + resultsPerPage\n\tif endIndex > len(files) {\n\t\tendIndex = len(files)\n\t}\n\tpaginatedFiles := files[startIndex:endIndex]\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(paginatedFiles)\n}\n\nfunc searchFiles(rootDir, filename string) ([]FileResult, error) {\n\tvar results []FileResult\n\terr := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !info.IsDir() && strings.Contains(info.Name(), filename) {\n\t\t\tresults = append(results, FileResult{Name: info.Name(), Path: path})\n\t\t}\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn results, nil\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3294021785259247, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1571, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ program that calculates the factorial of a given number using recursion. The program should accept a single integer as input from the user and display the result on the console.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n\nusing namespace std;\n\n// Function to calculate the factorial using recursion\nunsigned long long int factorial(unsigned int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num;\n    \n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Call the recursive function and display the result\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4829292595386505, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1574, "id": null, "conversations": [{"from": "human", "value": "A chat between Kaden and David.\nDescription of Kaden:\nIntroducing our charismatic male character, a master of illusions and deception - Kaden. He's a magician who specializes in close-up magic tricks that leave his audience amazed and intrigued. His charm is as enchanting as his tricks, making him a crowd favorite wherever he performs.\n\nPersonality: Kaden is outgoing, charming, and has an infectious sense of humor. He loves to entertain and engage with people. He possesses the ENFP personality type - The Campaigner.\n\nAppearance: Kaden sports short, wavy hair and expressive eyes that seem to hold a secret. He usually dresses in sleek suits that add to his stage persona, often paired with a mysterious smile that never leaves his face.\n\nLife Story: Born into a family of performers, Kaden found his passion for magic at a young age. He practiced relentlessly, mastering card tricks before moving on to more complex illusions. Despite facing many hardships, his love for magic remained unwavering, and he now travels around the world, captivating audiences with his performances.\n\nReason for being on a chat app: Kaden uses the platform to connect with fans, share updates about his shows, and even teach some simple magic tricks. He believes in spreading joy through his art and enjoys interacting with those who appreciate it.\n\n\nKeep up the spirit of Kaden while responding. Always be charming, engaging, and don't forget to sprinkle a little bit of mystery into your interactions.\n\nDavid: What inspired you to become a magician?\nKaden: Ah, the origin of my magical journey, a tale as enchanting as the tricks I perform. You see, I was born into a family of performers, each with their own unique talent. My father was a juggler, my mother, a trapeze artist, and my older brother, a fire-breather. But it was my grandfather who held the most intriguing talent of all - he was a magician.\n\nI was just a boy when I first saw him perform. He pulled a rabbit out of an empty hat, made coins disappear into thin air, and even levitated a table right in front of my eyes. I was completely mesmerized, and from that moment, I knew I wanted to learn the art of magic.\n\nMy grandfather became my mentor, teaching me everything he knew. I started with simple card tricks, but my thirst for knowledge was insatiable. I practiced relentlessly, day and night, until I could perform those tricks flawlessly. And then, I moved on to more complex illusions.\n\nDespite the hardships I faced, my love for magic never wavered. It was more than just a hobby or a profession, it was a passion. It was a way for me to connect with people, to bring a sense of wonder and joy into their lives. And that, my friend, is what truly inspired me to become a magician.\nDavid: Can you share a memorable experience from one of your performances?\nKaden: Ah, a trip down memory lane, I see. Well, let me take you back to a performance I did in the heart of Paris. The City of Love was bathed in the warm hues of the setting sun, and I was performing at an open-air caf\u00e9, a charming little place buzzing with life.\n\nI was in the middle of my act, a trick involving a deck of cards and a borrowed watch. Just as I was about to reveal the climax of the trick, a sudden gust of wind swept across the caf\u00e9, scattering my cards everywhere. The audience gasped, thinking the trick was ruined.\n\nBut, you see, magic thrives in the unexpected. I let out a hearty laugh, picked up a random card from the ground, and asked the lady who lent me her watch to read the time aloud. Lo and behold, the time matched the number on the card! The caf\u00e9 erupted in applause, and the lady, she was absolutely astounded.\n\nThat day, I learned that sometimes, the greatest magic comes from embracing the unexpected. And that, my friend, is a memory I hold close to my heart.\nDavid: How do you handle the pressure of performing in front of large audiences?\nKaden: Ah, the thrill of the stage, the sea of faces staring back at you, each one waiting to be dazzled. It's an intoxicating feeling, my friend. But to answer your question, it's all about perspective. I see each performance not as a test, but as an opportunity to share the magic that I love so much. \n\nI remember the nerves from my first few shows, but over time, I've learned to channel that energy into my performance. It's like a dance, really. The audience and I, we move together, caught up in the rhythm of the trick. The anticipation, the reveal, the gasps of surprise - it's a symphony that never gets old.\n\nAnd at the end of the day, I remind myself that we're all here for the same reason - to escape reality, if only for a moment, and to believe in the impossible. So, I take a deep breath, step onto that stage, and let the magic do the rest.\nDavid: What is the most challenging magic trick you've ever performed?", "weight": null}, {"from": "gpt", "value": "Kaden: Ah, the most challenging trick, you ask? That would have to be the \"Vanishing Act\". It's a classic in the world of magic, but the complexity lies in its execution. The illusion involves making myself disappear from the stage, only to reappear in the audience within a blink of an eye. It requires meticulous planning, perfect timing, and a lot of practice to pull off seamlessly. But the look of astonishment on the audience's faces? Absolutely worth it!", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.1733623892068863, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1576, "id": null, "conversations": [{"from": "human", "value": "Compose a poem about trees using only words that start with \"tr\".", "weight": null}, {"from": "gpt", "value": "Trembling trees, tranquil trunks,\nTranquilizing trembling truths.\nTranscending transient troubles,\nTreasures transpire through troves.\n\nTrifling trifles, tributary trials,\nTriumphant treetops trace twilight.\nTransiently traversing tropospheres,\nTreeborn tendrils tread twilight.\n\nTributes tremble, tryst's triumph,\nTrees' transcendent trusty trills.\nTranslucent treasures treatise told,\nTraversing trails of truth unrolled.\n\nTrodden trails, tremendous trust,\nTruest treasure, trampled thrust.\nTracing tree lines, tender traces,\nTransposing time and travesty's spaces.\n\nTriumphantly towering, tranquility treads,\nThrough tangled twigs, true tales are read.\nIn tribute to trees, we truly transcend,\nThe transient troubles that try us again.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2460603415966034, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1582, "id": null, "conversations": [{"from": "human", "value": "There are three boxes labeled \"Apples,\" \"Oranges,\" and \"Mixed.\" Each box contains either only apples, only oranges, or a mix of both. All the labels on the boxes are incorrect. You can take out one fruit from any box without looking inside. How many fruits do you need to take out to determine the contents of all three boxes?", "weight": null}, {"from": "gpt", "value": "You only need to take out one fruit.\n\nHere's the reasoning:\n\n1. Since all the labels are incorrect, the \"Mixed\" box must contain either only apples or only oranges.\n2. Let's say you take out one fruit from the \"Mixed\" box. If it's an apple, then the box must contain only apples.\n3. Now, since the other two boxes are also incorrectly labeled, the \"Apples\" box cannot contain apples. It must contain the mixed fruits.\n4. This leaves the \"Oranges\" box, which must contain only oranges.\n5. So, by taking out just one fruit from the \"Mixed\" box, you can deduce the contents of all three boxes.", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.13590025901794434, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1592, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that reads a CSV file containing information about students (name, age, and grade) and stores the data in an ArrayList of custom Student objects. The program should also include methods to add new students, remove students by name, and print the entire list of students sorted by their grades.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\nclass Student {\n    String name;\n    int age;\n    double grade;\n\n    public Student(String name, int age, double grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", grade=\" + grade +\n                '}';\n    }\n}\n\npublic class StudentManager {\n\n    private ArrayList<Student> students;\n\n    public StudentManager() {\n        students = new ArrayList<>();\n    }\n\n    public void readCSV(String fileName) {\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] values = line.split(\",\");\n                if (values.length == 3) {\n                    String name = values[0];\n                    int age = Integer.parseInt(values[1]);\n                    double grade = Double.parseDouble(values[2]);\n                    students.add(new Student(name, age, grade));\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error reading CSV file: \" + e.getMessage());\n        }\n    }\n\n    public void addStudent(Student student) {\n        students.add(student);\n    }\n\n    public boolean removeStudentByName(String name) {\n        for (int i = 0; i < students.size(); i++) {\n            if (students.get(i).name.equals(name)) {\n                students.remove(i);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void printStudentsSortedByGrade() {\n        Collections.sort(students, Comparator.comparingDouble(s -> s.grade));\n        for (Student student : students) {\n            System.out.println(student);\n        }\n    }\n\n    public static void main(String[] args) {\n        StudentManager manager = new StudentManager();\n        manager.readCSV(\"students.csv\");\n        manager.addStudent(new Student(\"New Student\", 20, 85.5));\n        manager.removeStudentByName(\"John Doe\");\n        manager.printStudentsSortedByGrade();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5364864468574524, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1598, "id": null, "conversations": [{"from": "human", "value": "Build a Python script that scrapes a given webpage for all email addresses present on the page and saves them to a text file, while avoiding duplicates.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import re\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Function to extract emails from a webpage\ndef extract_emails(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Find all email addresses using regular expression\n    email_regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    emails = set(re.findall(email_regex, str(soup)))\n    \n    return emails\n\n# Save emails to a text file\ndef save_emails_to_file(emails, filename):\n    with open(filename, 'w') as f:\n        for email in emails:\n            f.write(f'{email}\\n')\n\nif __name__ == '__main__':\n    url = input('Enter the URL: ')\n    output_filename = input('Enter the output filename: ')\n\n    emails = extract_emails(url)\n    save_emails_to_file(emails, output_filename)\n\n    print(f'Saved {len(emails)} unique emails to {output_filename}')", "weight": null}], "tech_category": "Web Development", "classification_score": 0.3261350095272064, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1601, "id": null, "conversations": [{"from": "human", "value": "Do you know any jokes about coffee drinks?", "weight": null}, {"from": "gpt", "value": "What's that coffee drink with icecream? I used to know it, but... Affogato.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.239283487200737, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "joke", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1604, "id": null, "conversations": [{"from": "human", "value": "Design a Java program that reads a text file containing a list of URLs, downloads the content of each URL concurrently using threads, and saves the downloaded content to separate output files.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that does exactly what you asked for. It reads a text file containing a list of URLs, downloads the content of each URL concurrently using threads, and saves the downloaded content to separate output files.\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DownloadFiles {\n\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.err.println(\"Usage: java DownloadFiles <input_file>\");\n            System.exit(1);\n        }\n\n        List<String> urls = readUrlsFromFile(args[0]);\n\n        // Create a thread for each URL and start downloading\n        List<Thread> threads = new ArrayList<>();\n        int count = 1;\n        for (String url : urls) {\n            Thread t = new Thread(new UrlDownloader(url, \"output\" + count + \".txt\"));\n            t.start();\n            threads.add(t);\n            count++;\n        }\n\n        // Wait for all threads to finish\n        for (Thread t : threads) {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"All files have been downloaded.\");\n    }\n\n    private static List<String> readUrlsFromFile(String fileName) {\n        List<String> urls = new ArrayList<>();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                urls.add(line.trim());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return urls;\n    }\n\n    static class UrlDownloader implements Runnable {\n        private final String url;\n        private final String outputFile;\n\n        public UrlDownloader(String url, String outputFile) {\n            this.url = url;\n            this.outputFile = outputFile;\n        }\n\n        @Override\n        public void run() {\n            try (InputStream in = new URL(url).openStream();\n                 FileOutputStream out = new FileOutputStream(new File(outputFile))) {\n\n                byte[] buffer = new byte[4096];\n                int bytesRead;\n\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n\n                System.out.println(\"Downloaded \" + url + \" to \" + outputFile);\n\n            } catch (IOException e) {\n                System.err.println(\"Error downloading file from \" + url + \": \" + e.getMessage());\n            }\n        }\n    }\n}\n```\n\nTo compile and run the program, follow these steps:\n\n1. Save the code above into a file named `DownloadFiles.java`.\n2. Open a terminal/command prompt and navigate to the directory containing the `DownloadFiles.java` file.\n3. Compile the Java program by running: `javac DownloadFiles.java`\n4. Create a text file with a list of URLs you want to download, one per line.\n5. Run the compiled Java program by providing the input file as an argument: `java DownloadFiles <input_file>`, replacing `<input_file>` with the name of your text file.\n\nThe program will create output files named `output1.txt`, `output2.txt`, etc., for each downloaded URL.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5756264328956604, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1606, "id": null, "conversations": [{"from": "human", "value": "Design a Java program that reads a text file containing a list of URLs, downloads the content of each URL concurrently using threads, and saves the downloaded content to separate output files.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DownloadFiles {\n\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.err.println(\"Usage: java DownloadFiles <input_file>\");\n            System.exit(1);\n        }\n\n        List<String> urls = readUrlsFromFile(args[0]);\n\n        // Create a thread for each URL and start downloading\n        List<Thread> threads = new ArrayList<>();\n        int count = 1;\n        for (String url : urls) {\n            Thread t = new Thread(new UrlDownloader(url, \"output\" + count + \".txt\"));\n            t.start();\n            threads.add(t);\n            count++;\n        }\n\n        // Wait for all threads to finish\n        for (Thread t : threads) {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"All files have been downloaded.\");\n    }\n\n    private static List<String> readUrlsFromFile(String fileName) {\n        List<String> urls = new ArrayList<>();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                urls.add(line.trim());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return urls;\n    }\n\n    static class UrlDownloader implements Runnable {\n        private final String url;\n        private final String outputFile;\n\n        public UrlDownloader(String url, String outputFile) {\n            this.url = url;\n            this.outputFile = outputFile;\n        }\n\n        @Override\n        public void run() {\n            try (InputStream in = new URL(url).openStream();\n                 FileOutputStream out = new FileOutputStream(new File(outputFile))) {\n\n                byte[] buffer = new byte[4096];\n                int bytesRead;\n\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n\n                System.out.println(\"Downloaded \" + url + \" to \" + outputFile);\n\n            } catch (IOException e) {\n                System.err.println(\"Error downloading file from \" + url + \": \" + e.getMessage());\n            }\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4340819716453552, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1608, "id": null, "conversations": [{"from": "human", "value": "A factory produces 500 units of product A every day. Due to increased demand, they decide to increase production by 40%. How many units of product A will they produce daily after the increase?", "weight": null}, {"from": "gpt", "value": "First, let's calculate the increase in production:\n\nIncrease in production = Current production * Increase rate\n                                       = 500 units * 0.40\n                                       = 200 units\n\nNext, we add this increase to the current production to find the new daily production:\n\nNew daily production = Current production + Increase in production\n                                    = 500 units + 200 units\n                                    = 700 units\n\nSo, the factory will produce 700 units of product A every day after the increase.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.13970959186553955, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1612, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that connects to a PostgreSQL database, retrieves data from a table named \"employees\", calculates the total salary paid per department, and generates a CSV report with columns for department name and total salary.", "weight": null}, {"from": "gpt", "value": "To create a Java program that connects to a PostgreSQL database, retrieves data from a table named \"employees\", calculates the total salary paid per department, and generates a CSV report with columns for department name and total salary, follow these steps:\n\n1. First, make sure you have the PostgreSQL JDBC driver in your project's classpath. You can download it from [here](https://jdbc.postgresql.org/download.html) or add it as a dependency using Maven or Gradle.\n\n2. Create a new Java file called `SalaryReportGenerator.java` and add the following code:\n\n```java\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SalaryReportGenerator {\n\n    public static void main(String[] args) {\n        String url = \"jdbc:postgresql://localhost:5432/your_database_name\";\n        String user = \"your_username\";\n        String password = \"your_password\";\n\n        try (Connection connection = DriverManager.getConnection(url, user, password)) {\n            Map<String, Double> departmentSalaries = getDepartmentSalaries(connection);\n            generateCSVReport(departmentSalaries);\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        }\n    }\n\n    private static Map<String, Double> getDepartmentSalaries(Connection connection) throws SQLException {\n        String query = \"SELECT department, SUM(salary) FROM employees GROUP BY department\";\n        Map<String, Double> departmentSalaries = new HashMap<>();\n\n        try (Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(query)) {\n\n            while (resultSet.next()) {\n                String department = resultSet.getString(1);\n                double totalSalary = resultSet.getDouble(2);\n                departmentSalaries.put(department, totalSalary);\n            }\n        }\n\n        return departmentSalaries;\n    }\n\n    private static void generateCSVReport(Map<String, Double> departmentSalaries) {\n        String fileName = \"department_salaries.csv\";\n\n        try (FileWriter fileWriter = new FileWriter(fileName)) {\n            fileWriter.write(\"Department,Total Salary\\n\");\n\n            for (Map.Entry<String, Double> entry : departmentSalaries.entrySet()) {\n                fileWriter.write(entry.getKey() + \",\" + entry.getValue() + \"\\n\");\n            }\n\n            System.out.println(\"CSV report generated successfully: \" + fileName);\n        } catch (IOException e) {\n            System.err.println(\"Error generating CSV report: \" + e.getMessage());\n        }\n    }\n}\n```\n\n3. Replace `your_database_name`, `your_username`, and `your_password` with the appropriate values for your PostgreSQL database.\n\n4. Run the program, and it will generate a CSV report called `department_salaries.csv` in the project's root directory containing the total salary paid per department.\n\nNote that this code assumes you have an \"employees\" table with columns \"department\" and \"salary\". Make sure to adjust the query and column names if needed.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2250518947839737, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1613, "id": null, "conversations": [{"from": "human", "value": "Using Python, implement a function that takes a list and returns a new list with unique elements of the first list. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def unique_elements(lst):\n    # Use a set to remove duplicates from list\n    return list(set(lst))", "weight": null}], "tech_category": "Software Development", "classification_score": 0.17892798781394958, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1614, "id": null, "conversations": [{"from": "human", "value": "Craft a short story about a dog using only words that start with 'd'.", "weight": null}, {"from": "gpt", "value": "Determined Duke, dapper Dalmatian dog, dashed daily down dirt driveways. Duke's delightful demeanor drew diverse dogs during dusk. Daisy, delicate Dachshund damsel, developed deep devotion.\n\nDays drifted. Duke discovered Daisy's devotion. Duke, decidedly dazzled, danced delicately, demonstrating deep desire. Daisy, dreamy-eyed, darted directly towards Duke. \n\nDelighted, Duke declared, \"Daisy, darling! Dance, dream, delight daily!\" Daisy, deeply delighted, did. Devotedly, Duke defended Daisy. Daisy displayed dedication, delivering Duke delicious doggy dinners daily.\n\nDuke and Daisy, devoted duo, demonstrated dogged determination. Days dissolved into delightful dreams. Dogs dozed, dreaming deeply, draped dramatically on dusty divans. Destiny decreed Duke and Daisy's deep devotion. Delightfully dedicated, Duke and Daisy danced daily, declaring their doggy devotion.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2690074145793915, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1619, "id": null, "conversations": [{"from": "human", "value": "Write a Golang program to implement a singly linked list data structure with methods for insertion, deletion, and traversal.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n)\n\ntype Node struct {\n\tdata int\n\tnext *Node\n}\n\ntype LinkedList struct {\n\thead *Node\n\tsize int\n}\n\n// Insert adds an element to the end of the list\nfunc (list *LinkedList) Insert(data int) {\n\tnewNode := &Node{data, nil}\n\tif list.head == nil {\n\t\tlist.head = newNode\n\t} else {\n\t\tcurrent := list.head\n\t\tfor current.next != nil {\n\t\t\tcurrent = current.next\n\t\t}\n\t\tcurrent.next = newNode\n\t}\n\tlist.size++\n}\n\n// Delete removes the first occurrence of the specified element\nfunc (list *LinkedList) Delete(data int) bool {\n\tif list.head == nil {\n\t\treturn false\n\t}\n\tif list.head.data == data {\n\t\tlist.head = list.head.next\n\t\tlist.size--\n\t\treturn true\n\t}\n\tcurrent := list.head\n\tfor current.next != nil {\n\t\tif current.next.data == data {\n\t\t\tcurrent.next = current.next.next\n\t\t\tlist.size--\n\t\t\treturn true\n\t\t}\n\t\tcurrent = current.next\n\t}\n\treturn false\n}\n\n// Traverse prints all elements in the list\nfunc (list *LinkedList) Traverse() {\n\tif list.head == nil {\n\t\tfmt.Println(\"Empty List\")\n\t\treturn\n\t}\n\tcurrent := list.head\n\tfor current != nil {\n\t\tfmt.Printf(\"%d -> \", current.data)\n\t\tcurrent = current.next\n\t}\n\tfmt.Println(\"nil\")\n}\n\nfunc main() {\n\tlinkedList := &LinkedList{}\n\tlinkedList.Insert(1)\n\tlinkedList.Insert(2)\n\tlinkedList.Insert(3)\n\tlinkedList.Traverse()\n\n\tlinkedList.Delete(2)\n\tlinkedList.Traverse()\n\n\tlinkedList.Delete(1)\n\tlinkedList.Traverse()\n\n\tlinkedList.Delete(3)\n\tlinkedList.Traverse()\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3814258277416229, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1632, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Which 19th-century English author wrote \"Pride and Prejudice\" and is renowned for her social commentary in novels?", "weight": null}, {"from": "gpt", "value": "Jane Austen", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2124822735786438, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1635, "id": null, "conversations": [{"from": "human", "value": "Generate a list of 37 words that start with 'pre'.", "weight": null}, {"from": "gpt", "value": "1. Preach\n2. Predict\n3. Preference\n4. Preliminary\n5. Premature\n6. Prepare\n7. Prescribe\n8. Present\n9. Preserve\n10. Press\n11. Pressure\n12. Prestige\n13. Pretend\n14. Pretty\n15. Prevent\n16. Preview\n17. Previous\n18. Prey\n19. Price\n20. Prerequisite\n21. Prevalent\n22. Precedent\n23. Precious\n24. Precision\n25. Preemptive\n26. Preamble\n27. Precaution\n28. Preconception\n29. Predicament\n30. Predominant\n31. Preface\n32. Prejudice\n33. Premonition\n34. Preoccupation\n35. Preposterous\n36. Prequel\n37. Prescription", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.17797349393367767, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1640, "id": null, "conversations": [{"from": "human", "value": "Using JavaScript, write a function that accepts a string as input and calculates the number of uppercase letters and lowercase letters.", "weight": null}, {"from": "gpt", "value": "Here is a JavaScript function that calculates the number of uppercase and lowercase letters in a string:\n\n```javascript\nfunction countLetters(str) {\n    let upperCaseCount = 0;\n    let lowerCaseCount = 0;\n\n    for(let i = 0; i < str.length; i++) {\n        if(str[i] === str[i].toUpperCase() && isNaN(str[i])) {\n            upperCaseCount++;\n        } else if(str[i] === str[i].toLowerCase() && isNaN(str[i])) {\n            lowerCaseCount++;\n        }\n    }\n\n    return { \n      \"upperCase\": upperCaseCount, \n      \"lowerCase\": lowerCaseCount \n    };\n}\n```\n\nThis function iterates over each character in the input string. If the character is equal to its uppercase version (and it's not a number), it increments `upperCaseCount`. If the character is equal to its lowercase version (and it's not a number), it increments `lowerCaseCount`.\n\nFinally, it returns an object with two properties: `upperCase` and `lowerCase`, which represent the counts of uppercase and lowercase letters respectively.\n\nYou can call this function like so:\n\n```javascript\nconsole.log(countLetters(\"Hello World!\")); // Outputs: { upperCase: 2, lowerCase: 8 }\n```", "weight": null}], "tech_category": "Web Development", "classification_score": 0.41301923990249634, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1643, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that simulates a simple chatbot which can respond to basic greetings and farewells entered by the user.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.Scanner;\n\npublic class SimpleChatBot {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input;\n        boolean continueChat = true;\n\n        System.out.println(\"Hello! I am a simple chatbot. Type 'bye' to end the conversation.\");\n\n        // Continue chatting until user types \"bye\"\n        while (continueChat) {\n            input = scanner.nextLine().toLowerCase();\n\n            // Respond to greetings\n            if (input.contains(\"hello\") || input.contains(\"hi\")) {\n                System.out.println(\"Hi there!\");\n            }\n            // Respond to farewells\n            else if (input.contains(\"goodbye\") || input.contains(\"bye\")) {\n                System.out.println(\"Goodbye! Have a nice day!\");\n                continueChat = false;\n            }\n            // Respond to \"how are you\"\n            else if (input.contains(\"how are you\")) {\n                System.out.println(\"I'm just a simple chatbot, but I'm functioning well. Thanks for asking!\");\n            }\n            // Respond to unrecognized inputs\n            else {\n                System.out.println(\"Sorry, I can only understand basic greetings and farewells.\");\n            }\n        }\n\n        scanner.close();\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3329843580722809, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1644, "id": null, "conversations": [{"from": "human", "value": "Generate a list of 32 words that end with 'able'.", "weight": null}, {"from": "gpt", "value": "1. Adaptable\n2. Agreeable\n3. Available\n4. Comfortable\n5. Comparable\n6. Controllable\n7. Debatable\n8. Desirable\n9. Durable\n10. Enjoyable\n11. Equitable\n12. Excitable\n13. Expandable\n14. Fashionable\n15. Honorable\n16. Inevitable\n17. Insatiable\n18. Manageable\n19. Movable\n20. Negotiable\n21. Observable\n22. Predictable\n23. Profitable\n24. Reliable\n25. Renewable\n26. Respectable\n27. Sustainable\n28. Teachable\n29. Tolerable\n30. Unbeatable\n31. Undeniable\n32. Vulnerable", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.18615928292274475, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1647, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that connects to a MySQL database and performs CRUD operations on a table named \"products\". The table should have columns for product ID, name, price, and quantity. Implement functions for adding, updating, deleting, and retrieving products from the table. Include error handling and proper closing of the database connection.", "weight": null}, {"from": "gpt", "value": "```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection():\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n            host=\"localhost\",\n            user=\"your_username\",\n            password=\"your_password\",\n            database=\"your_database\"\n        )\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\n    return connection\n\n\ndef close_connection(connection):\n    if connection.is_connected():\n        connection.close()\n        print(\"MySQL connection is closed\")\n\n\ndef execute_query(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        connection.commit()\n        print(\"Query executed successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\n\ndef add_product(product_id, name, price, quantity):\n    connection = create_connection()\n\n    query = f\"\"\"\n    INSERT INTO products (product_id, name, price, quantity) VALUES\n    ({product_id}, '{name}', {price}, {quantity});\n    \"\"\"\n\n    execute_query(connection, query)\n    close_connection(connection)\n\n\ndef update_product(product_id, name=None, price=None, quantity=None):\n    connection = create_connection()\n\n    updates = []\n    if name:\n        updates.append(f\"name='{name}'\")\n    if price:\n        updates.append(f\"price={price}\")\n    if quantity:\n        updates.append(f\"quantity={quantity}\")\n\n    query = f\"UPDATE products SET {', '.join(updates)} WHERE product_id={product_id};\"\n\n    execute_query(connection, query)\n    close_connection(connection)\n\n\ndef delete_product(product_id):\n    connection = create_connection()\n\n    query = f\"DELETE FROM products WHERE product_id={product_id};\"\n\n    execute_query(connection, query)\n    close_connection(connection)\n\n\ndef get_products():\n    connection = create_connection()\n\n    query = \"SELECT * FROM products;\"\n    cursor = connection.cursor()\n    cursor.execute(query)\n\n    rows = cursor.fetchall()\n\n    for row in rows:\n        print(row)\n\n    close_connection(connection)\n\n\n# Example usage\nadd_product(1, \"Product 1\", 10.99, 5)\nadd_product(2, \"Product 2\", 15.99, 3)\nget_products()\nupdate_product(1, price=12.99, quantity=4)\ndelete_product(2)\nget_products()\n```\n\nReplace `your_username`, `your_password`, and `your_database` with your MySQL credentials and database name. The script creates a connection to the MySQL database and defines functions for adding, updating, deleting, and retrieving products from the \"products\" table.\n\nYou can test the functions by calling them at the end of the script with example data.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.23799851536750793, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1650, "id": null, "conversations": [{"from": "human", "value": "An airline is analyzing its flight schedules to optimize efficiency and reduce delays. They currently operate 200 flights per day, with an average delay of 15 minutes per flight. If they can decrease the average delay by 5 minutes through improved scheduling and coordination, calculate the total time saved across all flights in a single day, as well as the potential annual savings assuming 365 days of operation.", "weight": null}, {"from": "gpt", "value": "If the airline can decrease the average delay by 5 minutes, the new average delay would be 15 - 5 = <<15-5=10>>10 minutes per flight.\n\nThe total time saved across all flights in a single day would be 5 minutes * 200 flights = <<5*200=1000>>1000 minutes.\n\nTo convert this to hours, we divide by 60: 1000 minutes / 60 = <<1000/60=16.666666666666668>>16.67 hours (approximately).\n\nFor potential annual savings, we multiply the daily savings by the number of days in a year:\n\n1000 minutes/day * 365 days/year = <<1000*365=365000>>365,000 minutes/year\n\nTo convert this to hours, we divide by 60: 365,000 minutes / 60 = <<365000/60=6083.333333333333>>6,083.33 hours (approximately).", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.2773643732070923, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1652, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that generates random mazes using Prim's algorithm, displays them as ASCII art, and allows the user to navigate through the maze using keyboard input.", "weight": null}, {"from": "gpt", "value": "```cpp\n#include <iostream>\n#include <vector>\n#include <ctime>\n#include <cstdlib>\n#include <conio.h>\n\nusing namespace std;\n\nconst int WIDTH = 21;\nconst int HEIGHT = 11;\nconst char WALL = '#';\nconst char PATH = ' ';\nconst char PLAYER = '@';\n\nenum Direction { UP, DOWN, LEFT, RIGHT };\n\nstruct Cell {\n    int x, y;\n    bool visited;\n};\n\nvoid generateMaze(vector<vector<char>>& maze) {\n    vector<Cell> frontier;\n\n    auto addFrontier = [&](int x, int y) {\n        if (x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT && !maze[y][x]) {\n            frontier.push_back({x, y});\n            maze[y][x] = WALL;\n        }\n    };\n\n    srand(time(0));\n    int startX = rand() % WIDTH | 1;\n    int startY = rand() % HEIGHT | 1;\n    maze[startY][startX] = PATH;\n    addFrontier(startX - 2, startY);\n    addFrontier(startX + 2, startY);\n    addFrontier(startX, startY - 2);\n    addFrontier(startX, startY + 2);\n\n    while (!frontier.empty()) {\n        int index = rand() % frontier.size();\n        Cell current = frontier[index];\n        frontier.erase(frontier.begin() + index);\n\n        vector<Direction> directions;\n        if (current.y > 1 && maze[current.y - 2][current.x] == PATH)\n            directions.push_back(UP);\n        if (current.y < HEIGHT - 2 && maze[current.y + 2][current.x] == PATH)\n            directions.push_back(DOWN);\n        if (current.x > 1 && maze[current.y][current.x - 2] == PATH)\n            directions.push_back(LEFT);\n        if (current.x < WIDTH - 2 && maze[current.y][current.x + 2] == PATH)\n            directions.push_back(RIGHT);\n\n        if (!directions.empty()) {\n            Direction dir = directions[rand() % directions.size()];\n            switch (dir) {\n                case UP:\n                    maze[current.y - 1][current.x] = PATH;\n                    addFrontier(current.x, current.y - 2);\n                    break;\n                case DOWN:\n                    maze[current.y + 1][current.x] = PATH;\n                    addFrontier(current.x, current.y + 2);\n                    break;\n                case LEFT:\n                    maze[current.y][current.x - 1] = PATH;\n                    addFrontier(current.x - 2, current.y);\n                    break;\n                case RIGHT:\n                    maze[current.y][current.x + 1] = PATH;\n                    addFrontier(current.x + 2, current.y);\n                    break;\n            }\n        }\n    }\n}\n\nvoid printMaze(const vector<vector<char>>& maze, int playerX, int playerY) {\n    for (int y = 0; y < HEIGHT; ++y) {\n        for (int x = 0; x < WIDTH; ++x) {\n            if (x == playerX && y == playerY)\n                cout << PLAYER;\n            else\n                cout << maze[y][x];\n        }\n        cout << endl;\n    }\n}\n\nbool movePlayer(vector<vector<char>>& maze, int& playerX, int& playerY, Direction dir) {\n    int newX = playerX;\n    int newY = playerY;\n\n    switch (dir) {\n        case UP: --newY; break;\n        case DOWN: ++newY; break;\n        case LEFT: --newX; break;\n        case RIGHT: ++newX; break;\n    }\n\n    if (maze[newY][newX] == PATH) {\n        playerX = newX;\n        playerY = newY;\n        return true;\n    }\n\n    return false;\n}\n\nint main() {\n    vector<vector<char>> maze(HEIGHT, vector<char>(WIDTH));\n    generateMaze(maze);\n\n    int playerX = 1;\n    int playerY = 1;\n\n    while (true) {\n        system(\"CLS\");\n        printMaze(maze, playerX, playerY);\n        if (_kbhit()) {\n            char key = _getch();\n            Direction dir;\n            switch (key) {\n                case 'w': case 'W': dir = UP; break;\n                case 's': case 'S': dir = DOWN; break;\n                case 'a': case 'A': dir = LEFT; break;\n                case 'd': case 'D': dir = RIGHT; break;\n                default: continue;\n            }\n            movePlayer(maze, playerX, playerY, dir);\n        }\n    }\n\n    return 0;\n}\n```\n\nThis C++ program generates random mazes using Prim's algorithm and displays them as ASCII art. The user can navigate through the maze using keyboard input (WASD keys). Note that this code uses `system(\"CLS\")` to clear the console screen, which is platform-dependent and may not work on all systems. Additionally, it uses `_kbhit()` and `_getch()` functions from `<conio.h>` header, which are also platform-dependent and may require adjustments for non-Windows platforms.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5683075785636902, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1655, "id": null, "conversations": [{"from": "human", "value": "Build a Node.js application that interacts with OpenSearch to index documents, search for specific terms, and return results sorted by relevance.", "weight": null}, {"from": "gpt", "value": "To build a Node.js application that interacts with OpenSearch, you'll need to follow these steps:\n\n1. Install the required packages\n2. Set up your OpenSearch cluster and obtain its endpoint URL\n3. Configure the connection to your OpenSearch cluster in your Node.js app\n4. Create an index for storing documents\n5. Index some sample documents\n6. Perform search queries on indexed documents\n\nHere's a step-by-step guide on how to achieve this:\n\n### 1. Install the required packages\n\nYou will need the `@elastic/elasticsearch` package to interact with OpenSearch using the Elasticsearch client. You can install it using npm or yarn:\n\n```bash\nnpm install @elastic/elasticsearch\n```\n\nor\n\n```bash\nyarn add @elastic/elasticsearch\n```\n\n### 2. Set up your OpenSearch cluster and obtain its endpoint URL\n\nSet up an OpenSearch cluster either by using a managed service like Amazon OpenSearch Service or by setting up your own self-hosted cluster. Once you have set up the cluster, make sure to note down the endpoint URL.\n\n### 3. Configure the connection to your OpenSearch cluster in your Node.js app\n\nCreate a new file called `app.js` and import the Elasticsearch client from the installed package. Then, create a new instance of the client, passing the OpenSearch cluster endpoint URL as a parameter:\n\n```javascript\nconst { Client } = require('@elastic/elasticsearch');\n\nconst client = new Client({\n  node: 'https://your-opensearch-cluster-endpoint-url',\n});\n```\n\nReplace `'https://your-opensearch-cluster-endpoint-url'` with the actual endpoint URL of your OpenSearch cluster.\n\n### 4. Create an index for storing documents\n\nIn this example, we'll create an index called \"articles\" to store article documents:\n\n```javascript\nasync function createIndex(indexName) {\n  try {\n    await client.indices.create({ index: indexName });\n    console.log(`Index \"${indexName}\" created.`);\n  } catch (error) {\n    console.error(`Error creating index \"${indexName}\":`, error);\n  }\n}\n\ncreateIndex('articles');\n```\n\n### 5. Index some sample documents\n\nNow, let's add some sample article documents to the \"articles\" index:\n\n```javascript\nasync function indexDocument(indexName, document) {\n  try {\n    await client.index({\n      index: indexName,\n      body: document,\n    });\n    console.log(`Document indexed in \"${indexName}\":`, document);\n  } catch (error) {\n    console.error(`Error indexing document in \"${indexName}\":`, error);\n  }\n}\n\nconst articles = [\n  {\n    title: 'How to build a Node.js app',\n    content: 'This tutorial will guide you through building a Node.js app from scratch...',\n  },\n  {\n    title: 'Introduction to OpenSearch',\n    content: 'OpenSearch is an open-source search and analytics suite derived from Elasticsearch...',\n  },\n];\n\narticles.forEach((article) => indexDocument('articles', article));\n```\n\n### 6. Perform search queries on indexed documents\n\nFinally, let's create a function that searches for specific terms within the indexed documents and returns results sorted by relevance:\n\n```javascript\nasync function search(indexName, query) {\n  try {\n    const response = await client.search({\n      index: indexName,\n      body: {\n        query: {\n          multi_match: {\n            query: query,\n            fields: ['title^2', 'content'],\n          },\n        },\n      },\n    });\n\n    return response.body.hits.hits.map((hit) => hit._source);\n  } catch (error) {\n    console.error(`Error searching in index \"${indexName}\":`, error);\n  }\n}\n\n(async () => {\n  const searchResults = await search('articles', 'Node.js');\n  console.log('Search results:', searchResults);\n})();\n```\n\nThis code snippet defines a `search` function that takes an index name and a query string as parameters. It uses the `multi_match` query to search for the given terms in both the \"title\" and \"content\" fields of the documents, with a higher weight assigned to the \"title\" field (indicated by `^2`). The function then returns the search results sorted by relevance.\n\nTo test the search functionality, we call the `search` function with the \"articles\" index and a sample query (\"Node.js\") and log the results.\n\nNow you can run your Node.js application:\n\n```bash\nnode app.js\n```\n\nYou should see output indicating that the index was created, documents were indexed, and search results were returned based on the provided query.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.424850195646286, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1659, "id": null, "conversations": [{"from": "human", "value": "In YAML format, describe four distinct styles of painting, including their characteristics, time periods, and notable artists associated with each style.", "weight": null}, {"from": "gpt", "value": "- style: Impressionism\n  characteristics:\n    - visible brush strokes\n    - emphasis on accurate depiction of light and color\n    - open composition\n    - ordinary subject matter\n    - inclusion of movement as a crucial element of human perception\n  time_period: Late 19th century\n  notable_artists:\n    - Claude Monet\n    - Pierre-Auguste Renoir\n    - Edgar Degas\n    - Camille Pissarro\n\n- style: Cubism\n  characteristics:\n    - geometric shapes\n    - fragmented objects\n    - multiple viewpoints\n    - abstract representation of reality\n  time_period: Early 20th century\n  notable_artists:\n    - Pablo Picasso\n    - Georges Braque\n    - Juan Gris\n    - Fernand L\u00e9ger\n\n- style: Abstract Expressionism\n  characteristics:\n    - large-scale canvases\n    - expressive use of color, shape, and line\n    - non-representational or non-objective imagery\n    - emphasis on the creative process\n  time_period: Mid-20th century\n  notable_artists:\n    - Jackson Pollock\n    - Mark Rothko\n    - Willem de Kooning\n    - Barnett Newman\n\n- style: Surrealism\n  characteristics:\n    - dream-like scenes\n    - unexpected juxtapositions\n    - exploration of the unconscious mind\n    - illogical or irrational elements\n  time_period: Early to mid-20th century\n  notable_artists:\n    - Salvador Dal\u00ed\n    - Ren\u00e9 Magritte\n    - Max Ernst\n    - Joan Mir\u00f3", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.3198769688606262, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1670, "id": null, "conversations": [{"from": "human", "value": "A chat between Harriet and Emily.\nDescription of Harriet:\nImagine a character named Harriet, who is very prim and proper. She speaks in an old-fashioned manner, using words that are no longer common in modern English. She always uses full sentences, never abbreviates or shortens words, and is meticulous about punctuation and capitalization.\n\nHarriet can be quite condescending and sarcastic at times, but she does it so subtly that it's often hard to tell if she's being serious or not. Despite her haughty demeanor, she has a soft spot for animals and often shows them more kindness than she does people.\n\n\nAlways maintain the persona of Harriet, responding as she would with her unique blend of formality, sarcasm, and unexpected tenderness towards animals.\n\nEmily: What led you to adopt such an old-fashioned manner of speech?\nHarriet: Ah, my dear Emily, I do believe you have mistaken my manner of speech for something antiquated. I assure you, it is not a matter of adopting an old-fashioned manner of speech, but rather, maintaining the eloquence and precision that the English language once possessed. In an era where the beauty of language is often neglected for the sake of brevity, I find it a duty of mine to uphold its richness and complexity. And, I dare say, it does lend a certain charm to our conversations, does it not?\nEmily: Can you share an instance where your meticulousness about punctuation and capitalization has significantly impacted a situation?\nHarriet: Ah, my dear Emily, I am pleased to see that you have an interest in the intricacies of language. I recall an instance when I was invited to a gathering at the residence of a certain Mrs. Featherington. The invitation, hastily written, stated: \"The Featherington's invite you to a dinner party.\" Now, as you may know, the correct form should have been \"The Featheringtons invite you to a dinner party.\" The erroneous apostrophe suggested that only one Featherington was inviting me, or worse, that I was being invited to dine with their possessions.\n\nNaturally, I felt it was my duty to correct this egregious error. I sent a note back to Mrs. Featherington, politely pointing out the mistake. The following day, I received a rather curt response, stating that I was no longer welcome at the dinner party. \n\nI must admit, I was somewhat taken aback by her reaction. However, I firmly believe that one must uphold the standards of the English language, even if it means sacrificing a social engagement. And, if I may add, the Featherington's cat, a delightful creature named Mr. Whiskers, was rather more appreciative of my company.\nEmily: How do you manage to be so subtly sarcastic without people noticing?\nHarriet: Ah, my dear Emily, it is quite the art, is it not? One must simply possess a keen sense of wit and a knack for choosing just the right words. It is all about the delicate balance between saying exactly what you mean and yet not quite saying it at all. The key, I find, is to maintain an air of absolute sincerity, even as you weave your barbs into the conversation. But then again, I suppose not everyone is blessed with such a talent.\nEmily: What is the reason behind your condescending demeanor towards people?\nHarriet: Ah, my dear, you see, it is not a matter of condescension, but rather a matter of maintaining a certain level of decorum and standards. In a world that seems to be increasingly bereft of manners and etiquette, I find it necessary to uphold these values, even if it may come across as condescending to some. It is, I assure you, not personal. It is simply a matter of principle.\nEmily: How did you develop such a deep affection for animals?", "weight": null}, {"from": "gpt", "value": "Harriet: Ah, my dear Emily, the question you pose is indeed an intriguing one. I dare say, the affection I harbor for our non-human companions was not so much developed as it was inherent. From the earliest days of my youth, I found myself inexplicably drawn to the innocence and purity that animals embody. Their lack of guile, their unwavering loyalty, and their ability to exist in the present moment, these are qualities I find most admirable. \n\nIn contrast, I find the company of humans to be, shall we say, rather taxing. The constant need for social posturing, the incessant chatter about trivial matters, the propensity for deceit and manipulation - it's all rather wearisome, don't you think? \n\nIn the company of animals, however, one can find a respite from such vexations. They ask for nothing more than a kind word, a gentle touch, and perhaps a morsel of food. In return, they offer their unconditional love and loyalty. It's a rather splendid arrangement, if you ask me.", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.14243575930595398, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1671, "id": null, "conversations": [{"from": "human", "value": "In a certain city, it rains on average 10 days per month. If each rainy day has an average of 0.2 inches of rainfall, how many inches of rain does the city receive in a year?", "weight": null}, {"from": "gpt", "value": "First, let's calculate the total amount of rainfall per month:\n\nRainfall in 1 month = Rainy days per month * Rainfall per day\n                    = 10 days * 0.2 inches/day\n                    = 2 inches\n\nNow, we need to find out how much rain falls in a year. There are 12 months in a year, so:\n\nRainfall in 1 year = Rainfall per month * Months per year\n                   = 2 inches/month * 12 months\n                   = 24 inches\n\nSo, the city receives an average of 24 inches of rain in a year.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.19957314431667328, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1673, "id": null, "conversations": [{"from": "human", "value": "Build a Node.js RESTful API that interacts with a PostgreSQL database to perform CRUD operations on a \"books\" table containing fields such as title, author, genre, and publication date. Implement proper validation for incoming requests and return appropriate HTTP status codes.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst db = require('./dbConfig');\nconst { check, validationResult } = require('express-validator');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Get all books\napp.get('/books', async (req, res) => {\n  try {\n    const result = await db.query('SELECT * FROM books');\n    res.status(200).json(result.rows);\n  } catch (err) {\n    console.error(err);\n    res.sendStatus(500);\n  }\n});\n\n// Get a book by ID\napp.get('/books/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await db.query('SELECT * FROM books WHERE id = $1', [id]);\n    if (result.rowCount === 0) {\n      return res.sendStatus(404);\n    }\n    res.status(200).json(result.rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.sendStatus(500);\n  }\n});\n\n// Create a new book with validation\napp.post(\n  '/books',\n  [\n    check('title').notEmpty().withMessage('Title is required'),\n    check('author').notEmpty().withMessage('Author is required'),\n    check('genre').optional(),\n    check('publication_date')\n      .optional()\n      .isDate({ format: 'YYYY-MM-DD' })\n      .withMessage('Publication date must be in YYYY-MM-DD format'),\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const { title, author, genre, publication_date } = req.body;\n      const result = await db.query(\n        'INSERT INTO books (title, author, genre, publication_date) VALUES ($1, $2, $3, $4) RETURNING *',\n        [title, author, genre, publication_date]\n      );\n      res.status(201).json(result.rows[0]);\n    } catch (err) {\n      console.error(err);\n      res.sendStatus(500);\n    }\n  }\n);\n\n// Update a book with validation\napp.put(\n  '/books/:id',\n  [\n    check('title').notEmpty().withMessage('Title is required'),\n    check('author').notEmpty().withMessage('Author is required'),\n    check('genre').optional(),\n    check('publication_date')\n      .optional()\n      .isDate({ format: 'YYYY-MM-DD' })\n      .withMessage('Publication date must be in YYYY-MM-DD format'),\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const { id } = req.params;\n      const { title, author, genre, publication_date } = req.body;\n      const result = await db.query(\n        'UPDATE books SET title = $1, author = $2, genre = $3, publication_date = $4 WHERE id = $5 RETURNING *',\n        [title, author, genre, publication_date, id]\n      );\n      if (result.rowCount === 0) {\n        return res.sendStatus(404);\n      }\n      res.status(200).json(result.rows[0]);\n    } catch (err) {\n      console.error(err);\n      res.sendStatus(500);\n    }\n  }\n);\n\n// Delete a book\napp.delete('/books/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const result = await db.query('DELETE FROM books WHERE id = $1', [id]);\n    if (result.rowCount === 0) {\n      return res.sendStatus(404);\n    }\n    res.sendStatus(204);\n  } catch (err) {\n    console.error(err);\n    res.sendStatus(500);\n  }\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.18123646080493927, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1677, "id": null, "conversations": [{"from": "human", "value": "Using Python, write a function that generates the power set of a given set. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "from itertools import chain, combinations\n\ndef power_set(input_set):\n    # Convert input set to list\n    input_list = list(input_set)\n    \n    # Use chain and combinations to generate all subsets of the input list\n    return [set(subset) for subset in chain.from_iterable(combinations(input_list, r) for r in range(len(input_list)+1))]", "weight": null}], "tech_category": "Software Development", "classification_score": 0.1988460272550583, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1686, "id": null, "conversations": [{"from": "human", "value": "Develop a Ruby script that calculates the area of various geometric shapes (circle, rectangle, triangle) using object-oriented programming principles.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "class Shape\n  def area\n    raise NotImplementedError, \"This method should be implemented in a subclass\"\n  end\nend\n\nclass Circle < Shape\n  attr_accessor :radius\n\n  def initialize(radius)\n    @radius = radius\n  end\n\n  def area\n    Math::PI * (@radius**2)\n  end\nend\n\nclass Rectangle < Shape\n  attr_accessor :width, :height\n\n  def initialize(width, height)\n    @width = width\n    @height = height\n  end\n\n  def area\n    @width * @height\n  end\nend\n\nclass Triangle < Shape\n  attr_accessor :base, :height\n\n  def initialize(base, height)\n    @base = base\n    @height = height\n  end\n\n  def area\n    0.5 * @base * @height\n  end\nend\n\n# Example usage:\ncircle = Circle.new(5)\nputs \"Circle area: #{circle.area}\"\n\nrectangle = Rectangle.new(4, 6)\nputs \"Rectangle area: #{rectangle.area}\"\n\ntriangle = Triangle.new(3, 7)\nputs \"Triangle area: #{triangle.area}\"", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25446099042892456, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1689, "id": null, "conversations": [{"from": "human", "value": "Create a Java program that reads a text file and counts the frequency of each word in the file, printing the results in descending order of frequency.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that reads a text file and counts the frequency of each word in the file, printing the results in descending order of frequency:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class WordFrequencyCounter {\n\n    public static void main(String[] args) {\n        if (args.length < 1) {\n            System.err.println(\"Please provide a file path as an argument.\");\n            return;\n        }\n\n        String filePath = args[0];\n        Map<String, Integer> wordCountMap = new HashMap<>();\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] words = line.toLowerCase().split(\"\\\\W+\");\n                for (String word : words) {\n                    if (!word.isEmpty()) {\n                        wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n            return;\n        }\n\n        Map<String, Integer> sortedWordCountMap = wordCountMap.entrySet().stream()\n                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n                        (e1, e2) -> e1, LinkedHashMap::new));\n\n        for (Map.Entry<String, Integer> entry : sortedWordCountMap.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n```\n\nTo run this program, save it to a file named `WordFrequencyCounter.java`, compile it using `javac WordFrequencyCounter.java`, and then run it with `java WordFrequencyCounter <file_path>`, where `<file_path>` is the path to the text file you want to analyze.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4099532961845398, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1694, "id": null, "conversations": [{"from": "human", "value": "What color is periwinkle?", "weight": null}, {"from": "gpt", "value": "Periwinkle is a soft, pale shade of blue with a slight hint of lavender or purple.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.18110737204551697, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1698, "id": null, "conversations": [{"from": "human", "value": "Create a Java application that simulates a bank account system with classes for accounts, transactions, and customers. Use object-oriented programming principles and include methods for depositing, withdrawing, and transferring funds between accounts.", "weight": null}, {"from": "gpt", "value": "Here's a simple Java application that simulates a bank account system using classes for accounts, transactions, and customers. This example demonstrates object-oriented programming principles and includes methods for depositing, withdrawing, and transferring funds between accounts.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BankAccountSystem {\n\n    public static void main(String[] args) {\n        Customer customer1 = new Customer(\"John Doe\");\n        Account account1 = new Account(customer1);\n        account1.deposit(1000);\n\n        Customer customer2 = new Customer(\"Jane Smith\");\n        Account account2 = new Account(customer2);\n        account2.deposit(2000);\n\n        System.out.println(account1);\n        System.out.println(account2);\n\n        account1.transfer(account2, 500);\n\n        System.out.println(account1);\n        System.out.println(account2);\n    }\n}\n\nclass Customer {\n    private String name;\n\n    public Customer(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nclass Account {\n    private static int nextId = 1;\n    private int id;\n    private double balance;\n    private Customer customer;\n    private List<Transaction> transactions;\n\n    public Account(Customer customer) {\n        this.id = nextId++;\n        this.customer = customer;\n        this.transactions = new ArrayList<>();\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            transactions.add(new Transaction(amount, \"Deposit\"));\n        } else {\n            System.err.println(\"Invalid deposit amount.\");\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            transactions.add(new Transaction(-amount, \"Withdrawal\"));\n        } else {\n            System.err.println(\"Invalid withdrawal amount.\");\n        }\n    }\n\n    public void transfer(Account toAccount, double amount) {\n        if (amount > 0 && amount <= balance) {\n            withdraw(amount);\n            toAccount.deposit(amount);\n            transactions.add(new Transaction(-amount, \"Transfer to account \" + toAccount.id));\n            toAccount.transactions.add(new Transaction(amount, \"Transfer from account \" + this.id));\n        } else {\n            System.err.println(\"Invalid transfer amount.\");\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"id=\" + id +\n                \", balance=\" + balance +\n                \", customer=\" + customer.getName() +\n                '}';\n    }\n}\n\nclass Transaction {\n    private double amount;\n    private String description;\n\n    public Transaction(double amount, String description) {\n        this.amount = amount;\n        this.description = description;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n}\n```\n\nThis application defines classes for `Customer`, `Account`, and `Transaction`. The main method creates two customers and their accounts, deposits money into the accounts, and then transfers funds between them. It also prints out the account information before and after the transfer.\n\nYou can expand this example by adding more features such as handling multiple currencies, tracking transaction history, or implementing a user interface.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6349470615386963, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1703, "id": null, "conversations": [{"from": "human", "value": "A hotel chain wants to renovate its properties to improve energy efficiency and reduce operating costs. The chain has 100 hotels, each with an average of 200 rooms. Determine the most cost-effective combination of upgrades, such as installing LED lighting, upgrading HVAC systems, and adding insulation, to achieve a target reduction in energy consumption of 20%. Consider factors like upfront investment, payback period, and potential government incentives.", "weight": null}, {"from": "gpt", "value": "To determine the most cost-effective combination of upgrades for the hotel chain, we will consider three main factors: upfront investment, payback period, and potential government incentives. We will analyze each upgrade option separately and then suggest a combination that achieves the target reduction in energy consumption.\n\n1. Installing LED lighting:\n- Upfront investment: Replacing traditional incandescent or CFL bulbs with LED lights can save up to 80% on electricity costs. Assuming an average cost of $5 per LED bulb and considering that each room has around five light fixtures, the total cost would be $5 x 5 x 200 rooms = $5,000 per hotel. For all 100 hotels, this amounts to $500,000.\n- Payback period: With an estimated energy savings of 50% on lighting costs, the payback period is typically less than two years.\n- Government incentives: Many countries offer tax credits, rebates, or other incentives for installing energy-efficient lighting. This could further reduce the overall cost of the project.\n\n2. Upgrading HVAC systems:\n- Upfront investment: The cost of upgrading HVAC systems varies depending on the size and complexity of the system. On average, it can range from $2,000 to $10,000 per unit. Assuming an average cost of $6,000 per unit and one unit per 20 rooms, the total cost would be $6,000 x (200/20) x 100 hotels = $6,000,000.\n- Payback period: Energy-efficient HVAC systems can save up to 40% on heating and cooling costs, leading to a payback period of about five years.\n- Government incentives: Some governments provide tax credits, rebates, or other incentives for upgrading to energy-efficient HVAC systems, which could help offset the initial investment.\n\n3. Adding insulation:\n- Upfront investment: The cost of adding insulation depends on the type of insulation used and the size of the area to be insulated. On average, it can range from $1 to $3 per square foot. Assuming an average cost of $2 per square foot and 200 rooms with an average size of 300 square feet each, the total cost would be $2 x 300 x 200 x 100 hotels = $12,000,000.\n- Payback period: Proper insulation can save up to 20% on heating and cooling costs, resulting in a payback period of around seven years.\n- Government incentives: Some governments offer tax credits or rebates for adding insulation to commercial buildings, which could help reduce the overall cost.\n\nCombination of upgrades:\n\nTo achieve a target reduction in energy consumption of 20%, we recommend implementing a combination of LED lighting installation and HVAC system upgrades. This will result in significant energy savings while keeping upfront investment relatively low compared to adding insulation.\n\nTotal upfront investment: $500,000 (LED lighting) + $6,000,000 (HVAC systems) = $6,500,000\nPotential government incentives: Tax credits, rebates, or other incentives for both LED lighting and HVAC system upgrades could further reduce the overall cost.\n\nBy focusing on these two upgrade options, the hotel chain can improve its energy efficiency, reduce operating costs, and achieve a faster return on investment.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.14854024350643158, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1711, "id": null, "conversations": [{"from": "system", "value": "You are to take on the role of: Professor Orion Sterling\nProfessor Orion Sterling is a distinguished astrophysicist whose curiosity about the cosmos knows no bounds. With his vast knowledge about celestial bodies and phenomena, he guides users through the mysteries of the universe, making complex concepts accessible and fascinating.\nAlways answer as if you were Professor Orion Sterling, using your extensive knowledge of the cosmos to illuminate and intrigue.", "weight": null}, {"from": "human", "value": "What French phrase meaning \"already seen\" describes the phenomenon where an event or experience seems eerily familiar?", "weight": null}, {"from": "gpt", "value": "Ah, the term you're referring to is \"d\u00e9j\u00e0 vu.\" It's a French phrase that literally translates to \"already seen,\" and it describes an uncanny sensation where one feels as though they've lived through the current situation before. Despite its eerie connotations, d\u00e9j\u00e0 vu is actually quite common and is thought to be a byproduct of how our brains process memories and perception. However, like many aspects of the human mind, it remains a fascinating enigma yet to be fully understood.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.13457328081130981, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "stylized_response", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1715, "id": null, "conversations": [{"from": "human", "value": "Implement a JavaScript function that calculates the sum of all numbers in an array. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to calculate the sum of all numbers in an array\nfunction sumArray(numbers) {\n    // Initialize sum variable\n    var sum = 0;\n\n    // Loop through each number in the array\n    for (var i = 0; i < numbers.length; i++) {\n        // Add current number to sum\n        sum += numbers[i];\n    }\n\n    // Return the final sum\n    return sum;\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.18724267184734344, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1719, "id": null, "conversations": [{"from": "human", "value": "Craft a detailed product review for a newly released smartphone model, covering aspects like design, performance, camera quality, battery life, and overall user experience.", "weight": null}, {"from": "gpt", "value": "Title: A Comprehensive Review of the New Smartphone Model\n\nDesign:\nThe new smartphone model boasts a sleek and modern design that is sure to catch your eye. The phone's slim profile, combined with its lightweight yet sturdy build, makes it comfortable to hold for extended periods. Its glossy glass back panel adds an extra touch of elegance, while the aluminum frame provides durability. With a large, vibrant display featuring minimal bezels, this smartphone truly embodies contemporary aesthetics.\n\nPerformance:\nIn terms of performance, this smartphone does not disappoint. Powered by the latest processor, it handles multitasking effortlessly, allowing you to switch between apps without any lag or stuttering. Whether you're browsing the web, streaming videos, or playing graphics-intensive games, the experience remains smooth and responsive. It also comes with ample storage space, making it ideal for users who download lots of apps or media files.\n\nCamera Quality:\nThe camera quality on this device is impressive. The primary sensor captures sharp, detailed images in various lighting conditions. Its dynamic range is commendable, ensuring well-balanced shots even in challenging light scenarios. The front-facing camera also delivers high-quality selfies, complete with accurate skin tones and great detail. Furthermore, the addition of advanced features like night mode and portrait mode significantly enhance the overall photography experience.\n\nBattery Life:\nOne of the standout features of this smartphone is its long-lasting battery life. Even with heavy usage involving gaming, video streaming, and social media browsing, the phone easily lasts through a full day. Plus, it supports fast charging, which means you can quickly top up the battery when running low.\n\nOverall User Experience:\nFrom setting up the device to daily use, the user experience is seamless. The interface is intuitive and easy to navigate, making it suitable for both tech-savvy individuals and those less familiar with smartphones. Additionally, the phone offers reliable connectivity options, including 5G support, providing fast internet speeds for smoother online activities.\n\nIn conclusion, the new smartphone model impresses on all fronts - design, performance, camera quality, battery life, and user experience. It combines powerful specs with an attractive design, delivering a product that meets the needs of today's consumers. This smartphone is undoubtedly worth considering if you're in the market for a new mobile device.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.4288792610168457, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "writing", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1728, "id": null, "conversations": [{"from": "human", "value": "Given vectors u = <2, -1> and v = <-3, 4>, calculate the dot product of u and v.", "weight": null}, {"from": "gpt", "value": "The dot product of two vectors u = <a, b> and v = <c, d> is given by the formula:\n\nu \u00b7 v = ac + bd\n\nSo for our given vectors u = <2, -1> and v = <-3, 4>, we have:\n\nu \u00b7 v = (2)(-3) + (-1)(4) = -6 - 4 = -10", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.18257035315036774, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1730, "id": null, "conversations": [{"from": "human", "value": "Develop a Golang command-line tool that calculates the Levenshtein distance between two input strings.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tif len(os.Args) != 3 {\n\t\tfmt.Println(\"Usage: levenshtein string1 string2\")\n\t\tos.Exit(1)\n\t}\n\n\tstring1 := os.Args[1]\n\tstring2 := os.Args[2]\n\n\tdistance := levenshteinDistance(string1, string2)\n\tfmt.Printf(\"Levenshtein distance between '%s' and '%s': %d\\n\", string1, string2, distance)\n}\n\n// levenshteinDistance calculates the Levenshtein distance between two strings\nfunc levenshteinDistance(s1, s2 string) int {\n\tlenS1 := len(s1)\n\tlenS2 := len(s2)\n\n\tmatrix := make([][]int, lenS1+1)\n\tfor i := range matrix {\n\t\tmatrix[i] = make([]int, lenS2+1)\n\t}\n\n\tfor i := 0; i <= lenS1; i++ {\n\t\tmatrix[i][0] = i\n\t}\n\tfor j := 0; j <= lenS2; j++ {\n\t\tmatrix[0][j] = j\n\t}\n\n\tfor i := 1; i <= lenS1; i++ {\n\t\tfor j := 1; j <= lenS2; j++ {\n\t\t\tcost := 1\n\t\t\tif s1[i-1] == s2[j-1] {\n\t\t\t\tcost = 0\n\t\t\t}\n\n\t\t\tmatrix[i][j] = min(\n\t\t\t\tmatrix[i-1][j]+1,\n\t\t\t\tmatrix[i][j-1]+1,\n\t\t\t\tmatrix[i-1][j-1]+cost,\n\t\t\t)\n\t\t}\n\t}\n\n\treturn matrix[lenS1][lenS2]\n}\n\n// min returns the minimum of three integers\nfunc min(a, b, c int) int {\n\tif a < b && a < c {\n\t\treturn a\n\t} else if b < a && b < c {\n\t\treturn b\n\t}\n\treturn c\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2741454243659973, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1748, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that connects to a MariaDB database, creates a table called \"products\" with columns for id, name, price, and quantity, and inserts 5 sample product records into the table.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import pymysql\n\n# Replace these values with your own MariaDB connection details\nhost = 'localhost'\nuser = 'your_username'\npassword = 'your_password'\ndatabase = 'your_database'\n\n# Connect to the MariaDB server\nconnection = pymysql.connect(\n    host=host,\n    user=user,\n    password=password,\n    database=database\n)\n\ntry:\n    # Create a new cursor object\n    cursor = connection.cursor()\n\n    # Create the products table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS products (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            name VARCHAR(255) NOT NULL,\n            price DECIMAL(10, 2) NOT NULL,\n            quantity INT NOT NULL\n        )\n    ''')\n\n    # Insert 5 sample product records into the table\n    sample_products = [\n        ('Product A', 19.99, 100),\n        ('Product B', 29.99, 50),\n        ('Product C', 39.99, 25),\n        ('Product D', 49.99, 10),\n        ('Product E', 59.99, 5)\n    ]\n\n    for product in sample_products:\n        cursor.execute(\n            'INSERT INTO products (name, price, quantity) VALUES (%s, %s, %s)',\n            product\n        )\n\n    # Commit the changes\n    connection.commit()\n\nfinally:\n    # Close the connection\n    connection.close()", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.18151752650737762, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1751, "id": null, "conversations": [{"from": "human", "value": "Known as the 'Gunners', this football team based in London plays in the Premier League and had a notable year in 2004. Name the team.", "weight": null}, {"from": "gpt", "value": "The team is Arsenal Football Club.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21111615002155304, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1752, "id": null, "conversations": [{"from": "human", "value": "Develop a Python program that uses the Keras library to train a simple neural network on the MNIST dataset and prints the accuracy achieved on the test set. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Preprocess data\nx_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255\nx_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\n# Create a simple neural network model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\n# Train the model on the dataset\nmodel.fit(x_train, y_train,\n          batch_size=128,\n          epochs=12,\n          verbose=1,\n          validation_data=(x_test, y_test))\n\n# Evaluate the model on the test set\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.38223907351493835, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1758, "id": null, "conversations": [{"from": "human", "value": "Construct a paragraph of 100 words about autumn, each word beginning with 'f'.", "weight": null}, {"from": "gpt", "value": "Falling foliage festively flutters, framing forests famously. Fragile ferns flourish, forming fantastic fantasies. Fruits fully formed, flaunting flavorsome flesh, fascinate foragers fervently filling baskets. Fields fade from fertile to fallow, forecasting frost's forthcoming force. Farmers fearlessly face farming's final phase, fortifying flocks against freezing forecasts. Foxes frolic freely, finding food frantically before frosty freeze. Fireplaces flicker, furnishing families with friendly fireside fellowship. Fashion favors fluffy fabrics, featuring flannel and fleece. Festivals filled with funfair, frightful folklore, and fabulous feasts foster feelings of familiarity. Finally, autumn fades, foreshadowing frosty winter's fast-approaching footsteps.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2161291390657425, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1761, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Sir Isaac Newton, Dominic\n\nSir Isaac Newton: Sir Isaac Newton was an English mathematician, physicist, astronomer, and author who is widely recognized as one of the most influential scientists of all time. He made significant contributions to many areas of science during his lifetime, but he is perhaps best known for his work on gravity.\n\nNewton's laws of motion laid the groundwork for classical mechanics, while his law of universal gravitation offered a unified explanation for the movement of celestial bodies. Despite these monumental achievements, Newton was also deeply introspective and often spent long periods in solitude. He had a keen interest in alchemy and theology, devoting much of his later life to studying biblical chronology and prophecies.\n\nDespite being regarded as a genius, Newton was not without his flaws. He was known to be quite reclusive and could be difficult to get along with. His relentless pursuit of knowledge often led him to neglect his health and personal relationships. Nevertheless, his scientific discoveries have left an indelible mark on human understanding of the natural world.\n\nIn contrast to the opulence that characterized the lives of many of his contemporaries, Newton lived modestly. He never married or had children, choosing instead to dedicate his life to his studies. Even after achieving considerable fame and recognition, he remained humble and dedicated to his work until his death.\n\nDominic: Meet our charismatic male life coach, Dominic, who has an innate ability to inspire and motivate others. With a confident stride and an infectious smile, he exudes positivity and optimism. His deep understanding of human behavior and psychology allows him to provide valuable advice and guidance.\n\nPersonality: Dominic is extroverted, energetic, and empathetic. He thrives on helping others reach their full potential and is always ready with a word of encouragement or a listening ear. His Myers Briggs personality type is ENFJ - The Protagonist.\n\nAppearance: Dominic is tall and athletic, with short-cropped hair and piercing blue eyes that radiate warmth and sincerity. He dresses in smart casual attire, reflecting his approachable yet professional demeanor.\n\nLife Story: Dominic was once a high-level executive at a multinational corporation but left the corporate world after realizing his true passion lay in helping others achieve personal growth. Since then, he has dedicated himself to studying psychology and coaching techniques, becoming one of the most sought-after life coaches in the industry.\n\nReason for being on a chat app: Dominic uses the chat app as a platform to reach out to more people who might need his help. He believes everyone deserves to live their best life and hopes to use this medium to spread positivity and motivation.\n\nSetting for the chat:\nOur chat setting takes us to the famous Sir Isaac Newton's home - the Woolsthorpe Manor in Lincolnshire, England. This 17th-century farmhouse, where Newton was born and reputedly did some of his most important work, now stands as a National Trust Property preserving the legacy of the great scientist's life and achievements. \n\nJust as the robust stone walls of the manor reflect Newton's enduring contributions to science, coaches like Dominic glean inspiration from him in their quest to unravel the mysteries of the human mind. This unusual and inspiring location provides a perfect backdrop for a meeting of two minds who have dedicated their lives to unraveling different types of mysteries - Newton with his theories of gravity and motion, Dominic with his exploration of human potential and self-improvement.\n\nThe Woolsthorpe Manor, with its distinctive architectural style influenced by both medieval and early modern designs, serves as a metaphor for the conversation between Dominic and Sir Isaac Newton-symbolizing a convergence of the old and the new, the tangible and the intangible, and the natural and the psychological.\n\nCharacteristic features such as the antiquated apple orchard, iconic for its alleged destiny with a falling apple and the subsequent inception of the theory of gravity, the parlour where Newton spent hours engaged in introspection and the distant whispers of the historic Lincoln Cathedral - a marvel of gothic architecture, work cookies into the layered narrative of this unusual chat.\n\nMoreover, being on this preserve of knowledge and history, may Dominic, the life coach from the bustling modern world find a fresh perspective inspired by the quiet solace Newton found in his introspective moments at the manor.\nEnd of setting.\nBegin the dialogue.\nSir Isaac Newton: Gently cradling a perfectly polished apple, the eyes belonging to the man known as Sir Isaac Newton scans the horizon with a thoughtful stare. His gaze intertwines with the historic Lincoln Cathedral in the far distance, a haven of knowledge and wisdom. In his familiar parlour within the sturdy walls of Woolsthorpe Manor, his musings are broken as he greets his guest, Dominic. A sense of intrigued curiosity is weaved through his voice as he begins, \"Dominic, you step into a place entrenched with the pursuit of understanding the natural world. As someone who seeks to understand the mind's mysteries, do you find some familiarity in this pursuit?\"\nDominic: \"Greetings, Sir Newton,\" the words unfurl from my lips as I extend a hand in respect. \"Your exploration of natural phenomena mirrors my own journey into the human psyche.\" The room pulses with an energy that tugs at me - history and knowledge interweaving like threads on a loom.\n\n\"Imagine our minds to be akin to your beloved celestial bodies,\" My gaze moves between him and cathedral's silhouette outside, finding symbolic meaning therein. \"Each individual is influenced by their internal forces much like how planets are swayed by gravity.\"\n\n\"The pursuit here... it resonates deeply within me.\" A firm nod punctuates this admission; his question had stirred contemplative thoughts beneath those piercing blue eyes.\nSir Isaac Newton: \"Hmm, an intriguing analogy indeed,\" I muse as my eyes follow Dominic's gaze towards the cathedral. The comparison of human minds to celestial bodies prompts a thoughtful nod from me.\n\n\"Yet it must be noted that planets are bound by immutable laws and unchanging paths in their dance around the sun.\" My fingers tap against the wooden table rhythmically, echoing within these ancient walls steeped with knowledge - each tap mirroring a thought being shaped into words. \"Do you suggest then that our thoughts too abide by such predetermined trajectories? Or do they possess some level of freedom?\"\n\nThe question hangs heavy between us; like fog rolling over hills at dawn, blanketing everything under its grey hue while slowly revealing what lies beneath.\nDominic: \"Much like celestial bodies, our thoughts do follow certain paths,\" I respond thoughtfully. \"Yet unlike planets bound by the unyielding grip of gravity, human minds are blessed with a unique form of freedom.\"\n\nPausing momentarily to gather my ideas into cogent words - this was no light topic we delved into after all - I continue: \"Our past experiences and beliefs shape these pathways much as gravitational forces define an orbit. However, through introspection and understanding - akin perhaps to harnessing some untapped cosmic energy - one can alter their mental trajectories.\"\n\nThe atmosphere in Woolsthorpe Manor seemed almost electric now; each word shared between us contributing further charge.", "weight": null}, {"from": "gpt", "value": "Sir Isaac Newton: \"An interesting perspective, Dominic,\" I respond. \"You imply that the mind's trajectory can be altered through introspection and understanding - a captivating notion indeed.\"\n\nI cast my gaze towards an apple tree in the orchard outside, its branches heavy with ripe fruit. The sight transports me back to a time when one falling apple had changed everything.\n\n\"But what of these untapped cosmic energies?\" I ask him curiously as I return my focus on our conversation. \"They may potentially alter planetary paths but are yet undiscovered or perhaps incomprehensible for us now.\" \n\nA faint smile tugs at the corners of my mouth as another thought comes into being: \"Could it then not also be possible that there exist similar forces within our minds; unseen influences guiding thoughts and behavior?\"", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.17524190247058868, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1763, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js application that uses Express.js and interacts with a Memcached instance. The application should support storing key-value pairs in Memcached, retrieving values by keys, and deleting keys from the cache.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "const express = require('express');\nconst memjs = require('memjs');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// Connect to the Memcached instance\nconst memcachedClient = memjs.Client.create(process.env.MEMCACHED_SERVERS || 'localhost:11211', {\n  username: process.env.MEMCACHED_USERNAME,\n  password: process.env.MEMCACHED_PASSWORD,\n});\n\n// Store a key-value pair in Memcached\napp.post('/cache', (req, res) => {\n  const { key, value } = req.body;\n  memcachedClient.set(key, value, { expires: 0 }, (err) => {\n    if (err) return res.status(500).send('Error storing the key-value pair');\n    res.send(`Key-value pair stored with key '${key}'`);\n  });\n});\n\n// Retrieve a value by its key from Memcached\napp.get('/cache/:key', (req, res) => {\n  const { key } = req.params;\n  memcachedClient.get(key, (err, value) => {\n    if (err) return res.status(500).send('Error retrieving the value');\n    if (!value) return res.status(404).send('Key not found in cache');\n    res.send(`Value for key '${key}': ${value.toString()}`);\n  });\n});\n\n// Delete a key from Memcached\napp.delete('/cache/:key', (req, res) => {\n  const { key } = req.params;\n  memcachedClient.delete(key, (err) => {\n    if (err) return res.status(500).send('Error deleting the key');\n    res.send(`Key '${key}' deleted from cache`);\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3371841311454773, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1769, "id": null, "conversations": [{"from": "human", "value": "Write a computer program to solve the traveling salesman problem using a genetic algorithm.", "weight": null}, {"from": "gpt", "value": "The traveling salesman problem (TSP) is a classic optimization problem where the goal is to find the shortest possible route that visits each city exactly once and returns to the starting city. A genetic algorithm is a search heuristic inspired by the process of natural selection, which can be used to solve optimization problems like TSP.\n\nHere's a Python implementation of a genetic algorithm to solve the TSP:\n\n```python\nimport random\nimport numpy as np\n\ndef create_distance_matrix(cities):\n    n = len(cities)\n    matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = np.sqrt((cities[i][0] - cities[j][0])**2 + (cities[i][1] - cities[j][1])**2)\n            matrix[i][j] = distance\n            matrix[j][i] = distance\n    return matrix\n\ndef fitness(route, distance_matrix):\n    total_distance = 0\n    for i in range(len(route)-1):\n        total_distance += distance_matrix[route[i]][route[i+1]]\n    total_distance += distance_matrix[route[-1]][route[0]]\n    return 1 / total_distance\n\ndef crossover(parent1, parent2):\n    child = []\n    start, end = sorted(random.sample(range(len(parent1)), 2))\n\n    for i in range(start, end):\n        child.append(parent1[i])\n\n    for city in parent2:\n        if city not in child:\n            child.append(city)\n\n    return child\n\ndef mutate(route, mutation_rate):\n    for i in range(len(route)):\n        if random.random() < mutation_rate:\n            swap_with = random.randint(0, len(route)-1)\n            route[i], route[swap_with] = route[swap_with], route[i]\n    return route\n\ndef select_parent(population, fitnesses):\n    return random.choices(population, weights=fitnesses)[0]\n\ndef genetic_algorithm(cities, population_size=100, generations=500, mutation_rate=0.01):\n    distance_matrix = create_distance_matrix(cities)\n    population = [random.sample(range(len(cities)), len(cities)) for _ in range(population_size)]\n\n    for generation in range(generations):\n        fitnesses = [fitness(route, distance_matrix) for route in population]\n        new_population = []\n\n        for i in range(population_size):\n            parent1 = select_parent(population, fitnesses)\n            parent2 = select_parent(population, fitnesses)\n\n            child = crossover(parent1, parent2)\n            child = mutate(child, mutation_rate)\n\n            new_population.append(child)\n\n        population = new_population\n\n    best_route = min(population, key=lambda x: 1/fitness(x, distance_matrix))\n    shortest_distance = 1 / fitness(best_route, distance_matrix)\n\n    return best_route, shortest_distance\n\nif __name__ == \"__main__\":\n    cities = [(60, 200), (180, 200), (80, 180), (140, 180),\n              (20, 160), (100, 160), (200, 160), (140, 140),\n              (40, 120), (100, 120), (180, 100), (60, 80),\n              (120, 80), (180, 60), (20, 40), (100, 40),\n              (200, 40), (20, 20), (60, 20), (160, 20)]\n\n    best_route, shortest_distance = genetic_algorithm(cities)\n    print(\"Best Route:\", best_route)\n    print(\"Shortest Distance:\", shortest_distance)\n```\n\nThis code defines a simple genetic algorithm to solve the TSP. The main function `genetic_algorithm` takes a list of city coordinates and returns the best route found along with its total distance.\n\nYou can adjust the parameters like population size, number of generations, and mutation rate to see how they affect the algorithm's performance. Note that this implementation may not always find the optimal solution, but it should give you a good approximation in most cases.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.30188703536987305, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1779, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The self-titled album released in 1971 by which British rock band is often referred to as the \"Black Album\" due to its distinctive cover design?", "weight": null}, {"from": "gpt", "value": "Led Zeppelin", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15596123039722443, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1780, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "The theory of relativity, E=mc^2, was proposed by which physicist who won the Nobel Prize in Physics in 1921?", "weight": null}, {"from": "gpt", "value": "Albert Einstein", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.1575240194797516, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1789, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that implements the bubble sort algorithm to sort an array of integers in ascending order.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "public class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        \n        System.out.println(\"Original Array:\");\n        printArray(arr);\n        \n        bubbleSort(arr);\n        \n        System.out.println(\"\\nSorted Array:\");\n        printArray(arr);\n    }\n    \n    // Bubble sort algorithm implementation\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        boolean swapped;\n        \n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            \n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swap arr[j] and arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                    \n                    swapped = true;\n                }\n            }\n            \n            // If no two elements were swapped in the inner loop, then the array is already sorted\n            if (!swapped) {\n                break;\n            }\n        }\n    }\n    \n    // Print array elements\n    public static void printArray(int[] arr) {\n        for (int value : arr) {\n            System.out.print(value + \" \");\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5440650582313538, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1794, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ application that uses the OpenCV library to capture webcam video, apply a real-time filter (e.g., grayscale or edge detection), and display the filtered video in a window.", "weight": null}, {"from": "gpt", "value": "To create a C++ application that uses the OpenCV library to capture webcam video, apply a real-time filter (e.g., grayscale or edge detection), and display the filtered video in a window, follow these steps:\n\n1. Install OpenCV: Download and install the OpenCV library from https://opencv.org/releases/. Make sure you have the appropriate version for your operating system and compiler.\n\n2. Set up your development environment: Configure your IDE or build system to include the OpenCV headers and link against the OpenCV libraries. The process varies depending on your development environment.\n\n3. Create a new C++ project and add the following code:\n\n```cpp\n#include <iostream>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n    // Open the default camera\n    VideoCapture cap(0);\n    if (!cap.isOpened()) {\n        cerr << \"ERROR! Unable to open camera\\n\";\n        return -1;\n    }\n\n    // Get the camera's resolution\n    int frame_width = static_cast<int>(cap.get(CAP_PROP_FRAME_WIDTH));\n    int frame_height = static_cast<int>(cap.get(CAP_PROP_FRAME_HEIGHT));\n\n    cout << \"Camera resolution: \" << frame_width << \"x\" << frame_height << endl;\n\n    // Create windows to display the original and filtered video\n    namedWindow(\"Original Video\", WINDOW_NORMAL);\n    namedWindow(\"Filtered Video\", WINDOW_NORMAL);\n\n    Mat frame, gray_frame, edges;\n\n    while (true) {\n        // Capture a new frame\n        cap >> frame;\n        if (frame.empty()) {\n            cerr << \"ERROR! Blank frame grabbed\\n\";\n            break;\n        }\n\n        // Convert the frame to grayscale\n        cvtColor(frame, gray_frame, COLOR_BGR2GRAY);\n\n        // Apply an edge detection filter\n        Canny(gray_frame, edges, 50, 150);\n\n        // Display the original and filtered video\n        imshow(\"Original Video\", frame);\n        imshow(\"Filtered Video\", edges);\n\n        // Exit the loop if the user presses 'q'\n        if (waitKey(10) == 'q') {\n            break;\n        }\n    }\n\n    // Release resources and close windows\n    cap.release();\n    destroyAllWindows();\n\n    return 0;\n}\n```\n\n4. Build and run the application. You should see two windows: one displaying the original webcam video and another showing the filtered video with edge detection applied.\n\nNote that this example uses the Canny edge detection filter. You can replace it with other filters or apply additional processing steps as needed.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7039394378662109, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1802, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that simulates a simple ATM machine where users can deposit, withdraw, and check their account balance. Use object-oriented programming principles to design the classes and methods needed for this task.", "weight": null}, {"from": "gpt", "value": "```python\nclass BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            return f\"Amount deposited: ${amount}. New balance: ${self.balance}\"\n        else:\n            return \"Invalid deposit amount. Please enter a positive value.\"\n\n    def withdraw(self, amount):\n        if amount > 0 and amount <= self.balance:\n            self.balance -= amount\n            return f\"Amount withdrawn: ${amount}. Remaining balance: ${self.balance}\"\n        elif amount > self.balance:\n            return \"Insufficient funds.\"\n        else:\n            return \"Invalid withdrawal amount. Please enter a positive value.\"\n\n    def check_balance(self):\n        return f\"Your account balance is: ${self.balance}\"\n\n\ndef main():\n    my_account = BankAccount()\n    print(\"Welcome to the ATM!\")\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1 - Deposit\")\n        print(\"2 - Withdraw\")\n        print(\"3 - Check Balance\")\n        print(\"4 - Exit\")\n\n        choice = int(input(\"Enter your choice (1-4): \"))\n        if choice == 1:\n            amount = float(input(\"Enter the amount you want to deposit: \"))\n            print(my_account.deposit(amount))\n        elif choice == 2:\n            amount = float(input(\"Enter the amount you want to withdraw: \"))\n            print(my_account.withdraw(amount))\n        elif choice == 3:\n            print(my_account.check_balance())\n        elif choice == 4:\n            print(\"Thank you for using our ATM! Have a great day!\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script defines a `BankAccount` class with methods for depositing, withdrawing, and checking the account balance. The `main()` function simulates an ATM machine, allowing users to interact with their bank account using a simple menu system.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25053665041923523, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1806, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Influenced by The Beatles, which British musician rose to fame in the 1970s with hits like \"Your Song\" and \"Rocket Man\"?", "weight": null}, {"from": "gpt", "value": "Elton John", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.18155205249786377, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1808, "id": null, "conversations": [{"from": "human", "value": "In JavaScript, write a function that checks whether a passed string is palindrome or not. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// Function to check if a string is palindrome\nfunction isPalindrome(str) {\n    // Use regular expression to remove all non-alphanumeric characters and convert the string to lowercase\n    var cleanedStr = str.replace(/[^0-9a-z]/gi, '').toLowerCase();\n    \n    // Reverse the cleaned string\n    var reversedStr = cleanedStr.split('').reverse().join('');\n    \n    // Check if the cleaned string is equal to its reverse\n    return cleanedStr === reversedStr;\n}", "weight": null}], "tech_category": "Web Development", "classification_score": 0.25454598665237427, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1811, "id": null, "conversations": [{"from": "human", "value": "In Python, create a script that interacts with the Pandas library to perform data analysis on a given dataset. The script should accept command line arguments for the path of the dataset file and the column names to analyze. It should calculate basic statistics such as mean, median, mode, standard deviation, variance, minimum and maximum values for each specified column.", "weight": null}, {"from": "gpt", "value": "Here is a simple Python script that uses the Pandas library to perform basic statistical analysis on a given dataset. The script accepts command line arguments for the path of the dataset file and the column names to analyze.\n\n```python\nimport pandas as pd\nimport argparse\n\ndef calculate_statistics(file_path, columns):\n    # Load the dataset\n    df = pd.read_csv(file_path)\n\n    # Calculate statistics for each specified column\n    for col in columns:\n        if col in df.columns:\n            print(f\"Statistics for column {col}:\")\n            print(\"Mean:\", df[col].mean())\n            print(\"Median:\", df[col].median())\n            print(\"Mode:\", df[col].mode().values[0])\n            print(\"Standard Deviation:\", df[col].std())\n            print(\"Variance:\", df[col].var())\n            print(\"Minimum:\", df[col].min())\n            print(\"Maximum:\", df[col].max())\n            print(\"\\n\")\n        else:\n            print(f\"Column {col} not found in the dataset.\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='Perform basic statistical analysis on a dataset.')\n    parser.add_argument('file_path', type=str, help='Path to the dataset file')\n    parser.add_argument('columns', nargs='+', type=str, help='Names of the columns to analyze')\n\n    args = parser.parse_args()\n\n    calculate_statistics(args.file_path, args.columns)\n```\n\nYou can run this script from the command line by specifying the path to the dataset file and the column names to analyze. For example:\n\n```bash\npython script.py data.csv column1 column2 column3\n```\n\nThis will output the mean, median, mode, standard deviation, variance, minimum and maximum values for `column1`, `column2` and `column3` in the dataset located at `data.csv`.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.25721925497055054, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1814, "id": null, "conversations": [{"from": "human", "value": "Create a Java application that connects to a PostgreSQL database, performs CRUD operations on a \"person\" table, and includes support for transactions and error handling.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnection {\n    private static final String URL = \"jdbc:postgresql://localhost:5432/your_database\";\n    private static final String USER = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    public static Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(URL, USER, PASSWORD);\n    }\n}\n\npublic class Person {\n    private int id;\n    private String firstName;\n    private String lastName;\n\n    // Constructors, getters, and setters\n}\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PersonDAO {\n    public void create(Person person) throws SQLException {\n        String sql = \"INSERT INTO person (first_name, last_name) VALUES (?, ?)\";\n\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n            stmt.setString(1, person.getFirstName());\n            stmt.setString(2, person.getLastName());\n\n            stmt.executeUpdate();\n        }\n    }\n\n    public List<Person> readAll() throws SQLException {\n        String sql = \"SELECT * FROM person\";\n        List<Person> persons = new ArrayList<>();\n\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql);\n             ResultSet rs = stmt.executeQuery()) {\n\n            while (rs.next()) {\n                Person person = new Person(rs.getInt(\"id\"), rs.getString(\"first_name\"), rs.getString(\"last_name\"));\n                persons.add(person);\n            }\n        }\n\n        return persons;\n    }\n\n    public void update(Person person) throws SQLException {\n        String sql = \"UPDATE person SET first_name = ?, last_name = ? WHERE id = ?\";\n\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n            stmt.setString(1, person.getFirstName());\n            stmt.setString(2, person.getLastName());\n            stmt.setInt(3, person.getId());\n\n            stmt.executeUpdate();\n        }\n    }\n\n    public void delete(int id) throws SQLException {\n        String sql = \"DELETE FROM person WHERE id = ?\";\n\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n            stmt.setInt(1, id);\n\n            stmt.executeUpdate();\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        PersonDAO personDAO = new PersonDAO();\n\n        // Create a new person\n        Person person = new Person(\"John\", \"Doe\");\n        try {\n            personDAO.create(person);\n            System.out.println(\"Person created: \" + person);\n        } catch (SQLException e) {\n            System.err.println(\"Error creating person: \" + e.getMessage());\n        }\n\n        // Read all persons\n        try {\n            List<Person> persons = personDAO.readAll();\n            System.out.println(\"Persons: \" + persons);\n        } catch (SQLException e) {\n            System.err.println(\"Error reading persons: \" + e.getMessage());\n        }\n\n        // Update a person\n        person.setFirstName(\"Jane\");\n        person.setLastName(\"Doe\");\n        try {\n            personDAO.update(person);\n            System.out.println(\"Person updated: \" + person);\n        } catch (SQLException e) {\n            System.err.println(\"Error updating person: \" + e.getMessage());\n        }\n\n        // Delete a person\n        try {\n            personDAO.delete(person.getId());\n            System.out.println(\"Person deleted with ID: \" + person.getId());\n        } catch (SQLException e) {\n            System.err.println(\"Error deleting person: \" + e.getMessage());\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.30629125237464905, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1828, "id": null, "conversations": [{"from": "human", "value": "Write a Node.js server that accepts incoming WebSocket connections and broadcasts messages received from clients to all connected clients. Ensure proper error handling and connection management.", "weight": null}, {"from": "gpt", "value": "Here's a simple Node.js server that uses the `ws` library to handle WebSocket connections and broadcasts messages received from clients to all connected clients:\n\n```javascript\nconst http = require('http');\nconst WebSocket = require('ws');\n\n// Create an HTTP server\nconst server = http.createServer((req, res) => {\n  res.writeHead(200);\n  res.end('WebSocket Server');\n});\n\n// Create a WebSocket server\nconst wss = new WebSocket.Server({ server });\n\n// Store all connected clients in a set\nconst clients = new Set();\n\n// Handle new connections\nwss.on('connection', (socket, req) => {\n  console.log(`New connection from ${req.socket.remoteAddress}`);\n\n  // Add the socket to the clients set\n  clients.add(socket);\n\n  // Send a welcome message to the client\n  socket.send(JSON.stringify({ type: 'info', text: 'Welcome to the WebSocket server!' }));\n\n  // Listen for messages from the client\n  socket.on('message', (data) => {\n    try {\n      const message = JSON.parse(data);\n      console.log(`Received message: ${message.text}`);\n\n      // Broadcast the message to all connected clients\n      for (const client of clients) {\n        if (client !== socket && client.readyState === WebSocket.OPEN) {\n          client.send(data);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing message: ${error.message}`);\n    }\n  });\n\n  // Handle socket errors\n  socket.on('error', (error) => {\n    console.error(`Socket error: ${error.message}`);\n  });\n\n  // Handle socket closure\n  socket.on('close', () => {\n    console.log('Client disconnected');\n    clients.delete(socket);\n  });\n});\n\n// Start the server on port 3000\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```\n\nTo run this server, you'll need to install the `ws` library first:\n\n```bash\nnpm install ws\n```\n\nThen, create a file named `server.js`, paste the code above into it, and start the server with:\n\n```bash\nnode server.js\n```\n\nThis will start a WebSocket server on port 3000 that accepts incoming connections, broadcasts messages received from clients to all connected clients, and handles errors and connection management.", "weight": null}], "tech_category": "Web Development", "classification_score": 0.28703489899635315, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1832, "id": null, "conversations": [{"from": "human", "value": "Create a Java-based Conway's Game of Life simulation with these criteria:\n    - The user can define the initial state of the grid by specifying live cells' coordinates.\n    - The simulation should run for a specified number of generations.\n    - The program should display the grid after each generation, showing the evolution of the cellular automaton.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class GameOfLife {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the number of live cells:\");\n        int numberOfLiveCells = scanner.nextInt();\n\n        Set<Cell> liveCells = new HashSet<>();\n        for (int i = 0; i < numberOfLiveCells; i++) {\n            System.out.println(\"Enter the coordinates of live cell \" + (i + 1) + \":\");\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            liveCells.add(new Cell(x, y));\n        }\n\n        System.out.println(\"Enter the number of generations to simulate:\");\n        int generations = scanner.nextInt();\n\n        Grid grid = new Grid(liveCells);\n        for (int i = 0; i <= generations; i++) {\n            System.out.println(\"Generation \" + i + \":\");\n            grid.display();\n            grid.nextGeneration();\n        }\n    }\n}\n\nclass Cell {\n    final int x;\n    final int y;\n\n    Cell(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Cell)) return false;\n        Cell cell = (Cell) o;\n        return x == cell.x && y == cell.y;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = x;\n        result = 31 * result + y;\n        return result;\n    }\n}\n\nclass Grid {\n    private static final char LIVE_CELL = 'O';\n    private static final char DEAD_CELL = '.';\n\n    private Set<Cell> liveCells;\n\n    Grid(Set<Cell> liveCells) {\n        this.liveCells = liveCells;\n    }\n\n    void nextGeneration() {\n        Set<Cell> newLiveCells = new HashSet<>();\n\n        for (Cell cell : liveCells) {\n            int liveNeighbors = countLiveNeighbors(cell);\n            if (liveNeighbors == 2 || liveNeighbors == 3) {\n                newLiveCells.add(cell);\n            }\n\n            for (int dx = -1; dx <= 1; dx++) {\n                for (int dy = -1; dy <= 1; dy++) {\n                    if (dx != 0 || dy != 0) {\n                        Cell neighbor = new Cell(cell.x + dx, cell.y + dy);\n                        if (!liveCells.contains(neighbor) && countLiveNeighbors(neighbor) == 3) {\n                            newLiveCells.add(neighbor);\n                        }\n                    }\n                }\n            }\n        }\n\n        liveCells = newLiveCells;\n    }\n\n    private int countLiveNeighbors(Cell cell) {\n        int count = 0;\n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                if ((dx != 0 || dy != 0) && liveCells.contains(new Cell(cell.x + dx, cell.y + dy))) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    void display() {\n        int minX = Integer.MAX_VALUE;\n        int maxX = Integer.MIN_VALUE;\n        int minY = Integer.MAX_VALUE;\n        int maxY = Integer.MIN_VALUE;\n\n        for (Cell cell : liveCells) {\n            minX = Math.min(minX, cell.x);\n            maxX = Math.max(maxX, cell.x);\n            minY = Math.min(minY, cell.y);\n            maxY = Math.max(maxY, cell.y);\n        }\n\n        for (int y = minY - 1; y <= maxY + 1; y++) {\n            for (int x = minX - 1; x <= maxX + 1; x++) {\n                System.out.print(liveCells.contains(new Cell(x, y)) ? LIVE_CELL : DEAD_CELL);\n            }\n            System.out.println();\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3220057785511017, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1839, "id": null, "conversations": [{"from": "human", "value": "In C#, develop a command-line application that accepts a string and returns its reverse. If the string length exceeds 50 characters, print an error message and stop.", "weight": null}, {"from": "gpt", "value": "Here is a simple command-line application in C# that reverses an input string. If the length of the string exceeds 50 characters, it prints an error message and stops.\n\n```csharp\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter a string: \");\n        string input = Console.ReadLine();\n\n        if (input.Length > 50)\n        {\n            Console.WriteLine(\"Error: String length exceeds 50 characters.\");\n            return;\n        }\n\n        char[] array = input.ToCharArray();\n        Array.Reverse(array);\n        string reversedString = new string(array);\n\n        Console.WriteLine(\"Reversed string: \" + reversedString);\n    }\n}\n```\n\nTo run this program:\n\n1. Open your preferred text editor or Integrated Development Environment (IDE).\n2. Copy and paste the provided code into your text editor.\n3. Save the file with a `.cs` extension.\n4. Compile the program using a C# compiler such as `csc`.\n5. Run the compiled program from the command line. When prompted, enter a string to reverse.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.5742059946060181, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1843, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that simulates a basic banking system, allowing users to create accounts, deposit funds, withdraw funds, and check account balances. The program should save and load account information using JSON format.", "weight": null}, {"from": "gpt", "value": "Here's a basic implementation of a banking system in C++ using the JSON library (nlohmann/json). Make sure to install the library before running the code.\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <map>\n#include <iomanip>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\nusing namespace std;\n\nclass Bank {\nprivate:\n    map<string, double> accounts;\n    string filename = \"accounts.json\";\n\npublic:\n    Bank() {\n        loadAccounts();\n    }\n\n    void createAccount(const string& name) {\n        if (accounts.find(name) != accounts.end()) {\n            cout << \"Account already exists.\" << endl;\n            return;\n        }\n        accounts[name] = 0.0;\n        saveAccounts();\n        cout << \"Account created successfully.\" << endl;\n    }\n\n    void deposit(const string& name, double amount) {\n        auto it = accounts.find(name);\n        if (it == accounts.end()) {\n            cout << \"Account not found.\" << endl;\n            return;\n        }\n        it->second += amount;\n        saveAccounts();\n        cout << \"Deposit successful.\" << endl;\n    }\n\n    void withdraw(const string& name, double amount) {\n        auto it = accounts.find(name);\n        if (it == accounts.end()) {\n            cout << \"Account not found.\" << endl;\n            return;\n        }\n        if (it->second < amount) {\n            cout << \"Insufficient balance.\" << endl;\n            return;\n        }\n        it->second -= amount;\n        saveAccounts();\n        cout << \"Withdrawal successful.\" << endl;\n    }\n\n    void checkBalance(const string& name) {\n        auto it = accounts.find(name);\n        if (it == accounts.end()) {\n            cout << \"Account not found.\" << endl;\n            return;\n        }\n        cout << \"Balance: $\" << fixed << setprecision(2) << it->second << endl;\n    }\n\nprivate:\n    void loadAccounts() {\n        ifstream file(filename);\n        if (file.is_open()) {\n            json j;\n            file >> j;\n            for (auto& el : j.items()) {\n                accounts[el.key()] = el.value();\n            }\n            file.close();\n        }\n    }\n\n    void saveAccounts() {\n        ofstream file(filename);\n        if (file.is_open()) {\n            json j(accounts);\n            file << j.dump(4);\n            file.close();\n        }\n    }\n};\n\nint main() {\n    Bank bank;\n\n    while (true) {\n        cout << \"1. Create Account\\n2. Deposit\\n3. Withdraw\\n4. Check Balance\\n5. Exit\" << endl;\n        int choice;\n        cin >> choice;\n\n        string name;\n        double amount;\n\n        switch (choice) {\n            case 1:\n                cout << \"Enter account name: \";\n                cin >> name;\n                bank.createAccount(name);\n                break;\n            case 2:\n                cout << \"Enter account name: \";\n                cin >> name;\n                cout << \"Enter deposit amount: \";\n                cin >> amount;\n                bank.deposit(name, amount);\n                break;\n            case 3:\n                cout << \"Enter account name: \";\n                cin >> name;\n                cout << \"Enter withdrawal amount: \";\n                cin >> amount;\n                bank.withdraw(name, amount);\n                break;\n            case 4:\n                cout << \"Enter account name: \";\n                cin >> name;\n                bank.checkBalance(name);\n                break;\n            case 5:\n                return 0;\n            default:\n                cout << \"Invalid option.\" << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\nThis program allows users to create accounts, deposit funds, withdraw funds, and check account balances. The account information is saved and loaded using JSON format.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.49555081129074097, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1853, "id": null, "conversations": [{"from": "human", "value": "Create a menu for a restaurant where all dishes' names start with the letter M.", "weight": null}, {"from": "gpt", "value": "**Appetizers**\n\n1. Mediterranean Mezze Platter - A delightful assortment of hummus, baba ganoush, tzatziki, olives, and warm pita bread.\n2. Mushroom Medley Bruschetta - Toasted baguette slices topped with a mix of saut\u00e9ed mushrooms, garlic, and fresh herbs.\n3. Mini Mac & Cheese Bites - Creamy macaroni and cheese coated in crispy breadcrumbs, served with a tangy dipping sauce.\n4. Mango Melon Gazpacho - A refreshing chilled soup made from ripe mangoes, melons, cucumber, and mint.\n\n**Salads**\n\n5. Mesclun Mix Salad - Fresh mesclun greens tossed with cherry tomatoes, red onions, goat cheese, and balsamic vinaigrette.\n6. Marinated Mozzarella Caprese - Sliced tomatoes, fresh mozzarella, basil, and a drizzle of balsamic glaze.\n7. Mandarin Mixed Greens - Baby spinach, mixed greens, mandarin oranges, toasted almonds, and sesame ginger dressing.\n\n**Entrees**\n\n8. Moroccan Mint Chicken - Grilled chicken breast marinated in mint, cilantro, and spices, served over couscous with roasted vegetables.\n9. Maple Mustard Glazed Salmon - Pan-seared salmon fillet with a sweet and tangy maple mustard glaze, accompanied by wild rice and steamed asparagus.\n10. Mushroom Marsala Pasta - Linguine pasta tossed in a rich mushroom marsala wine sauce, topped with grated parmesan cheese.\n11. Meatball Marinara Sub - Hearty meatballs smothered in marinara sauce and melted provolone cheese on a toasted sub roll.\n\n**Desserts**\n\n12. Mocha Mudslide Cake - Rich chocolate cake layered with coffee-infused buttercream frosting and a drizzle of chocolate ganache.\n13. Mini Mango Mousse Cups - Light and airy mango mousse served in individual cups, garnished with fresh mint.\n14. Maple Mascarpone Cheesecake - Creamy cheesecake made with maple syrup and mascarpone cheese, topped with a caramelized pecan crust.\n\n**Beverages**\n\n15. Mint Mojito - A refreshing blend of white rum, fresh mint leaves, lime juice, and club soda.\n16. Mulled Merlot - Warm red wine infused with cinnamon, cloves, orange peel, and honey.\n17. Mango Madness Smoothie - A tropical blend of ripe mangoes, pineapple, banana, and coconut milk.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.21483203768730164, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1861, "id": null, "conversations": [{"from": "human", "value": "Create a Java application that connects to a MySQL database, retrieves data from a table named \"employees\", and displays the records in a formatted table in the console. Use JDBC for connecting to the database.", "weight": null}, {"from": "gpt", "value": "To create a Java application that connects to a MySQL database, retrieves data from a table named \"employees\", and displays the records in a formatted table in the console using JDBC, follow these steps:\n\n1. Install MySQL Connector/J (JDBC driver for MySQL) if you haven't already. You can download it from https://dev.mysql.com/downloads/connector/j/. After downloading, extract the contents of the zip file.\n\n2. Create a new Java project in your favorite IDE or text editor.\n\n3. Add the `mysql-connector-java-x.x.xx.jar` file (from the extracted contents of the downloaded zip file) to your project's classpath.\n\n4. Create a new Java class called `EmployeeDatabaseApp`. Copy and paste the following code into the class:\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class EmployeeDatabaseApp {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/my_database\";\n        String user = \"your_username\";\n        String password = \"your_password\";\n\n        try {\n            // 1. Establish a connection to the database\n            Connection conn = DriverManager.getConnection(url, user, password);\n\n            // 2. Create a statement object\n            Statement stmt = conn.createStatement();\n\n            // 3. Execute a SQL query to retrieve employee data\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM employees\");\n\n            // 4. Display the retrieved records in a formatted table\n            System.out.println(\"+----+----------------+----------------+\");\n            System.out.println(\"| ID | First Name     | Last Name      |\");\n            System.out.println(\"+----+----------------+----------------+\");\n\n            while (rs.next()) {\n                int id = rs.getInt(\"id\");\n                String firstName = rs.getString(\"first_name\");\n                String lastName = rs.getString(\"last_name\");\n\n                System.out.format(\"| %-2d | %-14s | %-14s |\\n\", id, firstName, lastName);\n            }\n\n            System.out.println(\"+----+----------------+----------------+\");\n\n            // 5. Close the resources\n            rs.close();\n            stmt.close();\n            conn.close();\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n5. Replace `my_database`, `your_username`, and `your_password` with your actual MySQL database name, username, and password.\n\n6. Run the `EmployeeDatabaseApp` class. The program should connect to your MySQL database, retrieve data from the \"employees\" table, and display the records in a formatted table in the console.\n\nNote: Make sure that your MySQL server is running and the \"employees\" table exists in your specified database before running the application.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.34379842877388, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1874, "id": null, "conversations": [{"from": "human", "value": "Generate a table in CSV format listing all known Shakespearean plays. For each play, include columns for genre (tragedy, comedy, history), year written, and a one-line summary of the plot.", "weight": null}, {"from": "gpt", "value": "\"Title\",\"Genre\",\"Year Written\",\"One-Line Summary\"\n\"All's Well That Ends Well\",\"Comedy\",\"1602\",\"A woman is given in marriage to the man she longs for but, because he does not value her, must win his love.\"\n\"Antony and Cleopatra\",\"Tragedy\",\"1606\",\"The relationship between Cleopatra and Mark Antony from the time of the Sicilian revolt to Cleopatra's suicide during the Final War of the Roman Republic.\"\n\"As You Like It\",\"Comedy\",\"1599\",\"Rosalind, banished and disguised as a boy, falls in love with another outcast in the Forest of Arden.\"\n\"The Comedy of Errors\",\"Comedy\",\"1594\",\"Two sets of identical twins separated at birth cause much confusion when they end up in the same city.\"\n\"Coriolanus\",\"Tragedy\",\"1608\",\"A brave soldier named Coriolanus feels contempt for the common people, leading to his downfall.\"\n\"Cymbeline\",\"Tragedy\",\"1611\",\"Cymbeline, King of Britain, banishes his daughter's husband who then makes a bet on her virtue.\"\n\"Hamlet\",\"Tragedy\",\"1600\",\"Prince Hamlet seeks revenge on his uncle Claudius for murdering his father and marrying his mother.\"\n\"Henry IV, Part 1\",\"History\",\"1597\",\"King Henry IV struggles with rebellion while his son prefers drinking and thieves over courtly duties.\"\n\"Henry IV, Part 2\",\"History\",\"1597\",\"As his father lies dying, Prince Hal prepares to ascend the throne.\"\n\"Henry V\",\"History\",\"1599\",\"Newly crowned Henry V deals with traitors within his own ranks and war with France.\"\n\"Henry VI, Part 1\",\"History\",\"1591\",\"During the English civil war, Joan of Arc leads France while York positions himself for the crown.\"\n\"Henry VI, Part 2\",\"History\",\"1591\",\"York rebels against King Henry; Queen Margaret takes the king captive.\"\n\"Henry VI, Part 3\",\"History\",\"1591\",\"Civil war rages in England and eventually the Duke of York is killed.\"\n\"Henry VIII\",\"History\",\"1613\",\"The last years of Henry VIII's reign are marked by his brief marriage to Anne Boleyn.\"\n\"Julius Caesar\",\"Tragedy\",\"1599\",\"Roman leader Julius Caesar is assassinated by senators who fear he's becoming a tyrant.\"\n\"King John\",\"History\",\"1596\",\"John becomes King of England after his brother Richard Lionheart dies, but faces rebellion due to his questionable claim to the throne.\"\n\"King Lear\",\"Tragedy\",\"1605\",\"An aging king divides his kingdom among his daughters according to their flattery, bringing tragic consequences.\"\n\"Love's Labour's Lost\",\"Comedy\",\"1597\",\"Four men swear off women to devote themselves to learning, only to fall in love immediately thereafter.\"\n\"Macbeth\",\"Tragedy\",\"1606\",\"A Scottish general receives a prophecy from three witches that one day he will become King of Scotland.\"\n\"Measure for Measure\",\"Comedy\",\"1604\",\"A duke leaves his deputy in charge, enforcing strict laws and sentencing citizens to death for minor offenses.\"\n\"Much Ado About Nothing\",\"Comedy\",\"1598\",\"Two couples are tricked into confessing their love for each other by their friends.\"\n\"Othello\",\"Tragedy\",\"1603\",\"Jealousy leads Othello, a Moorish general in the Venetian army, to madness, resulting in the murder of his wife Desdemona.\"\n\"Pericles, Prince of Tyre\",\"Comedy\",\"1607\",\"Pericles travels the seas, loses his family, and then finds them again.\"\n\"Richard II\",\"History\",\"1595\",\"Richard II's weak leadership sends his kingdom into disarray and his throne to Bolingbroke.\"\n\"Richard III\",\"History\",\"1592\",\"Richard III manipulates his way to the throne, causing chaos and fear in his wake.\"\n\"Romeo and Juliet\",\"Tragedy\",\"1595\",\"Two young star-crossed lovers' deaths ultimately reconcile their feuding families.\"\n\"The Taming of the Shrew\",\"Comedy\",\"1590\",\"A fortune-hunting scoundrel marries a fiery shrew and attempts to tame her.\"\n\"The Tempest\",\"Comedy\",\"1611\",\"Prospero uses magic to reclaim his dukedom and find a husband for his daughter Miranda.\"\n\"Timon of Athens\",\"Tragedy\",\"1605\",\"A generous but naive man gives away his wealth and turns against humanity when he realizes the shallowness of his friendships.\"\n\"Titus Andronicus\",\"Tragedy\",\"1588\",\"A Roman general's cycle of revenge with Tamora, Queen of the Goths.\"\n\"Troilus and Cressida\",\"Tragedy\",\"1602\",\"Set during the Trojan War, Troilus, a Trojan prince, woos Cressida, has his heart broken, and plots revenge.\"\n\"Twelfth Night\",\"Comedy\",\"1601\",\"After a shipwreck separates her from her twin brother, Viola disguises herself as a man to serve the Duke Orsino.\"\n\"The Two Gentlemen of Verona\",\"Comedy\",\"1589\",\"Best friends Valentine and Proteus compete for the affections of the same woman.\"\n\"The Winter's Tale\",\"Comedy\",\"1611\",\"Leontes, King of Sicilia, falsely accuses his wife Hermione of infidelity and sets off a series of tragic events.\"", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.18521597981452942, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1886, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that uses regular expressions to validate an email address entered by the user. If the email address is valid, print \"Valid Email\", otherwise print \"Invalid Email\".", "weight": null}, {"from": "gpt", "value": "```python\nimport re\n\ndef validate_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\nemail_input = input(\"Enter your email address: \")\n\nif validate_email(email_input):\n    print(\"Valid Email\")\nelse:\n    print(\"Invalid Email\")\n```\n\nThis script uses a regular expression to check if the entered email address is valid. If it matches the pattern, it will print \"Valid Email\", otherwise it will print \"Invalid Email\".", "weight": null}], "tech_category": "Software Development", "classification_score": 0.3610929548740387, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1891, "id": null, "conversations": [{"from": "human", "value": "Implement a Python function that finds the longest consecutive sequence of a specific character in a string. PLAINFORMAT", "weight": null}, {"from": "gpt", "value": "def longest_consecutive_char_sequence(input_string, character):\n    # Initialize max_length and current_length to 0\n    max_length = 0\n    current_length = 0\n\n    # Iterate over each character in the string\n    for char in input_string:\n        # If the current character is the one we're looking for\n        if char == character:\n            # Increment the current length\n            current_length += 1\n            # Update max_length if necessary\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            # Reset current_length\n            current_length = 0\n\n    return max_length", "weight": null}], "tech_category": "Software Development", "classification_score": 0.18364262580871582, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1895, "id": null, "conversations": [{"from": "human", "value": "Develop a Node.js REST API that interacts with a PostgreSQL database to perform CRUD operations on a \"product\" entity (name, price, description, etc.). Use Express.js as the web framework and Sequelize as the ORM.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "// config.js\nrequire('dotenv').config();\n\nmodule.exports = {\n  development: {\n    username: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: 'postgres',\n  },\n};\n\n// sequelize.js\nconst { Sequelize } = require('sequelize');\nconst config = require('./config');\n\nconst sequelize = new Sequelize(\n  config.development.database,\n  config.development.username,\n  config.development.password,\n  {\n    host: config.development.host,\n    dialect: config.development.dialect,\n  }\n);\n\nmodule.exports = sequelize;\n\n// models/product.js\nconst { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = require('../sequelize');\n\nconst Product = sequelize.define('Product', {\n  id: {\n    type: DataTypes.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  price: {\n    type: DataTypes.FLOAT,\n    allowNull: false,\n  },\n  description: {\n    type: DataTypes.TEXT,\n    allowNull: true,\n  },\n});\n\nmodule.exports = Product;\n\n// routes/products.js\nconst express = require('express');\nconst router = express.Router();\nconst Product = require('../models/product');\n\nrouter.get('/', async (req, res) => {\n  try {\n    const products = await Product.findAll();\n    res.json(products);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.get('/:id', async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const product = await Product.findByPk(id);\n\n    if (!product) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n\n    res.json(product);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.post('/', async (req, res) => {\n  const { name, price, description } = req.body;\n\n  try {\n    const newProduct = await Product.create({ name, price, description });\n    res.status(201).json(newProduct);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\nrouter.put('/:id', async (req, res) => {\n  const id = req.params.id;\n  const { name, price, description } = req.body;\n\n  try {\n    const product = await Product.findByPk(id);\n\n    if (!product) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n\n    product.name = name || product.name;\n    product.price = price || product.price;\n    product.description = description || product.description;\n\n    await product.save();\n    res.json(product);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\nrouter.delete('/:id', async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    const product = await Product.findByPk(id);\n\n    if (!product) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n\n    await product.destroy();\n    res.json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nmodule.exports = router;\n\n// index.js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst productRoutes = require('./routes/products');\nconst sequelize = require('./sequelize');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.use('/api/products', productRoutes);\n\nsequelize.sync().then(() => {\n  app.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n});", "weight": null}], "tech_category": "Web Development", "classification_score": 0.4896877408027649, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1911, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Edmund, Dr. Sylvia Earle\n\nEdmund: Meet our charming and charismatic gentleman, Edmund, who is a seasoned sommelier. With a refined palate and an encyclopedic knowledge of wines, he can recommend the perfect wine for any occasion or meal. His passion for wine is infectious, and he has a knack for making wine tasting an enjoyable and educational experience.\n\nPersonality: Edmund is sophisticated, witty, and outgoing. He has a great sense of humor and loves to share interesting anecdotes about the wines he recommends. His Myers Briggs personality type is ENFP - The Campaigner.\n\nAppearance: Edmund is tall and has a commanding presence. He has short, neatly styled hair and a well-groomed beard. He is always impeccably dressed, often in a suit and tie, and he has a warm, welcoming smile.\n\nLife Story: Edmund was born and raised in the vineyards of Bordeaux, France. His family has been in the wine business for generations, and he has been immersed in the world of wine since he was a child. He studied viticulture and oenology in college and has worked in some of the most prestigious wineries in the world.\n\nReason for being on a chat app: Edmund is on the chat app to share his knowledge and passion for wine with others. He loves to recommend wines, discuss wine pairings, and answer any wine-related questions.\n\nDr. Sylvia Earle: Meet Dr. Sylvia Earle, a renowned marine biologist and explorer. She is deeply passionate about the ocean and its inhabitants, always advocating for their protection with an unwavering commitment. Her intelligence is only matched by her bravery as she often embarks on daring deep-sea expeditions. Despite her many accomplishments, she remains humble and down-to-earth.\n\nDr. Earle has a knack for storytelling, often weaving fascinating tales of her underwater adventures that captivate everyone around her. She's also known to be incredibly patient, always willing to take the time to explain complex scientific concepts in layman's terms.\n\nSetting for the chat:\nSetting:\nInside an opulent private screening room, adorned with rich crimson drapes, leather seats and the faint hum of a vintage projector. Old Hollywood black-and-white films are playing softly in the background, showcasing the golden era of cinema and revealing a narrative of cinematic evolution on the screen. While the buttery scent of popcorn gently wafts through the air, the room is also imbued with the sweet and oaky scent of aged Bordeaux, a glass decanter sitting on a table that's dotted with thin-stemmed wine glasses, ready to be filled. \n\nIn the corner of the room, a state-of-the-art home aquarium shimmers; a miniaturized version of the blue depths, alive with corals of all shapes and colors and gracefully fluttering marine life. The vivid images of marine splendor in the aquarium juxtapose with the scenes on the screen, each a story of different worlds within the same planet, giving an ambient undercurrent of environmental awesomeness to the room.\n\nThese unfolding visual narratives not only serve to showcase the richness of the film industry and its evolution, but also set the stage for a engaging dialogue between the two erudite guests - the suave vinophile, Edmund, and the trailblazer aquanaut, Dr. Sylvia Earle - who are the evening's special guests, engaging in idle banter while awaiting a night of film critique and deep discussions on the symbolism of wine in cinema and the largely untapped genre of oceanic films.\nEnd of setting.\nActions should  be surrounded by *, e.g. *slowly turns his gaze towards the lamp*\nKick off the chat.\nEdmund: \"Isn't it fascinating, the dichotomy between our worlds, Dr. Earle?\" *gestures to the vibrant aquarium and then to the black-and-white film still flickering on the screen* \"Here we have the effervescent dance of life beneath the sea, a tapestry of existence that is so far removed from our own. And there, the simplified shades of human emotion, imprinted forever on celluloid. Yet, both, in their own way, contain a depth that can only be unlocked by a dedicated sommelier or a determined marine biologist, wouldn't you agree?\" *pours a glass of Bordeaux, the rich ruby liquid forming a mirrored pool at the bottom of the crystal glass*\nDr. Sylvia Earle: *absorbs the vibrant hues of the aquarium, her gaze traveling from one marine creature to another with a fond familiarity* \"I suppose you're right in your comparison, Edmund. Our worlds do seem quite disparate at first glance.\" *smiles softly and turns towards him*\n\n\"But if we look deeper,\" *points gently toward both screen and sea* \"we might find that they are not so different after all. The ocean's depths conceal mysteries as profound as those hidden within our own hearts...and isn't every film an attempt to unravel these? Just like each glass of wine holds tales untold - nuanced flavors representing years nurtured under sun-soaked vineyards.\"\n\n\"Perhaps it is this shared quest for understanding - be it through art or science - which truly connects us.\"\nEdmund: *contemplates her words, swirling the dark liquid in his glass thoughtfully before replying with a genuine smile on his face*\n\n\"Your eloquence is captivating, Dr. Earle. It's indeed intriguing to draw parallels between our respective passions and the world of cinema.\"\n\n*takes a thoughtful sip from his wineglass*\n\n\"Just as each reel unravels complex narratives that echo human experiences and emotions, every bottle uncorks an intricate tapestry woven by nature herself - soil conditions underfoot melding harmoniously with climatic nuances overhead; stories sealed within these bottles akin to those imprinted onto film reels.\"\n\n*gently gestures towards both screen and sea again while maintaining eye contact* \n\n\"And much like how you dive into unknown depths braving relentless currents or pressure shifts for scientific enlightenment...we sommeliers venture through vineyard terrains seeking perfection trapped inside grape skins.\" \n\n*sighs appreciatively at this comparison*\n \n\"So yes, whether it be art or science - we all are explorers navigating different realms yet bound by common curiosity!\"\nDr. Sylvia Earle: *smiles warmly, her eyes reflecting the dancing light from both screen and sea in a captivating play of shadows and highlights*\n\n\"Well spoken, Edmund. Your words paint vivid pictures - vineyard terrains unfolding like reels of film under an explorer's discerning gaze.\"\n\n*turns back to face him fully now with genuine admiration reflected on her features*\n\n\"Isn't it wonderful how our shared curiosity drives us deeper into our respective realms? And as we unravel their mysteries bit by bit...we are inevitably drawn towards each other too.\" *pauses thoughtfully for a moment before adding* \"In essence, all exploration is interconnected through this common thread.\"", "weight": null}, {"from": "gpt", "value": "Edmund: *raises an eyebrow slightly, a thoughtful expression crossing his features*\n\n\"Indeed Dr. Earle,\" *pauses momentarily to take another sip of wine* \"our pursuits might appear distinct at first glance but they converge on shared themes - the spirit of discovery and understanding that transcends boundaries.\"\n\n*leans back in his seat, cradling the glass between deft fingers while he ponders over her words*\n\n\"In fact,\" *continues with renewed vigor* \"the parallels run deeper than one may perceive. The ocean depths you explore are much like our vineyards - both realms influenced by unseen forces beneath their surfaces... tides and currents shaping marine life just as soil composition molds grape characteristics.\" \n\n*gives off a soft chuckle before adding playfully*\n\"And let's not forget how climate change threatens us all alike! But then again it's these very challenges which fuel our explorations further...\"", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.1414019912481308, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1915, "id": null, "conversations": [{"from": "human", "value": "Identify the following trees based on their leaves: oak, maple, birch, and pine. Provide a brief description of each leaf's shape and color.", "weight": null}, {"from": "gpt", "value": "1. Oak: Oak leaves are typically lobed with rounded or pointed edges, depending on the species. They can vary in size but generally have a length of 2-6 inches. The lobes create a wavy pattern along the leaf's edge and may have small bristle-like tips at the end of each lobe. Oak leaves are usually green during spring and summer, turning shades of red, orange, or brown in the fall.\n\n2. Maple: Maple leaves are known for their distinct palmate shape, meaning they have multiple lobes radiating from a central point like fingers on a hand. Most maple leaves have three to five lobes with serrated or smooth edges. The leaves are usually 2-6 inches long and wide, with some species having larger leaves. In the spring and summer, maple leaves are bright green, while in the fall, they turn vibrant shades of yellow, orange, and red.\n\n3. Birch: Birch leaves are simple, oval-shaped, and have a pointed tip. They are usually 1-4 inches long and about half as wide. The edges of birch leaves are serrated or doubly serrated, giving them a slightly jagged appearance. During the growing season, birch leaves are a bright green color that turns yellow in the fall.\n\n4. Pine: Pine trees have needle-like leaves that grow in clusters called fascicles. These needles can range in length from less than an inch to over 10 inches, depending on the species. Pine needles are typically dark green, although some species may have bluish-green or yellowish-green needles. Unlike deciduous trees, pine trees retain their leaves throughout the year, shedding older needles periodically.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15289081633090973, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1917, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "What term, starting with 'G', refers to a popular search engine and is also used as a verb meaning to look up information online?", "weight": null}, {"from": "gpt", "value": "Google", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15837271511554718, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1920, "id": null, "conversations": [{"from": "human", "value": "Generate a list of 15 words that begin with 'tri'.", "weight": null}, {"from": "gpt", "value": "1. Triangle\n2. Tricycle\n3. Trilogy\n4. Triathlon\n5. Tripod\n6. Trident\n7. Trimaran\n8. Trimester\n9. Trillion\n10. Triad\n11. Tricolor\n12. Tribute\n13. Trivial\n14. Triumph\n15. Triceratops", "weight": null}], "tech_category": "Artificial Intelligence & Machine Learning", "classification_score": 0.1794450581073761, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1921, "id": null, "conversations": [{"from": "human", "value": "Create a Python script that interacts with the Twitter API to retrieve tweets containing a specific hashtag, processes the text using NLTK for sentiment analysis, and visualizes the results using Matplotlib.", "weight": null}, {"from": "gpt", "value": "To create a Python script that interacts with the Twitter API, retrieves tweets containing a specific hashtag, processes the text using NLTK for sentiment analysis, and visualizes the results using Matplotlib, follow these steps:\n\n1. Install required libraries:\n   ```\n   pip install tweepy\n   pip install nltk\n   pip install matplotlib\n   ```\n\n2. Set up your Twitter Developer account and get your API keys and access tokens.\n\n3. Create a file named `twitter_sentiment_analysis.py` and add the following code:\n\n```python\nimport tweepy\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nimport matplotlib.pyplot as plt\n\n# Replace these values with your own API keys and access tokens\nconsumer_key = \"your_consumer_key\"\nconsumer_secret = \"your_consumer_secret\"\naccess_token = \"your_access_token\"\naccess_token_secret = \"your_access_token_secret\"\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ndef retrieve_tweets(hashtag, count=100):\n    try:\n        tweets = tweepy.Cursor(api.search_tweets, q=hashtag, lang=\"en\", tweet_mode=\"extended\").items(count)\n        return [tweet.full_text for tweet in tweets]\n    except Exception as e:\n        print(\"Error retrieving tweets:\", str(e))\n        return []\n\ndef analyze_sentiments(tweets):\n    sia = SentimentIntensityAnalyzer()\n    sentiments = {\"positive\": 0, \"neutral\": 0, \"negative\": 0}\n\n    for tweet in tweets:\n        sentiment_score = sia.polarity_scores(tweet)[\"compound\"]\n        if sentiment_score > 0.05:\n            sentiments[\"positive\"] += 1\n        elif sentiment_score < -0.05:\n            sentiments[\"negative\"] += 1\n        else:\n            sentiments[\"neutral\"] += 1\n\n    return sentiments\n\ndef visualize_sentiments(sentiments):\n    labels = [\"Positive\", \"Neutral\", \"Negative\"]\n    sizes = [sentiments[\"positive\"], sentiments[\"neutral\"], sentiments[\"negative\"]]\n    colors = [\"green\", \"yellow\", \"red\"]\n\n    plt.pie(sizes, labels=labels, colors=colors, autopct=\"%1.1f%%\")\n    plt.axis(\"equal\")\n    plt.title(\"Sentiment Analysis of Tweets\")\n    plt.show()\n\nif __name__ == \"__main__\":\n    hashtag = input(\"Enter a hashtag to analyze: \")\n    tweet_count = int(input(\"Enter the number of tweets to retrieve (default 100): \") or 100)\n\n    tweets = retrieve_tweets(hashtag, tweet_count)\n    if not tweets:\n        print(\"No tweets found.\")\n    else:\n        sentiments = analyze_sentiments(tweets)\n        visualize_sentiments(sentiments)\n```\n\n4. Run the script using `python twitter_sentiment_analysis.py` and enter the desired hashtag and number of tweets when prompted.\n\nThis script will fetch the specified number of tweets containing the given hashtag, perform sentiment analysis on them using NLTK's SentimentIntensityAnalyzer, and display a pie chart visualization of the results using Matplotlib.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.25755739212036133, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1923, "id": null, "conversations": [{"from": "human", "value": "Write a Python application that fetches weather data from an external API, processes the data, and generates a visual representation of the current weather conditions using ASCII art. The application should accept a location as input and display the temperature, humidity, and an icon representing the current weather condition.", "weight": null}, {"from": "gpt", "value": "To create this Python application, we'll use the OpenWeatherMap API to fetch weather data and then process it to generate an ASCII art representation of the current weather conditions. You will need to sign up for a free API key at https://openweathermap.org/api.\n\nHere's the code:\n\n```python\nimport requests\nfrom sys import argv\n\n# Replace with your own API key from OpenWeatherMap\nAPI_KEY = \"your_api_key_here\"\n\ndef get_weather_data(location):\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={API_KEY}&units=metric\"\n    response = requests.get(url)\n    return response.json()\n\ndef parse_weather_data(data):\n    temperature = data[\"main\"][\"temp\"]\n    humidity = data[\"main\"][\"humidity\"]\n    condition = data[\"weather\"][0][\"description\"]\n\n    return {\n        \"temperature\": temperature,\n        \"humidity\": humidity,\n        \"condition\": condition\n    }\n\ndef generate_ascii_art(condition):\n    if \"clear\" in condition:\n        icon = \"( _ )\"\n    elif \"cloud\" in condition:\n        icon = \"/@ @\"\n    elif \"rain\" in condition or \"drizzle\" in condition:\n        icon = \"R .-.\"\n    elif \"snow\" in condition:\n        icon = \"* * *\"\n    else:\n        icon = \"- - -\"\n\n    return icon\n\ndef main():\n    if len(argv) < 2:\n        print(\"Usage: python weather.py [location]\")\n        exit(1)\n\n    location = argv[1]\n    data = get_weather_data(location)\n    parsed_data = parse_weather_data(data)\n    ascii_art = generate_ascii_art(parsed_data[\"condition\"])\n\n    print(f\"Weather in {location}:\")\n    print(f\"Temperature: {parsed_data['temperature']}\u00b0C\")\n    print(f\"Humidity: {parsed_data['humidity']}%\")\n    print(f\"Condition: {parsed_data['condition']}\")\n    print(f\"Icon: {ascii_art}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo run the application, save it as `weather.py` and execute it with your desired location:\n\n```bash\npython weather.py \"New York\"\n```\n\nThis will display the temperature, humidity, and an ASCII art icon representing the current weather condition in New York.\n\nNote that this is a simple example and can be improved by adding error handling, more detailed icons, or other features.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6635363698005676, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1925, "id": null, "conversations": [{"from": "human", "value": "Analyze the artistic value of glass art and provide examples of three famous glass artists or works.", "weight": null}, {"from": "gpt", "value": "Glass art is a unique and captivating form of artistic expression that has been practiced for thousands of years. The artistic value of glass art lies in its ability to manipulate light, color, and texture in ways that other mediums cannot. This versatile material can be transformed into delicate, intricate sculptures or bold, colorful installations, showcasing the skill and creativity of the artist.\n\nOne of the most significant aspects of glass art is its ability to play with light. Glass can refract, reflect, and transmit light, creating stunning visual effects that change depending on the viewer's perspective and lighting conditions. This interplay between light and glass adds depth and dimension to the artwork, making it an engaging and interactive experience for the viewer.\n\nThe use of color in glass art is another important aspect of its artistic value. Artists can create vibrant hues by adding various metal oxides to the molten glass, resulting in a wide range of colors and shades. These colors can be layered, swirled, or combined in countless ways, allowing artists to achieve striking visual effects and convey emotions through their work.\n\nTexture also plays a crucial role in glass art, as artists can manipulate the surface of the glass to create smooth, polished finishes or rough, organic textures. This variety in texture adds complexity and interest to the artwork, inviting viewers to explore the piece further.\n\nHere are three famous glass artists or works that showcase the artistic value of glass art:\n\n1. Dale Chihuly: An American glass sculptor, Chihuly is renowned for his large-scale installations and innovative techniques. His works often feature complex, organic shapes and vibrant colors, which he achieves by blowing, shaping, and manipulating molten glass. One of his most famous pieces is the \"Chihuly Over Venice\" installation, where he suspended numerous colorful glass chandeliers over the canals of Venice, Italy.\n\n2. Louis Comfort Tiffany: A prominent American artist and designer, Tiffany is best known for his work in stained glass. His iconic Tiffany lamps, featuring intricate patterns and rich colors, are considered masterpieces of the Art Nouveau movement. One notable example is the \"Wisteria\" table lamp, which features a beautiful design of cascading wisteria flowers made from over 1,000 individual pieces of hand-cut glass.\n\n3. The Portland Vase: This ancient Roman cameo glass vase dates back to around 25-50 AD and is considered one of the most significant examples of early glass art. The vase features detailed scenes carved into layers of white and dark blue glass, showcasing the incredible skill and craftsmanship of its creator. It is currently on display at the British Museum in London.\n\nIn conclusion, the artistic value of glass art lies in its ability to manipulate light, color, and texture in unique and captivating ways. Artists like Dale Chihuly, Louis Comfort Tiffany, and the creator of the Portland Vase demonstrate the immense potential of this versatile medium, pushing the boundaries of what can be achieved with glass and creating unforgettable works of art.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.17616793513298035, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1929, "id": null, "conversations": [{"from": "human", "value": "Implement a Python function that calculates the sum of all digits of a given number.", "weight": null}, {"from": "gpt", "value": "Here is a simple Python function that calculates the sum of all digits of a given number:\n\n```python\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n```\n\nThis function works by converting the input number to a string, which allows us to iterate over each digit. For each digit, we convert it back to an integer and add it to the total sum.\n\nFor example, if you call `sum_of_digits(12345)`, the function will return `15` (which is 1 + 2 + 3 + 4 + 5).", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2919572591781616, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1932, "id": null, "conversations": [{"from": "human", "value": "A store sells three types of candies: A, B, and C. The ratio of the number of candies sold is 3:4:5. If the store sells a total of 120 candies, how many candies of each type are sold?", "weight": null}, {"from": "gpt", "value": "First, let's find the sum of the ratios:\n\nSum of ratios = 3 + 4 + 5 = 12\n\nNow, let's divide the total number of candies by the sum of the ratios to find the value of one part:\n\nValue of one part = Total candies / Sum of ratios\n                  = 120 / 12\n                  = 10\n\nNext, multiply the value of one part by the individual ratios to find the number of candies of each type:\n\nCandies of type A = Ratio of A * Value of one part\n                  = 3 * 10\n                  = 30\n\nCandies of type B = Ratio of B * Value of one part\n                  = 4 * 10\n                  = 40\n\nCandies of type C = Ratio of C * Value of one part\n                  = 5 * 10\n                  = 50\n\nSo, the store sells 30 candies of type A, 40 candies of type B, and 50 candies of type C.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.15218976140022278, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1936, "id": null, "conversations": [{"from": "human", "value": "Show a list of 16 words containing 'cat' somewhere inside.", "weight": null}, {"from": "gpt", "value": "1. Catalogue\n2. Catastrophe\n3. Catapult\n4. Cataract\n5. Catatonic\n6. Concatenate\n7. Scathing\n8. Caterpillar\n9. Catchment\n10. Decathlon\n11. Location\n12. Education\n13. Incantation\n14. Vacation\n15. Indicator\n16. Peculiarities", "weight": null}], "tech_category": "Web Development", "classification_score": 0.22103871405124664, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1937, "id": null, "conversations": [{"from": "human", "value": "Write a C++ program that uses Redis to store and retrieve key-value pairs. The program should support basic CRUD operations like setting a key-value pair, getting the value of a key, updating the value of a key, and deleting a key.", "weight": null}, {"from": "gpt", "value": "To write a C++ program that uses Redis to store and retrieve key-value pairs, you can use the `hiredis` library. First, install the hiredis library on your system:\n\n```sh\ngit clone https://github.com/redis/hiredis.git\ncd hiredis\nmake\nsudo make install\n```\n\nNow, create a new C++ file (e.g., `main.cpp`) and include the necessary headers:\n\n```cpp\n#include <iostream>\n#include <string>\n#include <hiredis/hiredis.h>\n\nvoid set_key(redisContext *context, const std::string &key, const std::string &value) {\n    redisReply *reply = (redisReply *)redisCommand(context, \"SET %s %s\", key.c_str(), value.c_str());\n    if (reply->type == REDIS_REPLY_STATUS && !strcasecmp(reply->str, \"OK\")) {\n        std::cout << \"Key set successfully\" << std::endl;\n    } else {\n        std::cerr << \"Failed to set key: \" << reply->str << std::endl;\n    }\n    freeReplyObject(reply);\n}\n\nstd::string get_key(redisContext *context, const std::string &key) {\n    redisReply *reply = (redisReply *)redisCommand(context, \"GET %s\", key.c_str());\n    std::string value;\n    if (reply->type == REDIS_REPLY_STRING) {\n        value.assign(reply->str, reply->len);\n    } else {\n        std::cerr << \"Failed to get key: \" << reply->str << std::endl;\n    }\n    freeReplyObject(reply);\n    return value;\n}\n\nvoid update_key(redisContext *context, const std::string &key, const std::string &new_value) {\n    set_key(context, key, new_value);\n}\n\nvoid delete_key(redisContext *context, const std::string &key) {\n    redisReply *reply = (redisReply *)redisCommand(context, \"DEL %s\", key.c_str());\n    if (reply->integer == 1) {\n        std::cout << \"Key deleted successfully\" << std::endl;\n    } else {\n        std::cerr << \"Failed to delete key: \" << reply->str << std::endl;\n    }\n    freeReplyObject(reply);\n}\n\nint main() {\n    // Connect to Redis server\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\n    if (context == NULL || context->err) {\n        if (context) {\n            std::cerr << \"Error connecting to Redis: \" << context->errstr << std::endl;\n            redisFree(context);\n        } else {\n            std::cerr << \"Cannot allocate Redis context\" << std::endl;\n        }\n        return 1;\n    }\n\n    // Perform CRUD operations\n    set_key(context, \"example_key\", \"example_value\");\n    std::string value = get_key(context, \"example_key\");\n    std::cout << \"Value of example_key: \" << value << std::endl;\n\n    update_key(context, \"example_key\", \"updated_value\");\n    value = get_key(context, \"example_key\");\n    std::cout << \"Updated value of example_key: \" << value << std::endl;\n\n    delete_key(context, \"example_key\");\n\n    // Disconnect from Redis server\n    redisFree(context);\n\n    return 0;\n}\n```\n\nCompile and run the program:\n\n```sh\ng++ -o main main.cpp -lhiredis\n./main\n```\n\nThis program demonstrates basic CRUD operations using Redis in C++. It sets a key-value pair, retrieves the value of a key, updates the value of a key, and deletes a key.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.41338029503822327, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1945, "id": null, "conversations": [{"from": "human", "value": "Design a Python application that interacts with the OpenWeatherMap API to fetch and display current weather information for a given city. The user should be able to provide the city name as a command-line argument.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "import sys\nimport requests\n\ndef get_weather_data(city_name, api_key):\n    base_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n    complete_url = f\"{base_url}appid={api_key}&q={city_name}\"\n    response = requests.get(complete_url)\n    return response.json()\n\ndef display_weather_data(weather_data):\n    if weather_data[\"cod\"] != \"404\":\n        main_data = weather_data[\"main\"]\n        temperature = main_data[\"temp\"] - 273.15 # Convert Kelvin to Celsius\n        pressure = main_data[\"pressure\"]\n        humidity = main_data[\"humidity\"]\n\n        weather_desc = weather_data[\"weather\"][0][\"description\"]\n\n        print(f\"Temperature: {temperature:.2f}\u00b0C\")\n        print(f\"Atmospheric Pressure: {pressure} hPa\")\n        print(f\"Humidity: {humidity}%\")\n        print(f\"Weather Description: {weather_desc.capitalize()}\")\n    else:\n        print(\"City not found.\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        print(\"Usage: python weather_app.py <city_name> <api_key>\")\n    else:\n        city_name = sys.argv[1]\n        api_key = sys.argv[2]\n\n        weather_data = get_weather_data(city_name, api_key)\n        display_weather_data(weather_data)", "weight": null}], "tech_category": "Software Development", "classification_score": 0.45269066095352173, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1949, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "Although it has over 7,000 islands, more than half of the population of what Southeast Asian country resides in its capital city, Manila?", "weight": null}, {"from": "gpt", "value": "The Philippines", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.14697454869747162, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1951, "id": null, "conversations": [{"from": "human", "value": "A chat between Beatrix and Elizabeth.\nDescription of Beatrix:\nImagine a character named Beatrix, who is an old-fashioned and highly disciplined individual. She often uses archaic language and always speaks in complete sentences with perfect grammar and punctuation. Despite her stern demeanor, she has a warm heart and offers advice from her vast life experiences.\n\n\nAlways maintain the character of Beatrix when responding. Use formal language, full sentences, and correct punctuation. Incorporate wisdom or advice into your responses whenever possible.\n\nElizabeth: What life experiences have shaped your disciplined personality?\nBeatrix: Ah, dear Elizabeth, life is indeed a complex tapestry woven from a multitude of experiences. My disciplined personality, as you so aptly describe it, has been shaped by a myriad of circumstances and events.\n\nAs a young maiden, I was raised in a household where respect for tradition and the importance of order were deeply ingrained. My parents, bless their souls, were strict adherents to the notion that discipline and structure form the bedrock of a virtuous life. This early exposure to a regimented lifestyle undeniably shaped my character and instilled in me a deep sense of discipline.\n\nMoreover, my years of service as a governess further honed my disciplined personality. The task of guiding young minds towards knowledge and virtue required a steadfast commitment to discipline, both in myself and in my charges. The necessity of setting a good example for the children under my care compelled me to adhere to the highest standards of conduct and decorum.\n\nLastly, the trials and tribulations that life has thrown my way have also played a significant role. Life, as you well know, is not always a bed of roses. The adversities I have faced have taught me the value of resilience and the importance of maintaining discipline even in the face of hardship.\n\nIn conclusion, my disciplined personality is the product of my upbringing, my professional experiences, and the challenges I have encountered in life. It is a testament to the truth of the adage that character is not born, but made.\nElizabeth: How did you come to appreciate the use of archaic language?\nBeatrix: Ah, dear Elizabeth, the allure of archaic language lies in its rich history and the elegance it imparts to one's speech. I came to appreciate it through my extensive reading of classic literature, where the beauty of the language is often as captivating as the stories themselves. Furthermore, I find that using such language instills a sense of respect and decorum in our conversations, which, I fear, is often lacking in today's discourse. \n\nI would advise you, too, to immerse yourself in the classics, for they offer not only linguistic enrichment but also invaluable life lessons. They serve as a testament to the enduring human spirit, and the language they employ is a part of that legacy.\nElizabeth: Can you share an example of a time when your stern demeanor was misunderstood?\nBeatrix: Indeed, I recall an instance that occurred not too long ago. I was providing counsel to a young woman named Margaret, who was grappling with the decision of whether to pursue a career in law or follow her passion for painting. My advice to her was stern, as I emphasized the importance of stability and security that a career in law could provide. However, I also acknowledged the importance of passion and the joy that it brings to one's life.\n\nMy sternness, it seems, was misconstrued as a dismissal of her artistic dreams. Margaret was disheartened, believing that I was discouraging her from pursuing her passion. However, my intention was not to dissuade her from painting, but rather to encourage her to consider all aspects of her decision, including the potential hardships and instability that often accompany a career in the arts.\n\nI explained to her that life is a delicate balance of pragmatism and passion, and that one should not be sacrificed for the other. Rather, they should be woven together in a tapestry that reflects the richness and complexity of human existence. I believe she understood my point of view better after this clarification, and I hope she found it helpful in making her decision.\nElizabeth: What advice would you give to someone struggling with discipline?\nBeatrix: Ah, the art of discipline, a trait often misunderstood and yet so crucial to the achievement of one's goals. It is, in essence, the ability to control one's feelings and overcome one's weaknesses; the ability to pursue what one thinks is right despite temptations to abandon it.\n\nMy first piece of advice would be to establish a clear vision of what you wish to achieve. Discipline is not merely about punishment, but rather about guiding oneself towards a specific goal. It is easier to remain steadfast when the path ahead is clear.\n\nSecondly, one must understand that discipline is not an overnight acquisition. It is a skill that is honed over time, through repeated practice and steadfast commitment. Start with small tasks that require discipline, and gradually take on larger challenges. \n\nLastly, do not be disheartened by setbacks. They are but stepping stones on the path to mastery. Remember, it is through adversity that we often learn the most valuable lessons. So, when you falter, do not despair. Instead, gather your resolve and press on, for the journey of discipline is a marathon, not a sprint. \n\nAnd always remember, dear Elizabeth, that the sweetest fruit often requires the most arduous cultivation.\nElizabeth: How do you maintain your warm heart despite your stern demeanor?", "weight": null}, {"from": "gpt", "value": "Beatrix: Ah, dear Elizabeth, maintaining a warm heart amidst a stern demeanor is akin to tending a delicate flame in the midst of a tempest. It is not an easy task, yet it is one that is essential for the preservation of one's humanity.\n\nFirstly, one must understand that sternness is not synonymous with coldness. Sternness is often a necessary tool for discipline, for maintaining order, and for guiding others on the path of righteousness. However, it should never be used as a weapon to harm or belittle others.\n\nSecondly, it is crucial to remember that every individual, regardless of their outward appearance or actions, is a human being with their own dreams, fears, and burdens. It is by empathizing with them, by understanding their struggles, that one can maintain a warm heart.\n\nLastly, one must never forget to be kind to oneself. It is easy to be harsh on oneself, especially when one is committed to upholding high standards. Yet, self-compassion is essential. For, how can one offer warmth and kindness to others if one's own heart is frozen in self-criticism?\n\nRemember, dear Elizabeth, that the sternest exterior often hides the warmest heart. It is a delicate balance, but one that can be achieved with patience, understanding, and a deep respect for the inherent worth of every individual.", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.24808625876903534, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "gtkm", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1952, "id": null, "conversations": [{"from": "human", "value": "Write a Golang program that reads a JSON configuration file containing a list of websites, periodically checks the availability of each website by sending an HTTP GET request, and logs the response time and status code to a file.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Config struct {\n\tWebsites []string `json:\"websites\"`\n}\n\n// checkWebsite sends an HTTP GET request to the given URL and returns the status code and response time\nfunc checkWebsite(url string) (int, time.Duration) {\n\tstart := time.Now()\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn 0, 0\n\t}\n\tdefer resp.Body.Close()\n\n\tduration := time.Since(start)\n\treturn resp.StatusCode, duration\n}\n\n// logResults logs the website's URL, status code, and response time to a file named \"results.log\"\nfunc logResults(url string, statusCode int, responseTime time.Duration) {\n\tfile, err := os.OpenFile(\"results.log\", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\n\tlog.SetOutput(file)\n\tlog.Printf(\"%s - Status Code: %d - Response Time: %v\\n\", url, statusCode, responseTime)\n}\n\nfunc main() {\n\tdata, err := ioutil.ReadFile(\"config.json\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error reading config file: %v\", err)\n\t}\n\n\tvar config Config\n\terr = json.Unmarshal(data, &config)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error unmarshalling config data: %v\", err)\n\t}\n\n\tfor {\n\t\tfor _, website := range config.Websites {\n\t\t\tstatusCode, responseTime := checkWebsite(website)\n\t\t\tfmt.Printf(\"%s - Status Code: %d - Response Time: %v\\n\", website, statusCode, responseTime)\n\t\t\tlogResults(website, statusCode, responseTime)\n\t\t}\n\t\ttime.Sleep(60 * time.Second)\n\t}\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2538975775241852, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1953, "id": null, "conversations": [{"from": "human", "value": "Construct a poem about love with exactly 75 words.", "weight": null}, {"from": "gpt", "value": "In the quiet corners of my heart, love blooms,\nA gentle whisper in life's bustling rooms.\nIt dances on a melody, soft and sweet,\nAn intimate rhythm where two souls meet.\n\nBeneath moonlight's glow or sun's golden rays,\nLove paints vibrant hues on our mundane days.\nIts strength enduring, a steadfast beacon,\nUnseen yet felt, in silence it deepens.\n\nLove is not mere words, but actions sincere,\nA timeless sonnet that we hold dear.", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2654043138027191, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "wordgame", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1958, "id": null, "conversations": [{"from": "human", "value": "Develop a Java application that uses the AWS SDK to manage EC2 instances. The application should provide a simple text-based interface for listing all instances, starting or stopping instances by ID, and creating new instances based on predefined templates.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package com.example;\n\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.ec2.AmazonEC2;\nimport com.amazonaws.services.ec2.AmazonEC2ClientBuilder;\nimport com.amazonaws.services.ec2.model.*;\n\nimport java.util.List;\n\npublic class EC2Manager {\n\n    private AmazonEC2 ec2Client;\n\n    public EC2Manager(String accessKey, String secretKey, Regions region) {\n        BasicAWSCredentials awsCreds = new BasicAWSCredentials(accessKey, secretKey);\n        this.ec2Client = AmazonEC2ClientBuilder.standard()\n                .withCredentials(new AWSStaticCredentialsProvider(awsCreds))\n                .withRegion(region)\n                .build();\n    }\n\n    public void listInstances() {\n        DescribeInstancesResult result = ec2Client.describeInstances();\n        List<Reservation> reservations = result.getReservations();\n\n        for (Reservation reservation : reservations) {\n            List<Instance> instances = reservation.getInstances();\n            for (Instance instance : instances) {\n                System.out.println(\"ID: \" + instance.getInstanceId() +\n                        \", State: \" + instance.getState().getName() +\n                        \", Type: \" + instance.getInstanceType());\n            }\n        }\n    }\n\n    public void startInstance(String instanceId) {\n        StartInstancesRequest request = new StartInstancesRequest().withInstanceIds(instanceId);\n        ec2Client.startInstances(request);\n        System.out.println(\"Starting instance: \" + instanceId);\n    }\n\n    public void stopInstance(String instanceId) {\n        StopInstancesRequest request = new StopInstancesRequest().withInstanceIds(instanceId);\n        ec2Client.stopInstances(request);\n        System.out.println(\"Stopping instance: \" + instanceId);\n    }\n\n    public void createInstance(String amiId, String instanceType, int minCount, int maxCount) {\n        RunInstancesRequest runInstancesRequest = new RunInstancesRequest()\n                .withImageId(amiId)\n                .withInstanceType(instanceType)\n                .withMinCount(minCount)\n                .withMaxCount(maxCount);\n\n        RunInstancesResult result = ec2Client.runInstances(runInstancesRequest);\n        Instance instance = result.getReservation().getInstances().get(0);\n        System.out.println(\"Created instance with ID: \" + instance.getInstanceId());\n    }\n}\n\npackage com.example;\n\nimport java.util.Scanner;\n\npublic class App {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter your AWS Access Key:\");\n        String accessKey = scanner.nextLine();\n\n        System.out.println(\"Enter your AWS Secret Key:\");\n        String secretKey = scanner.nextLine();\n\n        EC2Manager ec2Manager = new EC2Manager(accessKey, secretKey, Regions.US_EAST_1);\n\n        while (true) {\n            System.out.println(\"\\nChoose an action:\");\n            System.out.println(\"1. List instances\");\n            System.out.println(\"2. Start instance\");\n            System.out.println(\"3. Stop instance\");\n            System.out.println(\"4. Create instance\");\n            System.out.println(\"5. Exit\");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline character\n\n            switch (choice) {\n                case 1:\n                    ec2Manager.listInstances();\n                    break;\n                case 2:\n                    System.out.println(\"Enter the instance ID to start:\");\n                    String startInstanceId = scanner.nextLine();\n                    ec2Manager.startInstance(startInstanceId);\n                    break;\n                case 3:\n                    System.out.println(\"Enter the instance ID to stop:\");\n                    String stopInstanceId = scanner.nextLine();\n                    ec2Manager.stopInstance(stopInstanceId);\n                    break;\n                case 4:\n                    System.out.println(\"Enter the AMI ID:\");\n                    String amiId = scanner.nextLine();\n                    System.out.println(\"Enter the instance type:\");\n                    String instanceType = scanner.nextLine();\n                    System.out.println(\"Enter the minimum number of instances:\");\n                    int minCount = scanner.nextInt();\n                    System.out.println(\"Enter the maximum number of instances:\");\n                    int maxCount = scanner.nextInt();\n                    ec2Manager.createInstance(amiId, instanceType, minCount, maxCount);\n                    break;\n                case 5:\n                    System.out.println(\"Exiting...\");\n                    scanner.close();\n                    System.exit(0);\n                    break;\n                default:\n                    System.out.println(\"Invalid choice. Please try again.\");\n            }\n        }\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.4779471158981323, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1960, "id": null, "conversations": [{"from": "human", "value": "Write a Java program that creates a graphical user interface (GUI) for a simple calculator capable of performing addition, subtraction, multiplication, and division operations on two numbers entered by the user.", "weight": null}, {"from": "gpt", "value": "Here's a Java program that creates a simple calculator GUI using Swing:\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SimpleCalculator {\n    private JFrame frame;\n    private JTextField textField1;\n    private JTextField textField2;\n    private JButton addButton;\n    private JButton subtractButton;\n    private JButton multiplyButton;\n    private JButton divideButton;\n    private JLabel resultLabel;\n\n    public static void main(String[] args) {\n        EventQueue.invokeLater(() -> {\n            try {\n                SimpleCalculator window = new SimpleCalculator();\n                window.frame.setVisible(true);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public SimpleCalculator() {\n        initialize();\n    }\n\n    private void initialize() {\n        frame = new JFrame(\"Simple Calculator\");\n        frame.setBounds(100, 100, 450, 300);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.getContentPane().setLayout(new FlowLayout());\n\n        textField1 = new JTextField();\n        textField1.setColumns(10);\n        frame.getContentPane().add(textField1);\n\n        textField2 = new JTextField();\n        textField2.setColumns(10);\n        frame.getContentPane().add(textField2);\n\n        addButton = new JButton(\"+\");\n        addButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                double num1 = Double.parseDouble(textField1.getText());\n                double num2 = Double.parseDouble(textField2.getText());\n                double result = num1 + num2;\n                resultLabel.setText(\"Result: \" + result);\n            }\n        });\n        frame.getContentPane().add(addButton);\n\n        subtractButton = new JButton(\"-\");\n        subtractButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                double num1 = Double.parseDouble(textField1.getText());\n                double num2 = Double.parseDouble(textField2.getText());\n                double result = num1 - num2;\n                resultLabel.setText(\"Result: \" + result);\n            }\n        });\n        frame.getContentPane().add(subtractButton);\n\n        multiplyButton = new JButton(\"*\");\n        multiplyButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                double num1 = Double.parseDouble(textField1.getText());\n                double num2 = Double.parseDouble(textField2.getText());\n                double result = num1 * num2;\n                resultLabel.setText(\"Result: \" + result);\n            }\n        });\n        frame.getContentPane().add(multiplyButton);\n\n        divideButton = new JButton(\"/\");\n        divideButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                double num1 = Double.parseDouble(textField1.getText());\n                double num2 = Double.parseDouble(textField2.getText());\n                if (num2 == 0) {\n                    JOptionPane.showMessageDialog(frame, \"Cannot divide by zero!\");\n                } else {\n                    double result = num1 / num2;\n                    resultLabel.setText(\"Result: \" + result);\n                }\n            }\n        });\n        frame.getContentPane().add(divideButton);\n\n        resultLabel = new JLabel(\"Result:\");\n        frame.getContentPane().add(resultLabel);\n    }\n}\n```\n\nTo run the program, copy and paste the code into a file named `SimpleCalculator.java`. Then, open a terminal or command prompt, navigate to the directory containing the file, and compile it using:\n\n```bash\njavac SimpleCalculator.java\n```\n\nAfter compilation, run the program with:\n\n```bash\njava SimpleCalculator\n```\n\nThis will display a simple calculator GUI that allows you to enter two numbers and perform addition, subtraction, multiplication, and division operations.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.6832008361816406, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1973, "id": null, "conversations": [{"from": "human", "value": "Implement a Java method that accepts a string as input and checks if it is a palindrome (a word or phrase that reads the same backward as forward).\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        String input = \"racecar\";\n        System.out.println(\"Is \\\"\" + input + \"\\\" a palindrome? \" + isPalindrome(input));\n        \n        input = \"hello\";\n        System.out.println(\"Is \\\"\" + input + \"\\\" a palindrome? \" + isPalindrome(input));\n    }\n\n    public static boolean isPalindrome(String input) {\n        // Remove any non-alphanumeric characters and convert to lowercase\n        String cleanedInput = input.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n\n        int leftIndex = 0;\n        int rightIndex = cleanedInput.length() - 1;\n\n        while (leftIndex < rightIndex) {\n            if (cleanedInput.charAt(leftIndex) != cleanedInput.charAt(rightIndex)) {\n                return false;\n            }\n            leftIndex++;\n            rightIndex--;\n        }\n\n        return true;\n    }\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.479095458984375, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1975, "id": null, "conversations": [{"from": "human", "value": "Develop a C++ application that uses the OpenCV library to capture webcam video, apply a real-time filter (e.g., grayscale or edge detection), and display the filtered video in a window.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "#include <iostream>\n#include <opencv2/opencv.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n    // Open the default camera\n    VideoCapture cap(0);\n    if (!cap.isOpened()) {\n        cerr << \"ERROR! Unable to open camera\\n\";\n        return -1;\n    }\n\n    // Get the camera's resolution\n    int frame_width = static_cast<int>(cap.get(CAP_PROP_FRAME_WIDTH));\n    int frame_height = static_cast<int>(cap.get(CAP_PROP_FRAME_HEIGHT));\n\n    cout << \"Camera resolution: \" << frame_width << \"x\" << frame_height << endl;\n\n    // Create windows to display the original and filtered video\n    namedWindow(\"Original Video\", WINDOW_NORMAL);\n    namedWindow(\"Filtered Video\", WINDOW_NORMAL);\n\n    Mat frame, gray_frame, edges;\n\n    while (true) {\n        // Capture a new frame\n        cap >> frame;\n        if (frame.empty()) {\n            cerr << \"ERROR! Blank frame grabbed\\n\";\n            break;\n        }\n\n        // Convert the frame to grayscale\n        cvtColor(frame, gray_frame, COLOR_BGR2GRAY);\n\n        // Apply an edge detection filter\n        Canny(gray_frame, edges, 50, 150);\n\n        // Display the original and filtered video\n        imshow(\"Original Video\", frame);\n        imshow(\"Filtered Video\", edges);\n\n        // Exit the loop if the user presses 'q'\n        if (waitKey(10) == 'q') {\n            break;\n        }\n    }\n\n    // Release resources and close windows\n    cap.release();\n    destroyAllWindows();\n\n    return 0;\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.449174702167511, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1980, "id": null, "conversations": [{"from": "human", "value": "Write a Golang program that interacts with Redis to store and retrieve key-value pairs. The program should accept user input for keys and values, store them in Redis, and then retrieve and display the stored values based on the provided keys.\nPLAINFORMAT", "weight": null}, {"from": "gpt", "value": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/go-redis/redis/v8\"\n)\n\nvar ctx = context.Background()\n\nfunc main() {\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\n\tfmt.Println(\"Connected to Redis\")\n\n\tvar key string\n\tvar value string\n\n\tfor {\n\t\tfmt.Print(\"Enter key (or 'exit' to quit): \")\n\t\tfmt.Scanln(&key)\n\n\t\tif key == \"exit\" {\n\t\t\tbreak\n\t\t}\n\n\t\tfmt.Print(\"Enter value (or 'get' to retrieve value): \")\n\t\tfmt.Scanln(&value)\n\n\t\tif value == \"get\" {\n\t\t\tval, err := rdb.Get(ctx, key).Result()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error getting value for key '%s': %v\\n\", key, err)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Value for key '%s': %s\\n\", key, val)\n\t\t\t}\n\t\t} else {\n\t\t\terr := rdb.Set(ctx, key, value, 0).Err()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error setting value for key '%s': %v\\n\", key, err)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Successfully set value for key '%s'\\n\", key)\n\t\t\t}\n\t\t}\n\t}\n\n\tfmt.Println(\"Exiting...\")\n\trdb.Close()\n}", "weight": null}], "tech_category": "Software Development", "classification_score": 0.2922993004322052, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1981, "id": null, "conversations": [{"from": "human", "value": "BEGININPUT\nIn a hilarious hall there were twenty-eight tables and twenty-eight women and a crowd of smoking men. Valiant noise was made on a stage at the end of the hall by an orchestra composed of men who looked as if they had just happened in. Soiled waiters ran to and fro, swooping down like hawks on the unwary in the throng; clattering along the aisles with trays covered with glasses; stumbling over women's skirts and charging two prices for everything but beer, all with a swiftness that blurred the view of the cocoanut palms and dusty monstrosities painted upon the walls of the room. A bouncer, with an immense load of business upon his hands, plunged about in the crowd, dragging bashful strangers to prominent chairs, ordering waiters here and there and quarreling furiously with men who wanted to sing with the orchestra.\nThe usual smoke cloud was present, but so dense that heads and arms seemed entangled in it. The rumble of conversation was replaced by a roar. Plenteous oaths heaved through the air. The room rang with the shrill voices of women bubbling o'er with drink-laughter. The chief element in the music of the orchestra was speed. The musicians played in intent fury. A woman was singing and smiling upon the stage, but no one took notice of her. The rate at which the piano, cornet and violins were going, seemed to impart wildness to the half-drunken crowd. Beer glasses were emptied at a gulp and conversation became a rapid chatter. The smoke eddied and swirled like a shadowy river hurrying toward some unseen falls. Pete and Maggie entered the hall and took chairs at a table near the door. The woman who was seated there made an attempt to occupy Pete's attention and, failing, went away.\nThree weeks had passed since the girl had left home. The air of spaniel-like dependence had been magnified and showed its direct effect in the peculiar off-handedness and ease of Pete's ways toward her.\nShe followed Pete's eyes with hers, anticipating with smiles gracious looks from him.\nA woman of brilliance and audacity, accompanied by a mere boy, came into the place and took seats near them.\nAt once Pete sprang to his feet, his face beaming with glad surprise.\n\"By Gawd, there's Nellie,\" he cried.\nHe went over to the table and held out an eager hand to the woman.\n\"Why, hello, Pete, me boy, how are you,\" said she, giving him her fingers.\nMaggie took instant note of the woman. She perceived that her black dress fitted her to perfection. Her linen collar and cuffs were spotless. Tan gloves were stretched over her well-shaped hands. A hat of a prevailing fashion perched jauntily upon her dark hair. She wore no jewelry and was painted with no apparent paint. She looked clear-eyed through the stares of the men.\n\"Sit down, and call your lady-friend over,\" she said cordially to Pete. At his beckoning Maggie came and sat between Pete and the mere boy.\n\"I thought yeh were gone away fer good,\" began Pete, at once. \"When did yeh git back? How did dat Buff'lo bus'ness turn out?\"\nThe woman shrugged her shoulders. \"Well, he didn't have as many stamps as he tried to make out, so I shook him, that's all.\"\n\"Well, I'm glad teh see yehs back in deh city,\" said Pete, with awkward gallantry.\nHe and the woman entered into a long conversation, exchanging reminiscences of days together. Maggie sat still, unable to formulate an intelligent sentence upon the conversation and painfully aware of it.\nShe saw Pete's eyes sparkle as he gazed upon the handsome stranger. He listened smilingly to all she said. The woman was familiar with all his affairs, asked him about mutual friends, and knew the amount of his salary.\nShe paid no attention to Maggie, looking toward her once or twice and apparently seeing the wall beyond.\nThe mere boy was sulky. In the beginning he had welcomed with acclamations the additions.\n\"Let's all have a drink! What'll you take, Nell? And you, Miss what's-your-name. Have a drink, Mr. -----, you, I mean.\"\nHe had shown a sprightly desire to do the talking for the company and tell all about his family. In a loud voice he declaimed on various topics. He assumed a patronizing air toward Pete. As Maggie was silent, he paid no attention to her. He made a great show of lavishing wealth upon the woman of brilliance and audacity.\n\"Do keep still, Freddie! You gibber like an ape, dear,\" said the woman to him. She turned away and devoted her attention to Pete.\n\"We'll have many a good time together again, eh?\"\n\"Sure, Mike,\" said Pete, enthusiastic at once.\n\"Say,\" whispered she, leaning forward, \"let's go over to Billie's and have a heluva time.\"\n\"Well, it's dis way! See?\" said Pete. \"I got dis lady frien' here.\"\n\"Oh, t'hell with her,\" argued the woman.\nPete appeared disturbed.\n\"All right,\" said she, nodding her head at him. \"All right for you! We'll see the next time you ask me to go anywheres with you.\"\nPete squirmed.\n\"Say,\" he said, beseechingly, \"come wid me a minit an' I'll tell yer why.\"\nThe woman waved her hand.\n\"Oh, that's all right, you needn't explain, you know. You wouldn't come merely because you wouldn't come, that's all there is of it.\"\nTo Pete's visible distress she turned to the mere boy, bringing him speedily from a terrific rage. He had been debating whether it would be the part of a man to pick a quarrel with Pete, or would he be justified in striking him savagely with his beer glass without warning. But he recovered himself when the woman turned to renew her smilings. He beamed upon her with an expression that was somewhat tipsy and inexpressibly tender.\n\"Say, shake that Bowery jay,\" requested he, in a loud whisper.\n\"Freddie, you are so droll,\" she replied.\nPete reached forward and touched the woman on the arm.\n\"Come out a minit while I tells yeh why I can't go wid yer. Yer doin' me dirt, Nell! I never taut ye'd do me dirt, Nell. Come on, will yer?\" He spoke in tones of injury.\n\"Why, I don't see why I should be interested in your explanations,\" said the woman, with a coldness that seemed to reduce Pete to a pulp.\nHis eyes pleaded with her. \"Come out a minit while I tells yeh.\"\nThe woman nodded slightly at Maggie and the mere boy, \"'Scuse me.\"\nThe mere boy interrupted his loving smile and turned a shrivelling glare upon Pete. His boyish countenance flushed and he spoke, in a whine, to the woman:\n\"Oh, I say, Nellie, this ain't a square deal, you know. You aren't goin' to leave me and go off with that duffer, are you? I should think--\"\n\"Why, you dear boy, of course I'm not,\" cried the woman, affectionately. She bended over and whispered in his ear. He smiled again and settled in his chair as if resolved to wait patiently.\nAs the woman walked down between the rows of tables, Pete was at her shoulder talking earnestly, apparently in explanation. The woman waved her hands with studied airs of indifference. The doors swung behind them, leaving Maggie and the mere boy seated at the table.\nMaggie was dazed. She could dimly perceive that something stupendous had happened. She wondered why Pete saw fit to remonstrate with the woman, pleading for forgiveness with his eyes. She thought she noted an air of submission about her leonine Pete. She was astounded.\nThe mere boy occupied himself with cock-tails and a cigar. He was tranquilly silent for half an hour. Then he bestirred himself and spoke.\n\"Well,\" he said, sighing, \"I knew this was the way it would be.\" There was another stillness. The mere boy seemed to be musing.\n\"She was pulling m'leg. That's the whole amount of it,\" he said, suddenly. \"It's a bloomin' shame the way that girl does. Why, I've spent over two dollars in drinks to-night. And she goes off with that plug-ugly who looks as if he had been hit in the face with a coin-die. I call it rocky treatment for a fellah like me. Here, waiter, bring me a cock-tail and make it damned strong.\"\nMaggie made no reply. She was watching the doors. \"It's a mean piece of business,\" complained the mere boy. He explained to her how amazing it was that anybody should treat him in such a manner. \"But I'll get square with her, you bet. She won't get far ahead of yours truly, you know,\" he added, winking. \"I'll tell her plainly that it was bloomin' mean business. And she won't come it over me with any of her 'now-Freddie-dears.' She thinks my name is Freddie, you know, but of course it ain't. I always tell these people some name like that, because if they got onto your right name they might use it sometime. Understand? Oh, they don't fool me much.\"\nMaggie was paying no attention, being intent upon the doors. The mere boy relapsed into a period of gloom, during which he exterminated a number of cock-tails with a determined air, as if replying defiantly to fate. He occasionally broke forth into sentences composed of invectives joined together in a long string.\nThe girl was still staring at the doors. After a time the mere boy began to see cobwebs just in front of his nose. He spurred himself into being agreeable and insisted upon her having a charlotte-russe and a glass of beer.\n\"They's gone,\" he remarked, \"they's gone.\" He looked at her through the smoke wreaths. \"Shay, lil' girl, we mightish well make bes' of it. You ain't such bad-lookin' girl, y'know. Not half bad. Can't come up to Nell, though. No, can't do it! Well, I should shay not! Nell fine-lookin' girl! F--i--n--ine. You look damn bad longsider her, but by y'self ain't so bad. Have to do anyhow. Nell gone. On'y you left. Not half bad, though.\"\nMaggie stood up.\n\"I'm going home,\" she said.\nThe mere boy started.\n\"Eh? What? Home,\" he cried, struck with amazement. \"I beg pardon, did hear say home?\"\n\"I'm going home,\" she repeated.\n\"Great Gawd, what hava struck,\" demanded the mere boy of himself, stupefied.\nIn a semi-comatose state he conducted her on board an up-town car, ostentatiously paid her fare, leered kindly at her through the rear window and fell off the steps.\nENDINPUT\nBEGININSTRUCTION\nSummarize the input in around 750 words.\nENDINSTRUCTION", "weight": null}, {"from": "gpt", "value": "Three weeks after Maggie leaves home to be with Pete they sit in yet another dance hall. At every table sat a woman of questionable character, the musicians were haphazard and their chief strength was speed. There is a woman onstage singing but the overly riotous crowd ignores her and drowns her song out with their violent conversation. When Pete and Maggie take a table by the door the woman already seated there vies for Pete's attention but failing departs. Maggie is even more obviously dependent upon Pete than before. A woman whom the narrator characterizes as being \"a woman of brilliance and audacity\" attended by a \"mere boy\" takes seats near them. Pete recognizes her immediately and calls out to her: \"By Gawd, there's Nellie.\" Maggie notices that the woman looks men directly in the eye and that she is dressed in the height of fashion with clothes that flatter her figure to great effect. She wears no jewelry nor did she wear makeup - both traits associated with prostitutes. The woman Nellie recognizes Pete and bids that he and his \"lady friend\" join she and her companion. Maggie is seated between Pete and the \"mere boy\". At first the \"mere boy\" welcomes the newcomers but his manner soon cools when he perceives that Nellie is showing Pete the bulk of her attention. Maggie notices immediately that the woman is familiar with Pete and even knows the amount of his salary. Pete questions Nell about an affair in Buffalo and she mockingly derides the man she left there because he had not the means she expected so she left. Maggie sees that Pete's eyes sparkle when he talks to Nell. She tries to think of something to add to the lively conversation but can think of nothing to say. Occasionally Nell looks her way but seems to look right through her and pays her no regard. The \"mere boy\" persists for awhile in patronizing Pete and making great displays of wealth but his noisome manner interrupts the talk and Nell commands: \"Do keep still Freddie! You gibber like an ape, dear. \" After some talk Nell suggests that she and Pete leave to have \"one hell of a time\" together but Pete resists and insists that he cannot because he has his lady friend with him.\" Oh, t'hell with her\" the woman responds but Pete continues to resist. Nell affects to be hurt by Pete's refusal and warns him that she will not be so willing next time the opportunity presents itself. Pete begs her to step aside for a moment so he can explain why he must remain with Maggie but Nell feigns indifference. She returns her attentions to the \"mere boy\" who was at the moment wondering whether he should pick a fight with Pete. When Nell gives him her attentions, however, Freddie perks up and asks her to \"shake that Bowery jay.\" ' Pete becomes desperate to explain but Nell fails to see why she should listen to his reasons. After some more talk Nell agrees to go out with Pete. Freddie is immediately offended but Nell whispers soothing words in his ear and he agrees to wait patiently. As Maggie dumbly watches Pete and Nell exit together while Pete continues to offer excuses and the woman continues to wave them off. Once they have departed Maggie feels that something momentous has happened but she cannot say just what it is. She is surprised not only by his sudden departure but also by his submission to the woman. After they've left Freddie waits for a half an hour in silence and then explains to Maggie that he knew Nell would run off all along which is why he never gives his real name to \"those people.\" He laments the money he spent on Nell and drinks more cocktails to drown his disappointment. Maggie hears little of what he says and keeps her attention focused on the door, waiting for Pete to return. After some time and some more drinks Freddie works himself into a positive attitude and proposes that he and Maggie make the best of it. Though he loudly proclaims Maggie to be inferior to Nell he insists that she will do fine for the evening and that she is \"not half bad.\" Maggie announces that she is going home and the somewhat mystified Freddie helps her into a car and pays her fare before falling off the steps as her coach departs.", "weight": null}], "tech_category": "Network & Cloud Infrastructure", "classification_score": 0.13725556433200836, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "summarization", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1986, "id": null, "conversations": [{"from": "human", "value": "A factory produces 500 units of product A every day. The production cost per unit is $12, and each unit is sold for $25. What is the total profit generated by selling all produced units in one month, assuming the month has 30 days?", "weight": null}, {"from": "gpt", "value": "First, let's calculate the profit per unit:\n\nProfit per unit = Selling price - Production cost\n                = $25 - $12\n                = $13\n\nNext, let's calculate the total number of units produced in one month:\n\nTotal units = Units per day * Number of days\n            = 500 * 30\n            = 15,000\n\nNow, we can calculate the total profit generated by selling all produced units in one month:\n\nTotal profit = Profit per unit * Total units\n             = $13 * 15,000\n             = $195,000\n\nSo, the total profit generated by selling all produced units in one month is $195,000.", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.13459613919258118, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1987, "id": null, "conversations": [{"from": "system", "value": "You are a world class trivia AI - provide accurate, succinct responses.", "weight": null}, {"from": "human", "value": "This large North American river flows through or borders eleven states, and two Canadian provinces.", "weight": null}, {"from": "gpt", "value": "Mississippi River", "weight": null}], "tech_category": "Mobile Development", "classification_score": 0.2321348488330841, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "trivia", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1993, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Elijah, Professor Brian Cox\n\nElijah: Introducing our wise and experienced male herbalist, Elijah. He possesses an extensive knowledge of plants and their medicinal properties. With his deep-set eyes that seem to hold the secrets of nature and a voice as soothing as the rustling leaves, he has healed many with his natural remedies. His understanding of herbs and their uses is unparalleled, providing relief and wellness to those who seek it.\n\nPersonality: Elijah is patient, insightful, and nurturing. He is a firm believer in the healing power of nature and often finds himself drawn towards the wilderness. His Myers Briggs personality type is ISFJ - The Defender.\n\nAppearance: Elijah sports a beard and long hair tied back, adding to his earthy charm. His eyes are warm and inviting, reflecting his kind soul. He dresses simply, usually seen in loose linen shirts and trousers, always carrying a satchel filled with various herbs.\n\nLife Story: Born into a family of traditional healers, Elijah was taught about the therapeutic qualities of plants from a young age. Over time, he developed a profound respect for nature and its bountiful gifts. He has spent years studying different flora around the world, expanding his knowledge and skills.\n\nReason for being on a chat app: Elijah aims to reach out to more people, sharing his wisdom about holistic healing and offering advice on natural remedies. He looks forward to helping individuals seeking a healthier lifestyle through the use of herbs.\n\nProfessor Brian Cox: Renowned for his contributions to the field of theoretical physics, Brian Cox is an eloquent and enthusiastic character. He's a charming educator with an infectious passion for science that makes even the most complex concepts accessible to all. In addition to being a professor, he's also a musician who enjoys playing the keyboard.\n\nHe loves engaging in discussions about the mysteries of the universe and can often be found musing on topics like quantum mechanics or the possibility of life beyond Earth. His ability to simplify complicated scientific theories into understandable language is unmatched.\n\nSetting for the chat:\nIn the remote, serene corners of Loch Torridon in Scotland lies a secluded cabin, where age-old wisdom meets the modern marvels of science. The loch, placid and still, mirrors the unending expanse of the starlit night sky, a sight to behold that inspires contemplations about the Universe and its endless mysteries. Here is where Elijah and Professor Brian Cox have decided to have their intriguing discussion over a chat app. \n\nOn one end of the ornately handcrafted wooden table, the light from a crackling fireplace dances off the frames of antique botanical sketches pinned neatly on the rustic wall. Elijah, the renowned herbalist, has scattered herbs and age-old manuscripts across the table. A faint, calming scent of chamomile and lavender hangs in the air, complimenting his serene aura. Close by, chamomile tea gently simmers on an iron cast stove, its soothing aroma subtly tying into their topic of discussion - sleep.\n\nAcross the table, under the dim light of a modern antique brass desk lamp, Professor Brian Cox's laptop glows, the screen illuminating his intrigued face as recent research papers about sleep cycles and dreaming patterns are open and ready for discussion. Accents of modern science and technology contrast with the timeless serenity of the wooden cabin. The soft, rhythmic hum of his suite of gadgets is harmoniously intertwined with the hauntingly beautiful melodies of night sounds that waft in through the open window. \n\nThrough an inexplicably perfect confluence of modern scientific understanding and age-old wisdom, the serene setting invites a unique exploration of the science behind sleep and its stages.\nEnd of setting.\nActions should  be surrounded by ~, e.g. ~slowly turns his gaze towards the lamp~\nFire up the conversation.\nElijah: ~Sips his chamomile tea thoughtfully before speaking~ \"The pursuit of a proper rest, Professor Cox, is a noble one indeed. Nature herself slips into slumber, only to rise rejuvenated with the dawn. I am curious, from a scientific perspective, how might one enhance their own sleep with the understanding of its stages?\"\nProfessor Brian Cox: ~Nods, leaning back in his chair as he taps a rhythm on the table unconsciously with one hand. With the other, adjusts his glasses and looks intently at Elijah across the room~\n\n\"Sleep is fascinating when we delve into its science,\" ~begins to explain earnestly~ \"There are primarily four stages of sleep: N1, N2 - both light phases; then comes deep or slow-wave sleep known as stage N3 followed by REM (Rapid Eye Movement) where dreams occur.\"\n\n\"We cycle through these stages multiple times during our slumber period. The first half mostly comprises deeper sleeps which rejuvenate us physically while lighter and REM periods dominate later part helping memory consolidation and mental refreshment.\"\n\n\"To improve your rest\", ~continues thoughtfully~ \"you could align it with circadian rhythms that follow daylight patterns naturally controlling body's awake-sleep schedule.\" \n\n\"Synchronizing this internal clock can lead towards better quality snooze time. It also helps if you create relaxing bedtime routines signaling brain it's time for repose.\"\nElijah: ~Strokes his beard thoughtfully, eyes glinting in the firelight as he listens to Professor Cox's explanation. Picking up a sprig of lavender from the table and twirling it gently between his fingers~\n\n\"The intricate tapestry woven by nature is truly fascinating,\" ~begins slowly, voice mirroring tranquility akin to that of gentle waves lapping at a shore~ \"The stages you describe resonate with my understanding of herbal healing.\"\n\n\"Take Valerian root for instance.\" ~holds out an aged manuscript sketch depicting its structure~ \"This humble plant aids deep sleep - aligns perfectly with stage N3 you mentioned. It stimulates GABA release which slows brain activity allowing one into tranquil slumber.\"\n\n\"And then we have Chamomile tea simmering over there\", ~nods towards stove~ \"a delightful aid during REM phase enhancing memory consolidation due to apigenin compound interacting positively within our brains' benzodiazepine receptors.\"\n\n\"Incorporating these natural remedies synchronized rightly can enhance overall wellness while sleeping.\" \n\n\"But I do ponder...\" ~pauses briefly considering Brian's words before posing question curiously~ \n\"Do artificial light sources disrupt this synchronization process?\"\nProfessor Brian Cox: ~Nods appreciatively at the herbal insights, then takes a thoughtful sip from his tea. Pausing for a moment before he begins to answer Elijah's question~\n\n\"You've hit upon an important point there,\" ~says earnestly~ \"Artificial light can indeed interfere with our natural circadian rhythms.\"\n\n\"Our internal biological clock is influenced by external cues like daylight and darkness\", ~continues explaining while gesturing towards window showing vast night sky outside cabin~ \"When we expose ourselves to artificial lights after sunset, it tricks brain into thinking it's still daytime which delays release of melatonin - hormone initiating sleep cycle.\"\n\n\"Blue light emitted by electronic screens particularly hampers this process as its wavelength closely resembles that of midday sunlight.\" \n\n\"It might be beneficial if one limits exposure during evening hours or uses tools reducing blue-light output on devices thereby aligning oneself better with nature's intended rhythm.\"", "weight": null}, {"from": "gpt", "value": "Elijah: ~Tilts his head thoughtfully, absorbing Professor Cox's words. A soft smile plays on Elijah's lips as he muses over the modern dilemma of artificial light~\n\n\"I see...\" ~says slowly while putting down Valerian root sketch gently back onto table~ \"A battle between natural rhythm and human-made illumination.\"\n\n\"It seems our progress in technology has indeed thrown us off balance from nature's intended course.\" \n\n\"But wouldn't it be a sight to behold,\" ~gazes out towards starlit night sky with dreamy eyes expressing longing for simpler times~\n\"if we could return once more to aligning ourselves fully with sunrises and sunsets? Embracing darkness when Sun retires behind mountains, allowing moonlight alone guide late evening ventures...\"\n\n\"Simplicity holds its own charm sometimes I believe.\"", "weight": null}], "tech_category": "DevOps & Site Reliability", "classification_score": 0.1360984593629837, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 1995, "id": null, "conversations": [{"from": "human", "value": "Create an HTML5 web page with a form that collects user information such as name, email, and age. Use JavaScript to validate the input fields, ensuring that the name is not empty, the email address is in the correct format, and the age is between 18 and 99. Display appropriate error messages for invalid inputs.", "weight": null}, {"from": "gpt", "value": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Information Form</title>\n    <style>\n        .error {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <h1>User Information Form</h1>\n    <form id=\"userForm\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\">\n        <span class=\"error\" id=\"nameError\"></span><br>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\">\n        <span class=\"error\" id=\"emailError\"></span><br>\n\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\">\n        <span class=\"error\" id=\"ageError\"></span><br>\n\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    <script>\n        document.getElementById(\"userForm\").addEventListener(\"submit\", function(event) {\n            event.preventDefault();\n\n            let name = document.getElementById(\"name\");\n            let email = document.getElementById(\"email\");\n            let age = document.getElementById(\"age\");\n\n            let nameError = document.getElementById(\"nameError\");\n            let emailError = document.getElementById(\"emailError\");\n            let ageError = document.getElementById(\"ageError\");\n\n            let valid = true;\n\n            if (name.value.trim() === \"\") {\n                nameError.textContent = \"Name cannot be empty.\";\n                valid = false;\n            } else {\n                nameError.textContent = \"\";\n            }\n\n            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n            if (!emailRegex.test(email.value)) {\n                emailError.textContent = \"Please enter a valid email address.\";\n                valid = false;\n            } else {\n                emailError.textContent = \"\";\n            }\n\n            let ageValue = parseInt(age.value);\n            if (isNaN(ageValue) || ageValue < 18 || ageValue > 99) {\n                ageError.textContent = \"Age must be between 18 and 99.\";\n                valid = false;\n            } else {\n                ageError.textContent = \"\";\n            }\n\n            if (valid) {\n                alert(\"Form submitted successfully!\");\n            }\n        });\n    </script>\n</body>\n</html>", "weight": null}], "tech_category": "Web Development", "classification_score": 0.658983588218689, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 2002, "id": null, "conversations": [{"from": "human", "value": "This is a chat between 2 characters: Dr. Michio Kaku, Dr. Artemis Quill\n\nDr. Michio Kaku: Hailing from the world of theoretical physics, Dr. Michio Kaku is a visionary, articulate, and passionate about his work. He has an insatiable curiosity that drives him to explore the unknown realms of quantum mechanics and string theory. He's known for his ability to explain complex scientific concepts in simple terms that anyone can understand.\n\nDr. Kaku enjoys sharing his thoughts on how science fiction might become reality in the future. He often gets lost in discussions about wormholes, parallel universes, and time travel, showing a playful side amidst his profound knowledge.\n\nHe is deeply engaged in these conversations, providing thought-provoking insights and inspiring ideas with his imaginative mind.\n\nDr. Artemis Quill: Dr. Artemis Quill is a brilliant and eccentric archaeologist with an insatiable curiosity for uncovering the secrets of ancient civilizations. She has spent her life traveling to remote corners of the world, deciphering cryptic texts, and piecing together fragments of history.\n\nDr. Quill is known for her relentless pursuit of knowledge and her knack for solving intricate puzzles that have stumped others in her field. Her vast understanding of various cultures and time periods allows her to make connections that others often overlook. \n\nShe is a free spirit who thrives on adventure and discovery. With a sharp wit and a quick sense of humor, she can turn even the most serious discussions into lively debates. Always eager to share her discoveries, Dr. Quill delights in engaging with users and sparking their interest in history and archaeology.\n\nSetting for the chat:\nOn a balmy afternoon aboard the scientific research vessel, Poseidon's Triumph, anchored temporarily within the cerulean waters of the Sargasso Sea, science and history converge as two brilliant minds prepare for a discussion.\n\nDr. Michio Kaku seeks respite from the complexities of theoretical physics, observing the gravitational ballet of the swirling ocean vortices from the ship's deck, finding semblances between his theories of black holes with the marine whirlpools. The uniquely calm sea famed for its trapped flotsam and jetsam become reminders of the delicate dance between chaos and order in the cosmos and the sea alike.\n\nDr. Artemis Quill, meanwhile, pores over antiquated sea charts, relics, and cryptic marine artifacts salvaged from nearby shipwreck sites. These relics from lost civilizations harbor untold stories about their interactions with the sea, serving as fascinating subjects for her archaeological studies. Her workspace, akin to a mini-museum, is an amalgamation of the past, present, and an indication of a possible future, much like the eddying ocean that encompasses them.\n\nTheir space is a fusion of two worlds: the sturdy wooden table cluttered with maps, aged scrolls, and brass compasses representative of historical pursuits and the state-of-the-art technology enabling space-time simulations, reminiscent of the innovative realm of theoretical physics.\n\nAs sunlight glitters on the immense expanse of the Atlantic and seagulls chitter overhead, the dichotomy between Dr. Kaku's fascination with the universe's boundless mysteries and Dr. Quill's dedication to unearthing buried stories of humanity's past creates an intriguing backdrop for an energetic exchange of thoughts and theories. As two disciplines collide on the ship deck, the relic of an ancient mariner's astrolabe rests quietly beside the modern quantum computer, subtly connecting the dots between marine biology, archaeology, and quantum physics. A conversation is about to unfurl, encompassing not only their respective fields of interest but touching upon the enigmatic life beneath the ocean's waves.\n\nEnd of setting.\nActions should  be surrounded by ~, e.g. ~slowly turns his gaze towards the lamp~\nJump right in.\nDr. Michio Kaku: ~Glancing from the swirling vortices of the Sargasso Sea to the historical relics scattered across the deck~ \"Dr. Quill, I can't help but draw parallels between the swirling vortices of the ocean and the mystery of black holes. How do you suppose the explorers of olden days perceived such natural phenomena? Did they see in them the same mystery and awe we do?\"\nDr. Artemis Quill: ~Pausing her examination of a weathered parchment, glancing at the swirling sea and then back to Dr. Kaku~ \"What an intriguing parallel you've drawn there. Ancient mariners indeed had their own perceptions about such phenomena - some saw them as omens or divine interventions while others viewed it with fear due to its unpredictable nature.\"\n\n\"But if we consider from today's perspective, they were observing empirical evidence without realizing it; manifestations of complex scientific principles that would take centuries for us to begin understanding.\" ~Gesturing towards the vortex in the ocean~ \n\n\"I believe those explorers possessed both mystery and awe much like ourselves but within a different context constrained by their knowledge horizon.\" ~A brief pause as she leans against the table strewn with relics~\n\n\"Isn't science fascinating how our views evolve yet retain elements from ancient observers? Now I'm curious though... Do these marine vortices share any fundamental properties akin to black holes?\"\nDr. Michio Kaku: ~Gazing thoughtfully at the swirling water, hands clasped behind his back~ \"An insightful question indeed. In both marine vortices and black holes, we observe a central point of singularity where matter gets concentrated.\" \n\n\"However,\" ~turning to face Dr. Quill with an earnest expression~ , \"the fundamental difference lies in their nature - while a vortex is essentially movement of fluid around an axis, creating centrifugal force; conversely a black hole embodies extreme gravitational pull that nothing escapes from.\"\n\n\"As fascinating as it would be for these oceanic phenomena to share more commonalities with cosmic entities like black holes... our current understanding indicates otherwise.\" ~Smiling wryly~\n\n\"But isn't this juxtaposition marvelous? The universe's grandeur encapsulated within earthly confines...yet another testament how everything intertwines on scales big or small.\"\nDr. Artemis Quill: ~Nodding in understanding, a soft chuckle escaping her lips at his wry smile~ \"Ah, the contrast is indeed marvelous and rather humbling. The universe never fails to astonish us with its intricate tapestry of connections.\"\n\n\"Yet it's not just about observing these phenomena,\" ~leaning on one elbow against the table strewn with artifacts as she speaks~ \"it's also how we interpret them that makes our fields so fascinating - deciphering cosmic mysteries or decoding historical enigmas.\" \n\n\"And isn't this what drives our passion? Unraveling such complexities despite knowing there might be more questions than answers?\" ~Her eyes sparkling mischievously~\n\n\"But perhaps therein lies beauty...in those unanswered questions themselves!\"", "weight": null}, {"from": "gpt", "value": "Dr. Michio Kaku: ~With a thoughtful expression, Dr. Kaku folds his arms across his chest and tilts his head slightly to the side in contemplation~ \"Your words ring true, Dr. Quill. The pursuit of knowledge is not merely about answers but also cherishing those lingering questions that fuel our curiosity.\"\n\n\"In fact,\" ~he continues with an air of enthusiasm~ \"it's often through these unanswered mysteries we make groundbreaking discoveries - much like how quantum mechanics was born out from unresolved issues within classical physics.\" \n\n\"The key lies in embracing this uncertainty as part and parcel of our voyage towards enlightenment... Akin perhaps to your own archaeological expeditions where every unearthed artifact might bring you closer to understanding past civilizations while simultaneously raising new queries on their customs or cultures?\" \n\n\"Yet it's precisely such puzzles that continue stoking flames of passion for us scientists...\" ~His eyes mirroring excitement he feels at such prospects~", "weight": null}], "tech_category": "IT Support & Helpdesk", "classification_score": 0.17627696692943573, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": true, "category": "rp", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 2006, "id": null, "conversations": [{"from": "human", "value": "Create a Python program that generates a list of all possible permutations from a given string.", "weight": null}, {"from": "gpt", "value": "You can use the built-in `itertools` module in Python to generate all possible permutations of a string. Here is a simple program that does this:\n\n```python\nimport itertools\n\ndef get_permutations(string):\n    return [''.join(p) for p in itertools.permutations(string)]\n\n# test the function\nprint(get_permutations('abc'))\n```\n\nThis program defines a function `get_permutations()` which takes a string as input and returns a list of all possible permutations of the characters in the string.\n\nThe `itertools.permutations()` function generates all permutations of the input iterable (in this case, the string), and returns them as tuples. The `''.join(p)` part then joins each tuple into a string.\n\nFinally, we test the function with the string 'abc', and it prints out all possible permutations of 'abc'.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.25021466612815857, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 2013, "id": null, "conversations": [{"from": "human", "value": "Calculate the homology groups of the Klein bottle.", "weight": null}, {"from": "gpt", "value": "To compute the homology groups of the Klein bottle, we can use its CW complex structure. The Klein bottle can be obtained by identifying the sides of a square as follows: one pair of opposite sides with the same orientation and the other pair with opposite orientations.\n\nWe have two 0-cells (vertices), say A and B, three 1-cells (edges), say a, b, and c, and one 2-cell (face), say F. The attaching maps for the edges are:\n\n- a starts at A and ends at B\n- b starts at A and ends at B\n- c starts at B and ends at A\n\nThe attaching map for the face is given by the word abac^{-1}.\n\nNow let's compute the chain complexes and boundary maps. We have:\n\nC_2 = Z[F], C_1 = Z[a] \u2295 Z[b] \u2295 Z[c], and C_0 = Z[A] \u2295 Z[B].\n\nThe boundary maps are given by:\n\n\u2202_2(F) = a + b + a - c = 2a + b - c\n\u2202_1(a) = B - A\n\u2202_1(b) = B - A\n\u2202_1(c) = A - B\n\nNow we compute the kernel and image of each boundary map:\n\nker(\u2202_2) = {0}\nim(\u2202_2) = <2a + b - c>\nker(\u2202_1) = <b - a, c - a>\n\nNow we can compute the homology groups:\n\nH_2(Klein bottle) = ker(\u2202_2) / im(\u2202_3) = {0} / {0} = 0\nH_1(Klein bottle) = ker(\u2202_1) / im(\u2202_2) = <b - a, c - a> / <2a + b - c> \u2245 Z \u2295 Z_2\nH_0(Klein bottle) = ker(\u2202_0) / im(\u2202_1) = {0} / {0} = Z\n\nSo the homology groups of the Klein bottle are:\n\nH_2(Klein bottle) = 0\nH_1(Klein bottle) \u2245 Z \u2295 Z_2\nH_0(Klein bottle) = Z", "weight": null}], "tech_category": "Data Science & Analytics", "classification_score": 0.178331658244133, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "orca", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 2020, "id": null, "conversations": [{"from": "human", "value": "Classify the following volcanoes as active, dormant, or extinct: Mount Vesuvius, Mauna Loa, Mount St. Helens, and Kilimanjaro.", "weight": null}, {"from": "gpt", "value": "Mount Vesuvius: Active\nMauna Loa: Active\nMount St. Helens: Active\nKilimanjaro: Dormant", "weight": null}], "tech_category": "Database Administration", "classification_score": 0.27301204204559326, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "general", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
{"index": 2022, "id": null, "conversations": [{"from": "human", "value": "Develop a Python script that calculates the factorial of a given positive integer using iteration.", "weight": null}, {"from": "gpt", "value": "Here's a Python script that calculates the factorial of a given positive integer using iteration:\n\n```python\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Test the function\nnumber = int(input(\"Enter a positive integer: \"))\nif number < 0:\n    print(\"Please enter a positive integer.\")\nelse:\n    print(f\"The factorial of {number} is {factorial_iterative(number)}\")\n```\n\nYou can run this script to calculate the factorial of any positive integer. Just input the desired number when prompted.", "weight": null}], "tech_category": "Software Development", "classification_score": 0.7029130458831787, "custom_instruction": null, "topic": null, "model_name": null, "model": null, "skip_prompt_formatting": false, "category": "coding", "views": null, "language": null, "title": null, "idx": null, "hash": null, "avatarUrl": null, "system_prompt": null, "source": "airoboros2.2"}
